{"ast":null,"code":"var _jsxFileName = \"/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { easyTexts } from '../data/easyTexts';\nimport { mediumTexts } from '../data/mediumTexts';\nimport { hardTexts } from '../data/hardTexts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 30px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  margin-bottom: 30px;\n`;\n_c = GameContainer;\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 25px;\n  padding: 20px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n  border: 2px solid #eee;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);\n  position: relative;\n  \n  &::before {\n    content: '📝';\n    position: absolute;\n    top: -10px;\n    left: 20px;\n    background-color: white;\n    padding: 0 10px;\n    font-size: 16px;\n  }\n`;\n_c2 = TextContainer;\nconst HighlightedText = styled.span`\n  background-color: ${props => props.isCurrent ? 'rgba(255, 255, 153, 0.7)' : 'transparent'};\n  color: ${props => {\n  if (props.isCurrent) return '#333';\n  return props.isCorrect ? '#27ae60' : '#e74c3c';\n}};\n  text-decoration: ${props => !props.isCorrect && !props.isCurrent ? 'line-through' : 'none'};\n  transition: all 0.15s ease;\n  padding: 0 1px;\n  border-radius: 2px;\n  position: relative;\n  \n  ${props => props.isCurrent && `\n    box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n    animation: pulse 1.5s infinite;\n    \n    @keyframes pulse {\n      0%, 100% {\n        box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n      }\n      50% {\n        box-shadow: 0 0 0 4px rgba(255, 255, 153, 0.3);\n      }\n    }\n  `}\n`;\n_c3 = HighlightedText;\nconst UnusedText = styled.span`\n  color: #999;\n`;\n_c4 = UnusedText;\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 20px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  resize: none;\n  height: 120px;\n  margin-bottom: 25px;\n  transition: all 0.3s ease;\n  \n  &:focus {\n    outline: none;\n    border-color: #3498db;\n    box-shadow: 0 0 10px rgba(52, 152, 219, 0.3);\n  }\n`;\n_c5 = InputArea;\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  padding: 15px;\n  background: linear-gradient(to right, rgba(52, 152, 219, 0.05), rgba(52, 152, 219, 0.1));\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n_c6 = StatContainer;\nconst Stat = styled.div`\n  text-align: center;\n`;\n_c7 = Stat;\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n_c8 = StatLabel;\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n_c9 = StatValue;\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 1rem;\n  box-shadow: 0 2px 8px rgba(244, 67, 54, 0.2);\n  display: flex;\n  align-items: center;\n  \n  &::before {\n    content: '⚠️';\n    margin-right: 10px;\n    font-size: 1.3rem;\n  }\n`;\n\n// Define target word counts for each difficulty level\n_c10 = ErrorMessage;\nconst TARGET_WORD_COUNTS = {\n  easy: 100,\n  medium: 150,\n  hard: 200\n};\n\n// Define time limits for each difficulty level (in seconds)\nconst TIME_LIMITS = {\n  easy: 180,\n  // 3 minutes\n  medium: 180,\n  // 3 minutes\n  hard: 120 // 2 minutes\n};\n\n// Select all text in the current difficulty level\nconst getAllTextsForDifficulty = difficulty => {\n  switch (difficulty) {\n    case 'easy':\n      return easyTexts;\n    case 'medium':\n      return mediumTexts;\n    case 'hard':\n      return hardTexts;\n    default:\n      return easyTexts;\n  }\n};\n\n// Count words in a text\nconst countWords = text => {\n  return text.trim().split(/\\s+/).length;\n};\nconst TypingGame = ({\n  text,\n  difficulty,\n  onEndGame\n}) => {\n  _s();\n  // Complete text pool for current difficulty\n  const [textPool, setTextPool] = useState([]);\n  // Current text being typed\n  const [currentText, setCurrentText] = useState(text);\n  // Full text the user needs to type (may include multiple text segments)\n  const [fullText, setFullText] = useState(text);\n  // Total words typed across all texts\n  const [totalWordsTyped, setTotalWordsTyped] = useState(0);\n  // Target word count for current difficulty\n  const [targetWordCount, setTargetWordCount] = useState(TARGET_WORD_COUNTS[difficulty]);\n  // Time limit for current difficulty\n  const [timeLimit, setTimeLimit] = useState(TIME_LIMITS[difficulty]);\n  // Time remaining in seconds\n  const [timeLeft, setTimeLeft] = useState(TIME_LIMITS[difficulty]);\n  // Used texts to avoid repeating the same text\n  const [usedTexts, setUsedTexts] = useState(new Set());\n  const [inputText, setInputText] = useState('');\n  const [startTime, setStartTime] = useState(null);\n  const [typingStarted, setTypingStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [correctChars, setCorrectChars] = useState(0);\n  const [incorrectChars, setIncorrectChars] = useState(0);\n  const [mistakesMade, setMistakesMade] = useState(0);\n  const [wordsTyped, setWordsTyped] = useState(0);\n  const [charsTyped, setCharsTyped] = useState(0);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(100);\n  const [carPosition, setCarPosition] = useState(0);\n  const [previousBestWpm, setPreviousBestWpm] = useState(0);\n  const [previousBestPosition, setPreviousBestPosition] = useState(0);\n  const [error, setError] = useState(null);\n  const inputRef = useRef(null);\n  const textContainerRef = useRef(null);\n  const lastCorrectIndexRef = useRef(0);\n  const currentPosRef = useRef(0);\n\n  // Initialize text pool, target word count, and time limit\n  useEffect(() => {\n    try {\n      const allTexts = getAllTextsForDifficulty(difficulty);\n\n      // Make sure we have enough texts - duplicate and slightly modify if necessary\n      let extendedTextPool = [...allTexts];\n\n      // If we don't have at least 10 unique texts, create variations\n      if (allTexts.length < 10) {\n        // Add variations of existing texts by adding/removing some filler words\n        const fillerPhrases = [\"In other words, \", \"To put it simply, \", \"It's worth noting that \", \"Interestingly, \", \"Importantly, \"];\n        allTexts.forEach(text => {\n          const randomFiller = fillerPhrases[Math.floor(Math.random() * fillerPhrases.length)];\n          extendedTextPool.push(randomFiller + text);\n        });\n      }\n      setTextPool(extendedTextPool);\n      setTargetWordCount(TARGET_WORD_COUNTS[difficulty]);\n      setTimeLimit(TIME_LIMITS[difficulty]);\n      setTimeLeft(TIME_LIMITS[difficulty]);\n\n      // Mark the initial text as used\n      const newUsedTexts = new Set();\n      newUsedTexts.add(text);\n      setUsedTexts(newUsedTexts);\n\n      // Start with the initial text\n      setCurrentText(text);\n      setFullText(text);\n    } catch (error) {\n      console.error(\"Error initializing text pool:\", error);\n      setError(\"Error loading text content. Please try again.\");\n    }\n  }, [text, difficulty]);\n\n  // This useEffect ensures car position is reset when component is mounted\n  useEffect(() => {\n    // Reset car position and previous best position on component mount\n    setCarPosition(0);\n    setPreviousBestPosition(0);\n\n    // Clean up any existing game state\n    setInputText('');\n    setTypingStarted(false);\n    setStartTime(null);\n    setWpm(0);\n    setGameOver(false);\n    setCorrectChars(0);\n    setIncorrectChars(0);\n    setWordsTyped(0);\n    setCharsTyped(0);\n    setAccuracy(100);\n    setMistakesMade(0);\n    setTotalWordsTyped(0);\n    setTimeLeft(TIME_LIMITS[difficulty]);\n    lastCorrectIndexRef.current = 0;\n    currentPosRef.current = 0;\n  }, [difficulty]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (typingStarted && timeLeft > 0 && !gameOver) {\n      const timer = setTimeout(() => {\n        setTimeLeft(prev => prev - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else if (timeLeft === 0 && !gameOver) {\n      setGameOver(true);\n    }\n  }, [typingStarted, timeLeft, gameOver]);\n\n  // Auto-scroll text as user types\n  useEffect(() => {\n    if (textContainerRef.current && typingStarted) {\n      const container = textContainerRef.current;\n      const currentPos = inputText.length;\n\n      // Only scroll if the position has changed\n      if (currentPos !== currentPosRef.current) {\n        currentPosRef.current = currentPos;\n\n        // Find the current character element\n        const currentCharElement = container.querySelector(`[data-index=\"${currentPos}\"]`);\n        if (currentCharElement) {\n          // Calculate where to scroll to keep current character in view with some context\n          const containerHeight = container.clientHeight;\n          const scrollPos = currentCharElement.getBoundingClientRect().top - container.getBoundingClientRect().top - containerHeight / 2;\n\n          // Smooth scroll to new position\n          container.scrollTo({\n            top: container.scrollTop + scrollPos,\n            behavior: 'smooth'\n          });\n        }\n      }\n    }\n  }, [inputText, typingStarted]);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const totalWords = totalWordsTyped + inputText.trim().split(/\\s+/).length;\n      return timeElapsed > 0 ? Math.round(totalWords / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText, totalWordsTyped]);\n\n  // Calculate car position based on progress through the text\n  const calculateCarPosition = useCallback(() => {\n    try {\n      // If no input yet, ensure car is at start position\n      if (!typingStarted) {\n        return 0;\n      }\n\n      // Calculate words typed so far (completed texts + current progress)\n      const currentWordsTyped = totalWordsTyped + (inputText.trim().split(/\\s+/).length || 0);\n\n      // Calculate progress percentage based on total target words\n      const progressPercentage = currentWordsTyped / targetWordCount * 100;\n\n      // Ensure the position is between 0 and 100\n      return Math.min(Math.max(0, progressPercentage), 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, [typingStarted, inputText, totalWordsTyped, targetWordCount]);\n\n  // Load previous best scores from localStorage based on difficulty\n  useEffect(() => {\n    try {\n      const storageKey = `typingRacer_bestWpm_${difficulty}`;\n      const savedBestWpm = localStorage.getItem(storageKey);\n      if (savedBestWpm) {\n        const bestWpm = parseInt(savedBestWpm, 10);\n        setPreviousBestWpm(bestWpm);\n      }\n    } catch (error) {\n      console.error(\"Error loading previous best score:\", error);\n      // Continue without previous best data\n    }\n  }, [difficulty]);\n\n  // Save best score to localStorage when game ends\n  useEffect(() => {\n    if (gameOver && wpm > 0) {\n      try {\n        const storageKey = `typingRacer_bestWpm_${difficulty}`;\n        const savedBestWpm = localStorage.getItem(storageKey);\n        if (!savedBestWpm || wpm > parseInt(savedBestWpm, 10)) {\n          localStorage.setItem(storageKey, wpm.toString());\n        }\n      } catch (error) {\n        console.error(\"Error saving best score:\", error);\n      }\n    }\n  }, [gameOver, wpm, difficulty]);\n\n  // Add more text when user completes current text\n  const addMoreText = () => {\n    try {\n      // Create a new array from all texts for the current difficulty, excluding the current text\n      const nextTextPool = getAllTextsForDifficulty(difficulty).filter(t => t.text !== currentText);\n\n      // Filter out texts that have significant overlap with the current text to avoid repetition\n      const nonRepeatingTexts = nextTextPool.filter(t => {\n        // Calculate text similarity - avoid texts that have similar content\n        const similarity = calculateTextSimilarity(t.text, currentText);\n        return similarity < 0.3; // Only include texts with less than 30% similarity\n      });\n\n      // If we have non-repeating texts, choose one randomly\n      let nextText = '';\n      if (nonRepeatingTexts.length > 0) {\n        const randomIndex = Math.floor(Math.random() * nonRepeatingTexts.length);\n        nextText = nonRepeatingTexts[randomIndex].text;\n      } else if (nextTextPool.length > 0) {\n        // If all texts have some repetition but we have other texts, pick the least similar\n        nextTextPool.sort((a, b) => {\n          const similarityA = calculateTextSimilarity(a.text, currentText);\n          const similarityB = calculateTextSimilarity(b.text, currentText);\n          return similarityA - similarityB;\n        });\n        nextText = nextTextPool[0].text;\n      } else {\n        // As a fallback, generate a unique paragraph\n        nextText = generateUniqueParagraph();\n      }\n\n      // Update the used texts set using Array.from to create a proper new Set\n      setUsedTexts(prevUsedTexts => new Set([...Array.from(prevUsedTexts), nextText]));\n\n      // Concatenate the new text\n      setFullText(prev => prev + \" \" + nextText);\n\n      // Update current text to include only what's left to type\n      setCurrentText(fullText.substring(inputText.length));\n      console.log(\"Added new text:\", nextText.substring(0, 30) + \"...\");\n      return true;\n    } catch (error) {\n      console.error(\"Error adding more text:\", error);\n      return false;\n    }\n  };\n\n  // Add a function to calculate text similarity (simple implementation)\n  const calculateTextSimilarity = (text1, text2) => {\n    // Convert to lowercase and split into words\n    const words1 = text1.toLowerCase().split(/\\s+/);\n    const words2 = text2.toLowerCase().split(/\\s+/);\n\n    // Count matching words\n    const set1 = new Set(words1);\n    const set2 = new Set(words2);\n\n    // Convert sets to arrays for proper iteration\n    const commonWords = Array.from(set1).filter(word => set2.has(word)).length;\n\n    // Calculate Jaccard similarity\n    const totalUniqueWords = new Set([...Array.from(set1), ...Array.from(set2)]).size;\n    return totalUniqueWords === 0 ? 0 : commonWords / totalUniqueWords;\n  };\n\n  // Add a function to generate a unique paragraph if needed\n  const generateUniqueParagraph = () => {\n    // This is a simple placeholder - in a real app, you might use an API\n    const topics = [\"exploring new technologies\", \"learning programming skills\", \"improving typing speed\", \"practicing focus and concentration\", \"developing consistent habits\"];\n    const randomTopic = topics[Math.floor(Math.random() * topics.length)];\n    return `This is a newly generated paragraph about ${randomTopic}. It's designed to be unique and different from the previous text to ensure you get varied practice while improving your typing skills.`;\n  };\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        let mistakes = mistakesMade;\n        for (let i = 0; i < inputText.length; i++) {\n          if (i < fullText.length) {\n            if (inputText[i] === fullText[i]) {\n              correct++;\n            } else {\n              incorrect++;\n\n              // Track if this was a new mistake (character was correct before)\n              if (i <= lastCorrectIndexRef.current) {\n                mistakes++;\n              }\n            }\n          }\n        }\n\n        // Update the last correct index\n        if (inputText.length > 0 && correct + incorrect === inputText.length) {\n          let lastCorrectIndex = 0;\n          for (let i = inputText.length - 1; i >= 0; i--) {\n            if (inputText[i] === fullText[i]) {\n              lastCorrectIndex = i;\n              break;\n            }\n          }\n          lastCorrectIndexRef.current = lastCorrectIndex;\n        }\n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setMistakesMade(mistakes);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n\n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round(correct / totalChars * 100) : 100);\n\n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n\n        // Update car position based on progress through text\n        setCarPosition(calculateCarPosition());\n\n        // Check if user has completed the current text\n        if (inputText.length >= fullText.length) {\n          // Add the words from this text to the total\n          const currentTextWordCount = fullText.trim().split(/\\s+/).length;\n          const newTotalWords = totalWordsTyped + currentTextWordCount;\n          setTotalWordsTyped(newTotalWords);\n\n          // Check if we've reached the target word count\n          if (newTotalWords >= targetWordCount) {\n            setGameOver(true);\n          } else {\n            // Try to add more text\n            const textAdded = addMoreText();\n\n            // If no more text could be added, end the game\n            if (!textAdded) {\n              setGameOver(true);\n            } else {\n              // Reset input to start typing the new text\n              setInputText('');\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, fullText, typingStarted, gameOver, calculateSpeed, calculateCarPosition, addMoreText, mistakesMade, totalWordsTyped, targetWordCount]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // New scoring formula with focus on WPM and accuracy\n      // Target: ~5000 for decent typing (60 WPM, 95% accuracy)\n      // Target: ~8000 for excellent typing (100 WPM, 100% accuracy)\n\n      // Base score heavily influenced by WPM\n      const wpmFactor = wpm * 60;\n\n      // Accuracy modifier: scales from 0.5 at 80% to 1.2 at 100%\n      // Heavily penalizes low accuracy, rewards perfect accuracy\n      const accuracyModifier = Math.max(0.5, accuracy / 100 * 1.5 - 0.3);\n\n      // Mistakes penalty\n      const mistakesPenalty = Math.max(0, 1 - mistakesMade / 100 * 0.5);\n\n      // Words typed provides a small bonus\n      const wordsBonus = Math.sqrt(totalWordsTyped) * 20;\n\n      // Time bonus - more points for completing before time limit\n      const timeBonus = timeLeft > 0 ? Math.sqrt(timeLeft) * 10 : 0;\n\n      // Combine factors\n      const rawScore = (wpmFactor + wordsBonus + timeBonus) * accuracyModifier * mistakesPenalty;\n\n      // Difficulty modifier\n      const difficultyMultiplier = {\n        easy: 0.85,\n        medium: 1.0,\n        hard: 1.25\n      }[difficulty];\n\n      // Calculate final score\n      const finalScore = Math.round(rawScore * difficultyMultiplier);\n\n      // Cap at 10,000\n      return Math.min(finalScore, 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Format time display\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\n  };\n\n  // Handle input change\n  const handleInputChange = e => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n\n      // Show a window of 500 characters, centered on the current typing position\n      const windowSize = 500;\n      const currentPos = inputText.length;\n      const startPos = Math.max(0, currentPos - windowSize / 2);\n      const endPos = Math.min(fullText.length, startPos + windowSize);\n      for (let i = startPos; i < endPos; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && fullText[i] === inputText[i];\n        if (isTyped) {\n          elements.push(/*#__PURE__*/_jsxDEV(HighlightedText, {\n            isCorrect: isCorrect,\n            isCurrent: isCurrent,\n            \"data-index\": i,\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 13\n          }, this));\n        } else if (isCurrent) {\n          elements.push(/*#__PURE__*/_jsxDEV(HighlightedText, {\n            isCorrect: true,\n            isCurrent: true,\n            \"data-index\": i,\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 13\n          }, this));\n        } else {\n          elements.push(/*#__PURE__*/_jsxDEV(UnusedText, {\n            \"data-index\": i,\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 13\n          }, this));\n        }\n      }\n      return /*#__PURE__*/_jsxDEV(TextContainer, {\n        ref: textContainerRef,\n        children: elements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 9\n      }, this);\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error rendering text. Please restart the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  const TimeDisplay = styled.div`\n    background: ${props => timeLeft < 10 ? '#e74c3c' : '#2ecc71'};\n    color: white;\n    border-radius: 50%;\n    width: 60px;\n    height: 60px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.1rem;\n    font-weight: bold;\n    margin: 0 auto 20px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease;\n    animation: ${props => timeLeft < 10 ? 'pulse 1s infinite' : 'none'};\n    \n    @keyframes pulse {\n      0%, 100% {\n        transform: scale(1);\n      }\n      50% {\n        transform: scale(1.05);\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n      }\n    }\n  `;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameOver ? /*#__PURE__*/_jsxDEV(Results, {\n      wpm: wpm,\n      accuracy: accuracy,\n      correctChars: correctChars,\n      incorrectChars: incorrectChars,\n      wordsTyped: totalWordsTyped,\n      score: calculateScore(),\n      difficulty: difficulty,\n      onPlayAgain: onEndGame,\n      previousBestWpm: previousBestWpm,\n      mistakesMade: mistakesMade,\n      timeLeft: timeLeft,\n      timeLimit: timeLimit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GameContainer, {\n      children: [error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TimeDisplay, {\n        children: formatTime(timeLeft)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RaceTrack, {\n        position: carPosition,\n        previousBestPosition: previousBestPosition,\n        progress: carPosition,\n        targetLength: targetWordCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 762,\n        columnNumber: 11\n      }, this), renderText(), /*#__PURE__*/_jsxDEV(InputArea, {\n        ref: inputRef,\n        value: inputText,\n        onChange: handleInputChange,\n        placeholder: \"Start typing here...\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StatContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"WPM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 781,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: wpm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 782,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Accuracy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 785,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: [accuracy, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 789,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: [Math.round(carPosition), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Mistakes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: mistakesMade\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Best WPM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: previousBestWpm > 0 ? previousBestWpm : '-'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 738,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingGame, \"JoA/x7opL3MNVMPWS9ChHuk8XMs=\");\n_c11 = TypingGame;\nexport default TypingGame;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"GameContainer\");\n$RefreshReg$(_c2, \"TextContainer\");\n$RefreshReg$(_c3, \"HighlightedText\");\n$RefreshReg$(_c4, \"UnusedText\");\n$RefreshReg$(_c5, \"InputArea\");\n$RefreshReg$(_c6, \"StatContainer\");\n$RefreshReg$(_c7, \"Stat\");\n$RefreshReg$(_c8, \"StatLabel\");\n$RefreshReg$(_c9, \"StatValue\");\n$RefreshReg$(_c10, \"ErrorMessage\");\n$RefreshReg$(_c11, \"TypingGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","styled","RaceTrack","Results","easyTexts","mediumTexts","hardTexts","jsxDEV","_jsxDEV","GameContainer","div","_c","TextContainer","_c2","HighlightedText","span","props","isCurrent","isCorrect","_c3","UnusedText","_c4","InputArea","textarea","_c5","StatContainer","_c6","Stat","_c7","StatLabel","_c8","StatValue","_c9","ErrorMessage","_c10","TARGET_WORD_COUNTS","easy","medium","hard","TIME_LIMITS","getAllTextsForDifficulty","difficulty","countWords","text","trim","split","length","TypingGame","onEndGame","_s","textPool","setTextPool","currentText","setCurrentText","fullText","setFullText","totalWordsTyped","setTotalWordsTyped","targetWordCount","setTargetWordCount","timeLimit","setTimeLimit","timeLeft","setTimeLeft","usedTexts","setUsedTexts","Set","inputText","setInputText","startTime","setStartTime","typingStarted","setTypingStarted","gameOver","setGameOver","correctChars","setCorrectChars","incorrectChars","setIncorrectChars","mistakesMade","setMistakesMade","wordsTyped","setWordsTyped","charsTyped","setCharsTyped","wpm","setWpm","accuracy","setAccuracy","carPosition","setCarPosition","previousBestWpm","setPreviousBestWpm","previousBestPosition","setPreviousBestPosition","error","setError","inputRef","textContainerRef","lastCorrectIndexRef","currentPosRef","allTexts","extendedTextPool","fillerPhrases","forEach","randomFiller","Math","floor","random","push","newUsedTexts","add","console","current","timer","setTimeout","prev","clearTimeout","container","currentPos","currentCharElement","querySelector","containerHeight","clientHeight","scrollPos","getBoundingClientRect","top","scrollTo","scrollTop","behavior","calculateSpeed","timeElapsed","Date","now","totalWords","round","calculateCarPosition","currentWordsTyped","progressPercentage","min","max","storageKey","savedBestWpm","localStorage","getItem","bestWpm","parseInt","setItem","toString","addMoreText","nextTextPool","filter","t","nonRepeatingTexts","similarity","calculateTextSimilarity","nextText","randomIndex","sort","a","b","similarityA","similarityB","generateUniqueParagraph","prevUsedTexts","Array","from","substring","log","text1","text2","words1","toLowerCase","words2","set1","set2","commonWords","word","has","totalUniqueWords","size","topics","randomTopic","correct","incorrect","mistakes","i","lastCorrectIndex","totalChars","currentWpm","currentTextWordCount","newTotalWords","textAdded","focus","calculateScore","wpmFactor","accuracyModifier","mistakesPenalty","wordsBonus","sqrt","timeBonus","rawScore","difficultyMultiplier","finalScore","formatTime","seconds","mins","secs","handleInputChange","e","target","value","renderText","elements","windowSize","startPos","endPos","isTyped","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","TimeDisplay","score","onPlayAgain","position","progress","targetLength","onChange","placeholder","autoFocus","_c11","$RefreshReg$"],"sources":["/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { Difficulty } from '../App';\nimport { easyTexts } from '../data/easyTexts';\nimport { mediumTexts } from '../data/mediumTexts';\nimport { hardTexts } from '../data/hardTexts';\n\ninterface TypingGameProps {\n  text: string;\n  difficulty: Difficulty;\n  onEndGame: () => void;\n}\n\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 30px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  margin-bottom: 30px;\n`;\n\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 25px;\n  padding: 20px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n  border: 2px solid #eee;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);\n  position: relative;\n  \n  &::before {\n    content: '📝';\n    position: absolute;\n    top: -10px;\n    left: 20px;\n    background-color: white;\n    padding: 0 10px;\n    font-size: 16px;\n  }\n`;\n\nconst HighlightedText = styled.span<{ isCorrect: boolean; isCurrent: boolean }>`\n  background-color: ${props => props.isCurrent ? 'rgba(255, 255, 153, 0.7)' : 'transparent'};\n  color: ${props => {\n    if (props.isCurrent) return '#333';\n    return props.isCorrect ? '#27ae60' : '#e74c3c';\n  }};\n  text-decoration: ${props => (!props.isCorrect && !props.isCurrent) ? 'line-through' : 'none'};\n  transition: all 0.15s ease;\n  padding: 0 1px;\n  border-radius: 2px;\n  position: relative;\n  \n  ${props => props.isCurrent && `\n    box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n    animation: pulse 1.5s infinite;\n    \n    @keyframes pulse {\n      0%, 100% {\n        box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n      }\n      50% {\n        box-shadow: 0 0 0 4px rgba(255, 255, 153, 0.3);\n      }\n    }\n  `}\n`;\n\nconst UnusedText = styled.span`\n  color: #999;\n`;\n\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 20px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  resize: none;\n  height: 120px;\n  margin-bottom: 25px;\n  transition: all 0.3s ease;\n  \n  &:focus {\n    outline: none;\n    border-color: #3498db;\n    box-shadow: 0 0 10px rgba(52, 152, 219, 0.3);\n  }\n`;\n\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  padding: 15px;\n  background: linear-gradient(to right, rgba(52, 152, 219, 0.05), rgba(52, 152, 219, 0.1));\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n\nconst Stat = styled.div`\n  text-align: center;\n`;\n\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 1rem;\n  box-shadow: 0 2px 8px rgba(244, 67, 54, 0.2);\n  display: flex;\n  align-items: center;\n  \n  &::before {\n    content: '⚠️';\n    margin-right: 10px;\n    font-size: 1.3rem;\n  }\n`;\n\n// Define target word counts for each difficulty level\nconst TARGET_WORD_COUNTS = {\n  easy: 100,\n  medium: 150,\n  hard: 200\n};\n\n// Define time limits for each difficulty level (in seconds)\nconst TIME_LIMITS = {\n  easy: 180,  // 3 minutes\n  medium: 180, // 3 minutes\n  hard: 120    // 2 minutes\n};\n\n// Select all text in the current difficulty level\nconst getAllTextsForDifficulty = (difficulty: string) => {\n  switch (difficulty) {\n    case 'easy':\n      return easyTexts;\n    case 'medium':\n      return mediumTexts;\n    case 'hard':\n      return hardTexts;\n    default:\n      return easyTexts;\n  }\n};\n\n// Count words in a text\nconst countWords = (text: string): number => {\n  return text.trim().split(/\\s+/).length;\n};\n\nconst TypingGame: React.FC<TypingGameProps> = ({\n  text,\n  difficulty,\n  onEndGame\n}) => {\n  // Complete text pool for current difficulty\n  const [textPool, setTextPool] = useState<string[]>([]);\n  // Current text being typed\n  const [currentText, setCurrentText] = useState<string>(text);\n  // Full text the user needs to type (may include multiple text segments)\n  const [fullText, setFullText] = useState<string>(text);\n  // Total words typed across all texts\n  const [totalWordsTyped, setTotalWordsTyped] = useState<number>(0);\n  // Target word count for current difficulty\n  const [targetWordCount, setTargetWordCount] = useState<number>(TARGET_WORD_COUNTS[difficulty]);\n  // Time limit for current difficulty\n  const [timeLimit, setTimeLimit] = useState<number>(TIME_LIMITS[difficulty]);\n  // Time remaining in seconds\n  const [timeLeft, setTimeLeft] = useState<number>(TIME_LIMITS[difficulty]);\n  // Used texts to avoid repeating the same text\n  const [usedTexts, setUsedTexts] = useState<Set<string>>(new Set());\n  \n  const [inputText, setInputText] = useState<string>('');\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [typingStarted, setTypingStarted] = useState<boolean>(false);\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [correctChars, setCorrectChars] = useState<number>(0);\n  const [incorrectChars, setIncorrectChars] = useState<number>(0);\n  const [mistakesMade, setMistakesMade] = useState<number>(0);\n  const [wordsTyped, setWordsTyped] = useState<number>(0);\n  const [charsTyped, setCharsTyped] = useState<number>(0);\n  const [wpm, setWpm] = useState<number>(0);\n  const [accuracy, setAccuracy] = useState<number>(100);\n  const [carPosition, setCarPosition] = useState<number>(0);\n  const [previousBestWpm, setPreviousBestWpm] = useState<number>(0);\n  const [previousBestPosition, setPreviousBestPosition] = useState<number>(0);\n  const [error, setError] = useState<string | null>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const textContainerRef = useRef<HTMLDivElement>(null);\n  const lastCorrectIndexRef = useRef<number>(0);\n  const currentPosRef = useRef<number>(0);\n  \n  // Initialize text pool, target word count, and time limit\n  useEffect(() => {\n    try {\n      const allTexts = getAllTextsForDifficulty(difficulty);\n      \n      // Make sure we have enough texts - duplicate and slightly modify if necessary\n      let extendedTextPool = [...allTexts];\n      \n      // If we don't have at least 10 unique texts, create variations\n      if (allTexts.length < 10) {\n        // Add variations of existing texts by adding/removing some filler words\n        const fillerPhrases = [\n          \"In other words, \", \n          \"To put it simply, \", \n          \"It's worth noting that \", \n          \"Interestingly, \", \n          \"Importantly, \"\n        ];\n        \n        allTexts.forEach(text => {\n          const randomFiller = fillerPhrases[Math.floor(Math.random() * fillerPhrases.length)];\n          extendedTextPool.push(randomFiller + text);\n        });\n      }\n      \n      setTextPool(extendedTextPool);\n      setTargetWordCount(TARGET_WORD_COUNTS[difficulty]);\n      setTimeLimit(TIME_LIMITS[difficulty]);\n      setTimeLeft(TIME_LIMITS[difficulty]);\n      \n      // Mark the initial text as used\n      const newUsedTexts = new Set<string>();\n      newUsedTexts.add(text);\n      setUsedTexts(newUsedTexts);\n      \n      // Start with the initial text\n      setCurrentText(text);\n      setFullText(text);\n    } catch (error) {\n      console.error(\"Error initializing text pool:\", error);\n      setError(\"Error loading text content. Please try again.\");\n    }\n  }, [text, difficulty]);\n  \n  // This useEffect ensures car position is reset when component is mounted\n  useEffect(() => {\n    // Reset car position and previous best position on component mount\n    setCarPosition(0);\n    setPreviousBestPosition(0);\n    \n    // Clean up any existing game state\n    setInputText('');\n    setTypingStarted(false);\n    setStartTime(null);\n    setWpm(0);\n    setGameOver(false);\n    setCorrectChars(0);\n    setIncorrectChars(0);\n    setWordsTyped(0);\n    setCharsTyped(0);\n    setAccuracy(100);\n    setMistakesMade(0);\n    setTotalWordsTyped(0);\n    setTimeLeft(TIME_LIMITS[difficulty]);\n    lastCorrectIndexRef.current = 0;\n    currentPosRef.current = 0;\n  }, [difficulty]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (typingStarted && timeLeft > 0 && !gameOver) {\n      const timer = setTimeout(() => {\n        setTimeLeft(prev => prev - 1);\n      }, 1000);\n      \n      return () => clearTimeout(timer);\n    } else if (timeLeft === 0 && !gameOver) {\n      setGameOver(true);\n    }\n  }, [typingStarted, timeLeft, gameOver]);\n\n  // Auto-scroll text as user types\n  useEffect(() => {\n    if (textContainerRef.current && typingStarted) {\n      const container = textContainerRef.current;\n      const currentPos = inputText.length;\n      \n      // Only scroll if the position has changed\n      if (currentPos !== currentPosRef.current) {\n        currentPosRef.current = currentPos;\n        \n        // Find the current character element\n        const currentCharElement = container.querySelector(`[data-index=\"${currentPos}\"]`);\n        \n        if (currentCharElement) {\n          // Calculate where to scroll to keep current character in view with some context\n          const containerHeight = container.clientHeight;\n          const scrollPos = currentCharElement.getBoundingClientRect().top - \n                           container.getBoundingClientRect().top - \n                           (containerHeight / 2);\n          \n          // Smooth scroll to new position\n          container.scrollTo({\n            top: container.scrollTop + scrollPos,\n            behavior: 'smooth'\n          });\n        }\n      }\n    }\n  }, [inputText, typingStarted]);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      \n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const totalWords = totalWordsTyped + inputText.trim().split(/\\s+/).length;\n      \n      return timeElapsed > 0 ? Math.round(totalWords / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText, totalWordsTyped]);\n\n  // Calculate car position based on progress through the text\n  const calculateCarPosition = useCallback(() => {\n    try {\n      // If no input yet, ensure car is at start position\n      if (!typingStarted) {\n        return 0;\n      }\n      \n      // Calculate words typed so far (completed texts + current progress)\n      const currentWordsTyped = totalWordsTyped + (inputText.trim().split(/\\s+/).length || 0);\n      \n      // Calculate progress percentage based on total target words\n      const progressPercentage = (currentWordsTyped / targetWordCount) * 100;\n      \n      // Ensure the position is between 0 and 100\n      return Math.min(Math.max(0, progressPercentage), 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, [typingStarted, inputText, totalWordsTyped, targetWordCount]);\n\n  // Load previous best scores from localStorage based on difficulty\n  useEffect(() => {\n    try {\n      const storageKey = `typingRacer_bestWpm_${difficulty}`;\n      const savedBestWpm = localStorage.getItem(storageKey);\n      \n      if (savedBestWpm) {\n        const bestWpm = parseInt(savedBestWpm, 10);\n        setPreviousBestWpm(bestWpm);\n      }\n    } catch (error) {\n      console.error(\"Error loading previous best score:\", error);\n      // Continue without previous best data\n    }\n  }, [difficulty]);\n\n  // Save best score to localStorage when game ends\n  useEffect(() => {\n    if (gameOver && wpm > 0) {\n      try {\n        const storageKey = `typingRacer_bestWpm_${difficulty}`;\n        const savedBestWpm = localStorage.getItem(storageKey);\n        \n        if (!savedBestWpm || wpm > parseInt(savedBestWpm, 10)) {\n          localStorage.setItem(storageKey, wpm.toString());\n        }\n      } catch (error) {\n        console.error(\"Error saving best score:\", error);\n      }\n    }\n  }, [gameOver, wpm, difficulty]);\n\n  // Add more text when user completes current text\n  const addMoreText = () => {\n    try {\n      // Create a new array from all texts for the current difficulty, excluding the current text\n      const nextTextPool = getAllTextsForDifficulty(difficulty).filter(\n        t => t.text !== currentText\n      );\n      \n      // Filter out texts that have significant overlap with the current text to avoid repetition\n      const nonRepeatingTexts = nextTextPool.filter(t => {\n        // Calculate text similarity - avoid texts that have similar content\n        const similarity = calculateTextSimilarity(t.text, currentText);\n        return similarity < 0.3; // Only include texts with less than 30% similarity\n      });\n      \n      // If we have non-repeating texts, choose one randomly\n      let nextText = '';\n      if (nonRepeatingTexts.length > 0) {\n        const randomIndex = Math.floor(Math.random() * nonRepeatingTexts.length);\n        nextText = nonRepeatingTexts[randomIndex].text;\n      } else if (nextTextPool.length > 0) {\n        // If all texts have some repetition but we have other texts, pick the least similar\n        nextTextPool.sort((a, b) => {\n          const similarityA = calculateTextSimilarity(a.text, currentText);\n          const similarityB = calculateTextSimilarity(b.text, currentText);\n          return similarityA - similarityB;\n        });\n        nextText = nextTextPool[0].text;\n      } else {\n        // As a fallback, generate a unique paragraph\n        nextText = generateUniqueParagraph();\n      }\n      \n      // Update the used texts set using Array.from to create a proper new Set\n      setUsedTexts(prevUsedTexts => new Set([...Array.from(prevUsedTexts), nextText]));\n      \n      // Concatenate the new text\n      setFullText(prev => prev + \" \" + nextText);\n      \n      // Update current text to include only what's left to type\n      setCurrentText(fullText.substring(inputText.length));\n      \n      console.log(\"Added new text:\", nextText.substring(0, 30) + \"...\");\n      return true;\n    } catch (error) {\n      console.error(\"Error adding more text:\", error);\n      return false;\n    }\n  };\n\n  // Add a function to calculate text similarity (simple implementation)\n  const calculateTextSimilarity = (text1: string, text2: string) => {\n    // Convert to lowercase and split into words\n    const words1 = text1.toLowerCase().split(/\\s+/);\n    const words2 = text2.toLowerCase().split(/\\s+/);\n    \n    // Count matching words\n    const set1 = new Set(words1);\n    const set2 = new Set(words2);\n    \n    // Convert sets to arrays for proper iteration\n    const commonWords = Array.from(set1).filter(word => set2.has(word)).length;\n    \n    // Calculate Jaccard similarity\n    const totalUniqueWords = new Set([...Array.from(set1), ...Array.from(set2)]).size;\n    return totalUniqueWords === 0 ? 0 : commonWords / totalUniqueWords;\n  };\n\n  // Add a function to generate a unique paragraph if needed\n  const generateUniqueParagraph = () => {\n    // This is a simple placeholder - in a real app, you might use an API\n    const topics = [\n      \"exploring new technologies\",\n      \"learning programming skills\",\n      \"improving typing speed\",\n      \"practicing focus and concentration\",\n      \"developing consistent habits\"\n    ];\n    const randomTopic = topics[Math.floor(Math.random() * topics.length)];\n    return `This is a newly generated paragraph about ${randomTopic}. It's designed to be unique and different from the previous text to ensure you get varied practice while improving your typing skills.`;\n  };\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        let mistakes = mistakesMade;\n        \n        for (let i = 0; i < inputText.length; i++) {\n          if (i < fullText.length) {\n            if (inputText[i] === fullText[i]) {\n              correct++;\n            } else {\n              incorrect++;\n              \n              // Track if this was a new mistake (character was correct before)\n              if (i <= lastCorrectIndexRef.current) {\n                mistakes++;\n              }\n            }\n          }\n        }\n        \n        // Update the last correct index\n        if (inputText.length > 0 && correct + incorrect === inputText.length) {\n          let lastCorrectIndex = 0;\n          for (let i = inputText.length - 1; i >= 0; i--) {\n            if (inputText[i] === fullText[i]) {\n              lastCorrectIndex = i;\n              break;\n            }\n          }\n          lastCorrectIndexRef.current = lastCorrectIndex;\n        }\n        \n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setMistakesMade(mistakes);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n        \n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round((correct / totalChars) * 100) : 100);\n        \n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n        \n        // Update car position based on progress through text\n        setCarPosition(calculateCarPosition());\n        \n        // Check if user has completed the current text\n        if (inputText.length >= fullText.length) {\n          // Add the words from this text to the total\n          const currentTextWordCount = fullText.trim().split(/\\s+/).length;\n          const newTotalWords = totalWordsTyped + currentTextWordCount;\n          setTotalWordsTyped(newTotalWords);\n          \n          // Check if we've reached the target word count\n          if (newTotalWords >= targetWordCount) {\n            setGameOver(true);\n          } else {\n            // Try to add more text\n            const textAdded = addMoreText();\n            \n            // If no more text could be added, end the game\n            if (!textAdded) {\n              setGameOver(true);\n            } else {\n              // Reset input to start typing the new text\n              setInputText('');\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, fullText, typingStarted, gameOver, calculateSpeed, calculateCarPosition, addMoreText, mistakesMade, totalWordsTyped, targetWordCount]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // New scoring formula with focus on WPM and accuracy\n      // Target: ~5000 for decent typing (60 WPM, 95% accuracy)\n      // Target: ~8000 for excellent typing (100 WPM, 100% accuracy)\n      \n      // Base score heavily influenced by WPM\n      const wpmFactor = wpm * 60;\n      \n      // Accuracy modifier: scales from 0.5 at 80% to 1.2 at 100%\n      // Heavily penalizes low accuracy, rewards perfect accuracy\n      const accuracyModifier = Math.max(0.5, (accuracy / 100) * 1.5 - 0.3);\n      \n      // Mistakes penalty\n      const mistakesPenalty = Math.max(0, 1 - (mistakesMade / 100) * 0.5);\n      \n      // Words typed provides a small bonus\n      const wordsBonus = Math.sqrt(totalWordsTyped) * 20;\n      \n      // Time bonus - more points for completing before time limit\n      const timeBonus = timeLeft > 0 ? Math.sqrt(timeLeft) * 10 : 0;\n      \n      // Combine factors\n      const rawScore = (wpmFactor + wordsBonus + timeBonus) * accuracyModifier * mistakesPenalty;\n      \n      // Difficulty modifier\n      const difficultyMultiplier = {\n        easy: 0.85,\n        medium: 1.0,\n        hard: 1.25\n      }[difficulty];\n      \n      // Calculate final score\n      const finalScore = Math.round(rawScore * difficultyMultiplier);\n      \n      // Cap at 10,000\n      return Math.min(finalScore, 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Format time display\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\n  };\n\n  // Handle input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n      \n      // Show a window of 500 characters, centered on the current typing position\n      const windowSize = 500;\n      const currentPos = inputText.length;\n      const startPos = Math.max(0, currentPos - windowSize / 2);\n      const endPos = Math.min(fullText.length, startPos + windowSize);\n      \n      for (let i = startPos; i < endPos; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && fullText[i] === inputText[i];\n        \n        if (isTyped) {\n          elements.push(\n            <HighlightedText \n              key={i} \n              isCorrect={isCorrect} \n              isCurrent={isCurrent}\n              data-index={i}\n            >\n              {fullText[i]}\n            </HighlightedText>\n          );\n        } else if (isCurrent) {\n          elements.push(\n            <HighlightedText \n              key={i} \n              isCorrect={true} \n              isCurrent={true}\n              data-index={i}\n            >\n              {fullText[i]}\n            </HighlightedText>\n          );\n        } else {\n          elements.push(\n            <UnusedText \n              key={i}\n              data-index={i}\n            >\n              {fullText[i]}\n            </UnusedText>\n          );\n        }\n      }\n      \n      return (\n        <TextContainer ref={textContainerRef}>\n          {elements}\n        </TextContainer>\n      );\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return <div>Error rendering text. Please restart the game.</div>;\n    }\n  };\n\n  const TimeDisplay = styled.div`\n    background: ${props => timeLeft < 10 ? '#e74c3c' : '#2ecc71'};\n    color: white;\n    border-radius: 50%;\n    width: 60px;\n    height: 60px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.1rem;\n    font-weight: bold;\n    margin: 0 auto 20px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease;\n    animation: ${props => timeLeft < 10 ? 'pulse 1s infinite' : 'none'};\n    \n    @keyframes pulse {\n      0%, 100% {\n        transform: scale(1);\n      }\n      50% {\n        transform: scale(1.05);\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n      }\n    }\n  `;\n\n  return (\n    <div>\n      {gameOver ? (\n        <Results\n          wpm={wpm}\n          accuracy={accuracy}\n          correctChars={correctChars}\n          incorrectChars={incorrectChars}\n          wordsTyped={totalWordsTyped}\n          score={calculateScore()}\n          difficulty={difficulty}\n          onPlayAgain={onEndGame}\n          previousBestWpm={previousBestWpm}\n          mistakesMade={mistakesMade}\n          timeLeft={timeLeft}\n          timeLimit={timeLimit}\n        />\n      ) : (\n        <GameContainer>\n          {error && <ErrorMessage>{error}</ErrorMessage>}\n          \n          <TimeDisplay>\n            {formatTime(timeLeft)}\n          </TimeDisplay>\n          \n          <RaceTrack \n            position={carPosition} \n            previousBestPosition={previousBestPosition}\n            progress={carPosition}\n            targetLength={targetWordCount}\n          />\n          \n          {renderText()}\n          \n          <InputArea\n            ref={inputRef}\n            value={inputText}\n            onChange={handleInputChange}\n            placeholder=\"Start typing here...\"\n            autoFocus\n          />\n          \n          <StatContainer>\n            <Stat>\n              <StatLabel>WPM</StatLabel>\n              <StatValue>{wpm}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Accuracy</StatLabel>\n              <StatValue>{accuracy}%</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Progress</StatLabel>\n              <StatValue>{Math.round(carPosition)}%</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Mistakes</StatLabel>\n              <StatValue>{mistakesMade}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Best WPM</StatLabel>\n              <StatValue>{previousBestWpm > 0 ? previousBestWpm : '-'}</StatValue>\n            </Stat>\n          </StatContainer>\n        </GameContainer>\n      )}\n    </div>\n  );\n};\n\nexport default TypingGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}