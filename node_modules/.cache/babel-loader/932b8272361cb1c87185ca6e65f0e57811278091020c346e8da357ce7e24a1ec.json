{"ast":null,"code":"var _jsxFileName = \"/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { easyTexts } from '../data/easyTexts';\nimport { mediumTexts } from '../data/mediumTexts';\nimport { hardTexts } from '../data/hardTexts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 30px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  margin-bottom: 30px;\n`;\n_c = GameContainer;\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 25px;\n  padding: 20px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n  border: 2px solid #eee;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);\n  position: relative;\n  \n  &::before {\n    content: '📝';\n    position: absolute;\n    top: -10px;\n    left: 20px;\n    background-color: white;\n    padding: 0 10px;\n    font-size: 16px;\n  }\n`;\n_c2 = TextContainer;\nconst HighlightedText = styled.span`\n  background-color: ${props => props.isCurrent ? 'rgba(255, 255, 153, 0.7)' : 'transparent'};\n  color: ${props => {\n  if (props.isCurrent) return '#333';\n  return props.isCorrect ? '#27ae60' : '#e74c3c';\n}};\n  text-decoration: ${props => !props.isCorrect && !props.isCurrent ? 'line-through' : 'none'};\n  transition: all 0.15s ease;\n  padding: 0 1px;\n  border-radius: 2px;\n  position: relative;\n  \n  ${props => props.isCurrent && `\n    box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n    animation: pulse 1.5s infinite;\n    \n    @keyframes pulse {\n      0%, 100% {\n        box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n      }\n      50% {\n        box-shadow: 0 0 0 4px rgba(255, 255, 153, 0.3);\n      }\n    }\n  `}\n`;\n_c3 = HighlightedText;\nconst UnusedText = styled.span`\n  color: #999;\n`;\n_c4 = UnusedText;\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 20px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  resize: none;\n  height: 120px;\n  margin-bottom: 25px;\n  transition: all 0.3s ease;\n  \n  &:focus {\n    outline: none;\n    border-color: #3498db;\n    box-shadow: 0 0 10px rgba(52, 152, 219, 0.3);\n  }\n`;\n_c5 = InputArea;\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  padding: 15px;\n  background: linear-gradient(to right, rgba(52, 152, 219, 0.05), rgba(52, 152, 219, 0.1));\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n_c6 = StatContainer;\nconst Stat = styled.div`\n  text-align: center;\n`;\n_c7 = Stat;\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n_c8 = StatLabel;\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n_c9 = StatValue;\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 1rem;\n  box-shadow: 0 2px 8px rgba(244, 67, 54, 0.2);\n  display: flex;\n  align-items: center;\n  \n  &::before {\n    content: '⚠️';\n    margin-right: 10px;\n    font-size: 1.3rem;\n  }\n`;\n\n// Define target word counts for each difficulty level\n_c10 = ErrorMessage;\nconst TARGET_WORD_COUNTS = {\n  easy: 100,\n  medium: 150,\n  hard: 200\n};\n\n// Select all text in the current difficulty level\nconst getAllTextsForDifficulty = difficulty => {\n  switch (difficulty) {\n    case 'easy':\n      return easyTexts.map(item => item.text);\n    case 'medium':\n      return mediumTexts.map(item => item.text);\n    case 'hard':\n      return hardTexts.map(item => item.text);\n    default:\n      return easyTexts.map(item => item.text);\n  }\n};\n\n// Count words in a text\nconst countWords = text => {\n  return text.trim().split(/\\s+/).length;\n};\nconst TypingGame = ({\n  text,\n  difficulty,\n  onEndGame\n}) => {\n  _s();\n  // Complete text pool for current difficulty\n  const [textPool, setTextPool] = useState([]);\n  // Current text being typed\n  const [currentText, setCurrentText] = useState(text);\n  // Full text the user needs to type (may include multiple text segments)\n  const [fullText, setFullText] = useState(text);\n  // Total words typed across all texts\n  const [totalWordsTyped, setTotalWordsTyped] = useState(0);\n  // Target word count for current difficulty\n  const [targetWordCount, setTargetWordCount] = useState(TARGET_WORD_COUNTS[difficulty]);\n  const [inputText, setInputText] = useState('');\n  const [startTime, setStartTime] = useState(null);\n  const [typingStarted, setTypingStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [correctChars, setCorrectChars] = useState(0);\n  const [incorrectChars, setIncorrectChars] = useState(0);\n  const [mistakesMade, setMistakesMade] = useState(0);\n  const [wordsTyped, setWordsTyped] = useState(0);\n  const [charsTyped, setCharsTyped] = useState(0);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(100);\n  const [carPosition, setCarPosition] = useState(0);\n  const [previousBestWpm, setPreviousBestWpm] = useState(0);\n  const [previousBestPosition, setPreviousBestPosition] = useState(0);\n  const [error, setError] = useState(null);\n  const inputRef = useRef(null);\n  const textContainerRef = useRef(null);\n  const lastCorrectIndexRef = useRef(0);\n\n  // Initialize text pool and target word count\n  useEffect(() => {\n    try {\n      const allTexts = getAllTextsForDifficulty(difficulty);\n      setTextPool(allTexts);\n      setTargetWordCount(TARGET_WORD_COUNTS[difficulty]);\n\n      // Start with the initial text\n      setCurrentText(text);\n      setFullText(text);\n    } catch (error) {\n      console.error(\"Error initializing text pool:\", error);\n      setError(\"Error loading text content. Please try again.\");\n    }\n  }, [text, difficulty]);\n\n  // This useEffect ensures car position is reset when component is mounted\n  useEffect(() => {\n    // Reset car position and previous best position on component mount\n    setCarPosition(0);\n    setPreviousBestPosition(0);\n\n    // Clean up any existing game state\n    setInputText('');\n    setTypingStarted(false);\n    setStartTime(null);\n    setWpm(0);\n    setGameOver(false);\n    setCorrectChars(0);\n    setIncorrectChars(0);\n    setWordsTyped(0);\n    setCharsTyped(0);\n    setAccuracy(100);\n    setMistakesMade(0);\n    setTotalWordsTyped(0);\n    lastCorrectIndexRef.current = 0;\n  }, []);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const totalWords = totalWordsTyped + inputText.trim().split(/\\s+/).length;\n      return timeElapsed > 0 ? Math.round(totalWords / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText, totalWordsTyped]);\n\n  // Calculate car position based on progress through the text\n  const calculateCarPosition = useCallback(() => {\n    try {\n      // If no input yet, ensure car is at start position\n      if (!typingStarted) {\n        return 0;\n      }\n\n      // Calculate words typed so far (completed texts + current progress)\n      const currentWordsTyped = totalWordsTyped + (inputText.trim().split(/\\s+/).length || 0);\n\n      // Calculate progress percentage based on total target words\n      const progressPercentage = currentWordsTyped / targetWordCount * 100;\n\n      // Ensure the position is between 0 and 100\n      return Math.min(Math.max(0, progressPercentage), 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, [typingStarted, inputText, totalWordsTyped, targetWordCount]);\n\n  // Load previous best scores from localStorage based on difficulty\n  useEffect(() => {\n    try {\n      const storageKey = `typingRacer_bestWpm_${difficulty}`;\n      const savedBestWpm = localStorage.getItem(storageKey);\n      if (savedBestWpm) {\n        const bestWpm = parseInt(savedBestWpm, 10);\n        setPreviousBestWpm(bestWpm);\n      }\n    } catch (error) {\n      console.error(\"Error loading previous best score:\", error);\n      // Continue without previous best data\n    }\n  }, [difficulty]);\n\n  // Save best score to localStorage when game ends\n  useEffect(() => {\n    if (gameOver && wpm > 0) {\n      try {\n        const storageKey = `typingRacer_bestWpm_${difficulty}`;\n        const savedBestWpm = localStorage.getItem(storageKey);\n        if (!savedBestWpm || wpm > parseInt(savedBestWpm, 10)) {\n          localStorage.setItem(storageKey, wpm.toString());\n        }\n      } catch (error) {\n        console.error(\"Error saving best score:\", error);\n      }\n    }\n  }, [gameOver, wpm, difficulty]);\n\n  // Add more text when user completes current text\n  const addMoreText = useCallback(() => {\n    try {\n      // Check if we've reached the target word count\n      if (totalWordsTyped >= targetWordCount) {\n        return false;\n      }\n\n      // Select a random text from the pool\n      if (textPool.length > 0) {\n        const randomIndex = Math.floor(Math.random() * textPool.length);\n        const nextText = textPool[randomIndex];\n\n        // Add a space between texts\n        const newFullText = fullText + \" \" + nextText;\n        setFullText(newFullText);\n\n        // Update current text to include only what's left to type\n        setCurrentText(newFullText.substring(inputText.length));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Error adding more text:\", error);\n      setError(\"Error loading additional text. You may continue with current text.\");\n      return false;\n    }\n  }, [fullText, inputText, textPool, totalWordsTyped, targetWordCount]);\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        let mistakes = mistakesMade;\n        for (let i = 0; i < inputText.length; i++) {\n          if (i < fullText.length) {\n            if (inputText[i] === fullText[i]) {\n              correct++;\n            } else {\n              incorrect++;\n\n              // Track if this was a new mistake (character was correct before)\n              if (i <= lastCorrectIndexRef.current) {\n                mistakes++;\n              }\n            }\n          }\n        }\n\n        // Update the last correct index\n        if (inputText.length > 0 && correct + incorrect === inputText.length) {\n          let lastCorrectIndex = 0;\n          for (let i = inputText.length - 1; i >= 0; i--) {\n            if (inputText[i] === fullText[i]) {\n              lastCorrectIndex = i;\n              break;\n            }\n          }\n          lastCorrectIndexRef.current = lastCorrectIndex;\n        }\n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setMistakesMade(mistakes);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n\n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round(correct / totalChars * 100) : 100);\n\n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n\n        // Update car position based on progress through text\n        setCarPosition(calculateCarPosition());\n\n        // Check if user has completed the current text\n        if (inputText.length >= fullText.length) {\n          // Add the words from this text to the total\n          const currentTextWordCount = fullText.trim().split(/\\s+/).length;\n          const newTotalWords = totalWordsTyped + currentTextWordCount;\n          setTotalWordsTyped(newTotalWords);\n\n          // Check if we've reached the target word count\n          if (newTotalWords >= targetWordCount) {\n            setGameOver(true);\n          } else {\n            // Try to add more text\n            const textAdded = addMoreText();\n\n            // If no more text could be added, end the game\n            if (!textAdded) {\n              setGameOver(true);\n            } else {\n              // Reset input to start typing the new text\n              setInputText('');\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, fullText, typingStarted, gameOver, calculateSpeed, calculateCarPosition, addMoreText, mistakesMade, totalWordsTyped, targetWordCount]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // New scoring formula with focus on WPM and accuracy\n      // Target: ~5000 for decent typing (60 WPM, 95% accuracy)\n      // Target: ~8000 for excellent typing (100 WPM, 100% accuracy)\n\n      // Base score heavily influenced by WPM\n      const wpmFactor = wpm * 60;\n\n      // Accuracy modifier: scales from 0.5 at 80% to 1.2 at 100%\n      // Heavily penalizes low accuracy, rewards perfect accuracy\n      const accuracyModifier = Math.max(0.5, accuracy / 100 * 1.5 - 0.3);\n\n      // Mistakes penalty\n      const mistakesPenalty = Math.max(0, 1 - mistakesMade / 100 * 0.5);\n\n      // Words typed provides a small bonus\n      const wordsBonus = Math.sqrt(totalWordsTyped) * 20;\n\n      // Combine factors\n      const rawScore = (wpmFactor + wordsBonus) * accuracyModifier * mistakesPenalty;\n\n      // Difficulty modifier\n      const difficultyMultiplier = {\n        easy: 0.85,\n        medium: 1.0,\n        hard: 1.25\n      }[difficulty];\n\n      // Calculate final score\n      const finalScore = Math.round(rawScore * difficultyMultiplier);\n\n      // Cap at 10,000\n      return Math.min(finalScore, 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = e => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n\n      // Show a window of 500 characters, centered on the current typing position\n      const windowSize = 500;\n      const currentPos = inputText.length;\n      const startPos = Math.max(0, currentPos - windowSize / 2);\n      const endPos = Math.min(fullText.length, startPos + windowSize);\n      for (let i = startPos; i < endPos; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && fullText[i] === inputText[i];\n        if (isTyped) {\n          elements.push(/*#__PURE__*/_jsxDEV(HighlightedText, {\n            isCorrect: isCorrect,\n            isCurrent: isCurrent,\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 13\n          }, this));\n        } else if (isCurrent) {\n          elements.push(/*#__PURE__*/_jsxDEV(HighlightedText, {\n            isCorrect: true,\n            isCurrent: true,\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 13\n          }, this));\n        } else {\n          elements.push(/*#__PURE__*/_jsxDEV(UnusedText, {\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this));\n        }\n      }\n      return /*#__PURE__*/_jsxDEV(TextContainer, {\n        ref: textContainerRef,\n        children: elements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }, this);\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error rendering text. Please restart the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameOver ? /*#__PURE__*/_jsxDEV(Results, {\n      wpm: wpm,\n      accuracy: accuracy,\n      correctChars: correctChars,\n      incorrectChars: incorrectChars,\n      wordsTyped: totalWordsTyped,\n      score: calculateScore(),\n      difficulty: difficulty,\n      onPlayAgain: onEndGame,\n      previousBestWpm: previousBestWpm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GameContainer, {\n      children: [error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RaceTrack, {\n        position: carPosition,\n        previousBestPosition: previousBestPosition,\n        progress: carPosition,\n        targetLength: targetWordCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 11\n      }, this), renderText(), /*#__PURE__*/_jsxDEV(InputArea, {\n        ref: inputRef,\n        value: inputText,\n        onChange: handleInputChange,\n        placeholder: \"Start typing here...\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StatContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"WPM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: wpm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Accuracy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: [accuracy, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: [Math.round(carPosition), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Mistakes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: mistakesMade\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Best WPM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: previousBestWpm > 0 ? previousBestWpm : '-'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 551,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingGame, \"piJfVRXepyr6VEsKtUqaCH5xpNw=\");\n_c11 = TypingGame;\nexport default TypingGame;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"GameContainer\");\n$RefreshReg$(_c2, \"TextContainer\");\n$RefreshReg$(_c3, \"HighlightedText\");\n$RefreshReg$(_c4, \"UnusedText\");\n$RefreshReg$(_c5, \"InputArea\");\n$RefreshReg$(_c6, \"StatContainer\");\n$RefreshReg$(_c7, \"Stat\");\n$RefreshReg$(_c8, \"StatLabel\");\n$RefreshReg$(_c9, \"StatValue\");\n$RefreshReg$(_c10, \"ErrorMessage\");\n$RefreshReg$(_c11, \"TypingGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","styled","RaceTrack","Results","easyTexts","mediumTexts","hardTexts","jsxDEV","_jsxDEV","GameContainer","div","_c","TextContainer","_c2","HighlightedText","span","props","isCurrent","isCorrect","_c3","UnusedText","_c4","InputArea","textarea","_c5","StatContainer","_c6","Stat","_c7","StatLabel","_c8","StatValue","_c9","ErrorMessage","_c10","TARGET_WORD_COUNTS","easy","medium","hard","getAllTextsForDifficulty","difficulty","map","item","text","countWords","trim","split","length","TypingGame","onEndGame","_s","textPool","setTextPool","currentText","setCurrentText","fullText","setFullText","totalWordsTyped","setTotalWordsTyped","targetWordCount","setTargetWordCount","inputText","setInputText","startTime","setStartTime","typingStarted","setTypingStarted","gameOver","setGameOver","correctChars","setCorrectChars","incorrectChars","setIncorrectChars","mistakesMade","setMistakesMade","wordsTyped","setWordsTyped","charsTyped","setCharsTyped","wpm","setWpm","accuracy","setAccuracy","carPosition","setCarPosition","previousBestWpm","setPreviousBestWpm","previousBestPosition","setPreviousBestPosition","error","setError","inputRef","textContainerRef","lastCorrectIndexRef","allTexts","console","current","calculateSpeed","timeElapsed","Date","now","totalWords","Math","round","calculateCarPosition","currentWordsTyped","progressPercentage","min","max","storageKey","savedBestWpm","localStorage","getItem","bestWpm","parseInt","setItem","toString","addMoreText","randomIndex","floor","random","nextText","newFullText","substring","correct","incorrect","mistakes","i","lastCorrectIndex","totalChars","currentWpm","currentTextWordCount","newTotalWords","textAdded","focus","calculateScore","wpmFactor","accuracyModifier","mistakesPenalty","wordsBonus","sqrt","rawScore","difficultyMultiplier","finalScore","handleInputChange","e","target","value","renderText","elements","windowSize","currentPos","startPos","endPos","isTyped","push","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","score","onPlayAgain","position","progress","targetLength","onChange","placeholder","autoFocus","_c11","$RefreshReg$"],"sources":["/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { Difficulty } from '../App';\nimport { easyTexts } from '../data/easyTexts';\nimport { mediumTexts } from '../data/mediumTexts';\nimport { hardTexts } from '../data/hardTexts';\nimport TimeDisplay from './TimeDisplay';\n\ninterface TypingGameProps {\n  text: string;\n  difficulty: Difficulty;\n  onEndGame: () => void;\n}\n\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 30px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  margin-bottom: 30px;\n`;\n\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 25px;\n  padding: 20px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n  border: 2px solid #eee;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);\n  position: relative;\n  \n  &::before {\n    content: '📝';\n    position: absolute;\n    top: -10px;\n    left: 20px;\n    background-color: white;\n    padding: 0 10px;\n    font-size: 16px;\n  }\n`;\n\nconst HighlightedText = styled.span<{ isCorrect: boolean; isCurrent: boolean }>`\n  background-color: ${props => props.isCurrent ? 'rgba(255, 255, 153, 0.7)' : 'transparent'};\n  color: ${props => {\n    if (props.isCurrent) return '#333';\n    return props.isCorrect ? '#27ae60' : '#e74c3c';\n  }};\n  text-decoration: ${props => (!props.isCorrect && !props.isCurrent) ? 'line-through' : 'none'};\n  transition: all 0.15s ease;\n  padding: 0 1px;\n  border-radius: 2px;\n  position: relative;\n  \n  ${props => props.isCurrent && `\n    box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n    animation: pulse 1.5s infinite;\n    \n    @keyframes pulse {\n      0%, 100% {\n        box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n      }\n      50% {\n        box-shadow: 0 0 0 4px rgba(255, 255, 153, 0.3);\n      }\n    }\n  `}\n`;\n\nconst UnusedText = styled.span`\n  color: #999;\n`;\n\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 20px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  resize: none;\n  height: 120px;\n  margin-bottom: 25px;\n  transition: all 0.3s ease;\n  \n  &:focus {\n    outline: none;\n    border-color: #3498db;\n    box-shadow: 0 0 10px rgba(52, 152, 219, 0.3);\n  }\n`;\n\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  padding: 15px;\n  background: linear-gradient(to right, rgba(52, 152, 219, 0.05), rgba(52, 152, 219, 0.1));\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n\nconst Stat = styled.div`\n  text-align: center;\n`;\n\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 1rem;\n  box-shadow: 0 2px 8px rgba(244, 67, 54, 0.2);\n  display: flex;\n  align-items: center;\n  \n  &::before {\n    content: '⚠️';\n    margin-right: 10px;\n    font-size: 1.3rem;\n  }\n`;\n\n// Define target word counts for each difficulty level\nconst TARGET_WORD_COUNTS = {\n  easy: 100,\n  medium: 150,\n  hard: 200\n};\n\n// Select all text in the current difficulty level\nconst getAllTextsForDifficulty = (difficulty: Difficulty): string[] => {\n  switch (difficulty) {\n    case 'easy':\n      return easyTexts.map(item => item.text);\n    case 'medium':\n      return mediumTexts.map(item => item.text);\n    case 'hard':\n      return hardTexts.map(item => item.text);\n    default:\n      return easyTexts.map(item => item.text);\n  }\n};\n\n// Count words in a text\nconst countWords = (text: string): number => {\n  return text.trim().split(/\\s+/).length;\n};\n\nconst TypingGame: React.FC<TypingGameProps> = ({\n  text,\n  difficulty,\n  onEndGame\n}) => {\n  // Complete text pool for current difficulty\n  const [textPool, setTextPool] = useState<string[]>([]);\n  // Current text being typed\n  const [currentText, setCurrentText] = useState<string>(text);\n  // Full text the user needs to type (may include multiple text segments)\n  const [fullText, setFullText] = useState<string>(text);\n  // Total words typed across all texts\n  const [totalWordsTyped, setTotalWordsTyped] = useState<number>(0);\n  // Target word count for current difficulty\n  const [targetWordCount, setTargetWordCount] = useState<number>(TARGET_WORD_COUNTS[difficulty]);\n  \n  const [inputText, setInputText] = useState<string>('');\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [typingStarted, setTypingStarted] = useState<boolean>(false);\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [correctChars, setCorrectChars] = useState<number>(0);\n  const [incorrectChars, setIncorrectChars] = useState<number>(0);\n  const [mistakesMade, setMistakesMade] = useState<number>(0);\n  const [wordsTyped, setWordsTyped] = useState<number>(0);\n  const [charsTyped, setCharsTyped] = useState<number>(0);\n  const [wpm, setWpm] = useState<number>(0);\n  const [accuracy, setAccuracy] = useState<number>(100);\n  const [carPosition, setCarPosition] = useState<number>(0);\n  const [previousBestWpm, setPreviousBestWpm] = useState<number>(0);\n  const [previousBestPosition, setPreviousBestPosition] = useState<number>(0);\n  const [error, setError] = useState<string | null>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const textContainerRef = useRef<HTMLDivElement>(null);\n  const lastCorrectIndexRef = useRef<number>(0);\n  \n  // Initialize text pool and target word count\n  useEffect(() => {\n    try {\n      const allTexts = getAllTextsForDifficulty(difficulty);\n      setTextPool(allTexts);\n      setTargetWordCount(TARGET_WORD_COUNTS[difficulty]);\n      \n      // Start with the initial text\n      setCurrentText(text);\n      setFullText(text);\n    } catch (error) {\n      console.error(\"Error initializing text pool:\", error);\n      setError(\"Error loading text content. Please try again.\");\n    }\n  }, [text, difficulty]);\n  \n  // This useEffect ensures car position is reset when component is mounted\n  useEffect(() => {\n    // Reset car position and previous best position on component mount\n    setCarPosition(0);\n    setPreviousBestPosition(0);\n    \n    // Clean up any existing game state\n    setInputText('');\n    setTypingStarted(false);\n    setStartTime(null);\n    setWpm(0);\n    setGameOver(false);\n    setCorrectChars(0);\n    setIncorrectChars(0);\n    setWordsTyped(0);\n    setCharsTyped(0);\n    setAccuracy(100);\n    setMistakesMade(0);\n    setTotalWordsTyped(0);\n    lastCorrectIndexRef.current = 0;\n  }, []);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      \n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const totalWords = totalWordsTyped + inputText.trim().split(/\\s+/).length;\n      \n      return timeElapsed > 0 ? Math.round(totalWords / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText, totalWordsTyped]);\n\n  // Calculate car position based on progress through the text\n  const calculateCarPosition = useCallback(() => {\n    try {\n      // If no input yet, ensure car is at start position\n      if (!typingStarted) {\n        return 0;\n      }\n      \n      // Calculate words typed so far (completed texts + current progress)\n      const currentWordsTyped = totalWordsTyped + (inputText.trim().split(/\\s+/).length || 0);\n      \n      // Calculate progress percentage based on total target words\n      const progressPercentage = (currentWordsTyped / targetWordCount) * 100;\n      \n      // Ensure the position is between 0 and 100\n      return Math.min(Math.max(0, progressPercentage), 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, [typingStarted, inputText, totalWordsTyped, targetWordCount]);\n\n  // Load previous best scores from localStorage based on difficulty\n  useEffect(() => {\n    try {\n      const storageKey = `typingRacer_bestWpm_${difficulty}`;\n      const savedBestWpm = localStorage.getItem(storageKey);\n      \n      if (savedBestWpm) {\n        const bestWpm = parseInt(savedBestWpm, 10);\n        setPreviousBestWpm(bestWpm);\n      }\n    } catch (error) {\n      console.error(\"Error loading previous best score:\", error);\n      // Continue without previous best data\n    }\n  }, [difficulty]);\n\n  // Save best score to localStorage when game ends\n  useEffect(() => {\n    if (gameOver && wpm > 0) {\n      try {\n        const storageKey = `typingRacer_bestWpm_${difficulty}`;\n        const savedBestWpm = localStorage.getItem(storageKey);\n        \n        if (!savedBestWpm || wpm > parseInt(savedBestWpm, 10)) {\n          localStorage.setItem(storageKey, wpm.toString());\n        }\n      } catch (error) {\n        console.error(\"Error saving best score:\", error);\n      }\n    }\n  }, [gameOver, wpm, difficulty]);\n\n  // Add more text when user completes current text\n  const addMoreText = useCallback(() => {\n    try {\n      // Check if we've reached the target word count\n      if (totalWordsTyped >= targetWordCount) {\n        return false;\n      }\n      \n      // Select a random text from the pool\n      if (textPool.length > 0) {\n        const randomIndex = Math.floor(Math.random() * textPool.length);\n        const nextText = textPool[randomIndex];\n        \n        // Add a space between texts\n        const newFullText = fullText + \" \" + nextText;\n        setFullText(newFullText);\n        \n        // Update current text to include only what's left to type\n        setCurrentText(newFullText.substring(inputText.length));\n        \n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error(\"Error adding more text:\", error);\n      setError(\"Error loading additional text. You may continue with current text.\");\n      return false;\n    }\n  }, [fullText, inputText, textPool, totalWordsTyped, targetWordCount]);\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        let mistakes = mistakesMade;\n        \n        for (let i = 0; i < inputText.length; i++) {\n          if (i < fullText.length) {\n            if (inputText[i] === fullText[i]) {\n              correct++;\n            } else {\n              incorrect++;\n              \n              // Track if this was a new mistake (character was correct before)\n              if (i <= lastCorrectIndexRef.current) {\n                mistakes++;\n              }\n            }\n          }\n        }\n        \n        // Update the last correct index\n        if (inputText.length > 0 && correct + incorrect === inputText.length) {\n          let lastCorrectIndex = 0;\n          for (let i = inputText.length - 1; i >= 0; i--) {\n            if (inputText[i] === fullText[i]) {\n              lastCorrectIndex = i;\n              break;\n            }\n          }\n          lastCorrectIndexRef.current = lastCorrectIndex;\n        }\n        \n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setMistakesMade(mistakes);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n        \n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round((correct / totalChars) * 100) : 100);\n        \n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n        \n        // Update car position based on progress through text\n        setCarPosition(calculateCarPosition());\n        \n        // Check if user has completed the current text\n        if (inputText.length >= fullText.length) {\n          // Add the words from this text to the total\n          const currentTextWordCount = fullText.trim().split(/\\s+/).length;\n          const newTotalWords = totalWordsTyped + currentTextWordCount;\n          setTotalWordsTyped(newTotalWords);\n          \n          // Check if we've reached the target word count\n          if (newTotalWords >= targetWordCount) {\n            setGameOver(true);\n          } else {\n            // Try to add more text\n            const textAdded = addMoreText();\n            \n            // If no more text could be added, end the game\n            if (!textAdded) {\n              setGameOver(true);\n            } else {\n              // Reset input to start typing the new text\n              setInputText('');\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, fullText, typingStarted, gameOver, calculateSpeed, calculateCarPosition, addMoreText, mistakesMade, totalWordsTyped, targetWordCount]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // New scoring formula with focus on WPM and accuracy\n      // Target: ~5000 for decent typing (60 WPM, 95% accuracy)\n      // Target: ~8000 for excellent typing (100 WPM, 100% accuracy)\n      \n      // Base score heavily influenced by WPM\n      const wpmFactor = wpm * 60;\n      \n      // Accuracy modifier: scales from 0.5 at 80% to 1.2 at 100%\n      // Heavily penalizes low accuracy, rewards perfect accuracy\n      const accuracyModifier = Math.max(0.5, (accuracy / 100) * 1.5 - 0.3);\n      \n      // Mistakes penalty\n      const mistakesPenalty = Math.max(0, 1 - (mistakesMade / 100) * 0.5);\n      \n      // Words typed provides a small bonus\n      const wordsBonus = Math.sqrt(totalWordsTyped) * 20;\n      \n      // Combine factors\n      const rawScore = (wpmFactor + wordsBonus) * accuracyModifier * mistakesPenalty;\n      \n      // Difficulty modifier\n      const difficultyMultiplier = {\n        easy: 0.85,\n        medium: 1.0,\n        hard: 1.25\n      }[difficulty];\n      \n      // Calculate final score\n      const finalScore = Math.round(rawScore * difficultyMultiplier);\n      \n      // Cap at 10,000\n      return Math.min(finalScore, 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n      \n      // Show a window of 500 characters, centered on the current typing position\n      const windowSize = 500;\n      const currentPos = inputText.length;\n      const startPos = Math.max(0, currentPos - windowSize / 2);\n      const endPos = Math.min(fullText.length, startPos + windowSize);\n      \n      for (let i = startPos; i < endPos; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && fullText[i] === inputText[i];\n        \n        if (isTyped) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={isCorrect} isCurrent={isCurrent}>\n              {fullText[i]}\n            </HighlightedText>\n          );\n        } else if (isCurrent) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={true} isCurrent={true}>\n              {fullText[i]}\n            </HighlightedText>\n          );\n        } else {\n          elements.push(\n            <UnusedText key={i}>\n              {fullText[i]}\n            </UnusedText>\n          );\n        }\n      }\n      \n      return (\n        <TextContainer ref={textContainerRef}>\n          {elements}\n        </TextContainer>\n      );\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return <div>Error rendering text. Please restart the game.</div>;\n    }\n  };\n\n  return (\n    <div>\n      {gameOver ? (\n        <Results\n          wpm={wpm}\n          accuracy={accuracy}\n          correctChars={correctChars}\n          incorrectChars={incorrectChars}\n          wordsTyped={totalWordsTyped}\n          score={calculateScore()}\n          difficulty={difficulty}\n          onPlayAgain={onEndGame}\n          previousBestWpm={previousBestWpm}\n        />\n      ) : (\n        <GameContainer>\n          {error && <ErrorMessage>{error}</ErrorMessage>}\n          \n          <RaceTrack \n            position={carPosition} \n            previousBestPosition={previousBestPosition}\n            progress={carPosition}\n            targetLength={targetWordCount}\n          />\n          \n          {renderText()}\n          \n          <InputArea\n            ref={inputRef}\n            value={inputText}\n            onChange={handleInputChange}\n            placeholder=\"Start typing here...\"\n            autoFocus\n          />\n          \n          <StatContainer>\n            <Stat>\n              <StatLabel>WPM</StatLabel>\n              <StatValue>{wpm}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Accuracy</StatLabel>\n              <StatValue>{accuracy}%</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Progress</StatLabel>\n              <StatValue>{Math.round(carPosition)}%</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Mistakes</StatLabel>\n              <StatValue>{mistakesMade}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Best WPM</StatLabel>\n              <StatValue>{previousBestWpm > 0 ? previousBestWpm : '-'}</StatValue>\n            </Stat>\n          </StatContainer>\n        </GameContainer>\n      )}\n    </div>\n  );\n};\n\nexport default TypingGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}