{"ast":null,"code":"import React,{useState,Component}from'react';import styled from'styled-components';import GameSettings from'./components/GameSettings';import TypingGame from'./components/TypingGame';import Header from'./components/Header';import{easyTexts}from'./data/easyTexts';import{mediumTexts}from'./data/mediumTexts';import{hardTexts}from'./data/hardTexts';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AppContainer=styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: 'Arial', sans-serif;\n`;const ErrorContainer=styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 20px;\n  border-radius: 5px;\n  margin-bottom: 20px;\n`;const ErrorHeading=styled.h3`\n  margin-top: 0;\n  margin-bottom: 10px;\n`;const ErrorDetails=styled.details`\n  margin-top: 10px;\n  cursor: pointer;\n`;const ErrorSummary=styled.summary`\n  font-weight: bold;\n`;// Error Boundary to catch and display errors\nclass ErrorBoundary extends Component{constructor(props){super(props);this.state={hasError:false,error:null,errorInfo:null};}static getDerivedStateFromError(error){// Update state so the next render shows the fallback UI\nreturn{hasError:true};}componentDidCatch(error,errorInfo){// Log the error to console\nconsole.error('Error in Typing Racer app:',error,errorInfo);this.setState({error:error,errorInfo:errorInfo});}render(){if(this.state.hasError){// Render fallback UI\nreturn/*#__PURE__*/_jsxs(ErrorContainer,{children:[/*#__PURE__*/_jsx(ErrorHeading,{children:\"Something went wrong\"}),/*#__PURE__*/_jsx(\"p\",{children:\"We're sorry, but there was an error loading the application. Please try refreshing the page.\"}),/*#__PURE__*/_jsxs(ErrorDetails,{children:[/*#__PURE__*/_jsx(ErrorSummary,{children:\"Technical Details (for developers)\"}),/*#__PURE__*/_jsx(\"p\",{children:this.state.error&&this.state.error.toString()}),/*#__PURE__*/_jsx(\"pre\",{children:this.state.errorInfo&&this.state.errorInfo.componentStack})]})]});}return this.props.children;}}const App=()=>{const[gameStarted,setGameStarted]=useState(false);const[difficulty,setDifficulty]=useState('easy');const[timeSetting,setTimeSetting]=useState(60);const[textIndex,setTextIndex]=useState(0);const getTexts=()=>{try{switch(difficulty){case'easy':return easyTexts;case'medium':return mediumTexts;case'hard':return hardTexts;default:return easyTexts;}}catch(error){console.error(\"Error loading text data:\",error);return easyTexts;// Fallback to easy texts\n}};const handleStartGame=()=>{try{// Randomly select a text for the chosen difficulty\nconst texts=getTexts();const randomIndex=Math.floor(Math.random()*texts.length);setTextIndex(randomIndex);setGameStarted(true);}catch(error){console.error(\"Error starting game:\",error);alert(\"There was an error starting the game. Please try again.\");}};const handleEndGame=()=>{setGameStarted(false);};return/*#__PURE__*/_jsx(ErrorBoundary,{children:/*#__PURE__*/_jsxs(AppContainer,{children:[/*#__PURE__*/_jsx(Header,{}),!gameStarted?/*#__PURE__*/_jsx(GameSettings,{difficulty:difficulty,setDifficulty:setDifficulty,timeSetting:timeSetting,setTimeSetting:setTimeSetting,onStartGame:handleStartGame}):/*#__PURE__*/_jsx(TypingGame,{text:getTexts()[textIndex].text,timeSetting:timeSetting,difficulty:difficulty,onEndGame:handleEndGame})]})});};export default App;","map":{"version":3,"names":["React","useState","Component","styled","GameSettings","TypingGame","Header","easyTexts","mediumTexts","hardTexts","jsx","_jsx","jsxs","_jsxs","AppContainer","div","ErrorContainer","ErrorHeading","h3","ErrorDetails","details","ErrorSummary","summary","ErrorBoundary","constructor","props","state","hasError","error","errorInfo","getDerivedStateFromError","componentDidCatch","console","setState","render","children","toString","componentStack","App","gameStarted","setGameStarted","difficulty","setDifficulty","timeSetting","setTimeSetting","textIndex","setTextIndex","getTexts","handleStartGame","texts","randomIndex","Math","floor","random","length","alert","handleEndGame","onStartGame","text","onEndGame"],"sources":["/Users/ericwang/Theseus/typing-racer/src/App.tsx"],"sourcesContent":["import React, { useState, Component, ErrorInfo, ReactNode } from 'react';\nimport styled from 'styled-components';\nimport GameSettings from './components/GameSettings';\nimport TypingGame from './components/TypingGame';\nimport Header from './components/Header';\nimport { easyTexts } from './data/easyTexts';\nimport { mediumTexts } from './data/mediumTexts';\nimport { hardTexts } from './data/hardTexts';\n\nexport type Difficulty = 'easy' | 'medium' | 'hard';\nexport type TimeSetting = 30 | 60 | 120;\n\nconst AppContainer = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: 'Arial', sans-serif;\n`;\n\nconst ErrorContainer = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 20px;\n  border-radius: 5px;\n  margin-bottom: 20px;\n`;\n\nconst ErrorHeading = styled.h3`\n  margin-top: 0;\n  margin-bottom: 10px;\n`;\n\nconst ErrorDetails = styled.details`\n  margin-top: 10px;\n  cursor: pointer;\n`;\n\nconst ErrorSummary = styled.summary`\n  font-weight: bold;\n`;\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n}\n\n// Error Boundary to catch and display errors\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null\n    };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    // Update state so the next render shows the fallback UI\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Log the error to console\n    console.error('Error in Typing Racer app:', error, errorInfo);\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // Render fallback UI\n      return (\n        <ErrorContainer>\n          <ErrorHeading>Something went wrong</ErrorHeading>\n          <p>We're sorry, but there was an error loading the application. Please try refreshing the page.</p>\n          <ErrorDetails>\n            <ErrorSummary>Technical Details (for developers)</ErrorSummary>\n            <p>{this.state.error && this.state.error.toString()}</p>\n            <pre>{this.state.errorInfo && this.state.errorInfo.componentStack}</pre>\n          </ErrorDetails>\n        </ErrorContainer>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst App: React.FC = () => {\n  const [gameStarted, setGameStarted] = useState<boolean>(false);\n  const [difficulty, setDifficulty] = useState<Difficulty>('easy');\n  const [timeSetting, setTimeSetting] = useState<TimeSetting>(60);\n  const [textIndex, setTextIndex] = useState<number>(0);\n\n  const getTexts = () => {\n    try {\n      switch (difficulty) {\n        case 'easy':\n          return easyTexts;\n        case 'medium':\n          return mediumTexts;\n        case 'hard':\n          return hardTexts;\n        default:\n          return easyTexts;\n      }\n    } catch (error) {\n      console.error(\"Error loading text data:\", error);\n      return easyTexts; // Fallback to easy texts\n    }\n  };\n\n  const handleStartGame = () => {\n    try {\n      // Randomly select a text for the chosen difficulty\n      const texts = getTexts();\n      const randomIndex = Math.floor(Math.random() * texts.length);\n      setTextIndex(randomIndex);\n      setGameStarted(true);\n    } catch (error) {\n      console.error(\"Error starting game:\", error);\n      alert(\"There was an error starting the game. Please try again.\");\n    }\n  };\n\n  const handleEndGame = () => {\n    setGameStarted(false);\n  };\n\n  return (\n    <ErrorBoundary>\n      <AppContainer>\n        <Header />\n        {!gameStarted ? (\n          <GameSettings\n            difficulty={difficulty}\n            setDifficulty={setDifficulty}\n            timeSetting={timeSetting}\n            setTimeSetting={setTimeSetting}\n            onStartGame={handleStartGame}\n          />\n        ) : (\n          <TypingGame\n            text={getTexts()[textIndex].text}\n            timeSetting={timeSetting}\n            difficulty={difficulty}\n            onEndGame={handleEndGame}\n          />\n        )}\n      </AppContainer>\n    </ErrorBoundary>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}