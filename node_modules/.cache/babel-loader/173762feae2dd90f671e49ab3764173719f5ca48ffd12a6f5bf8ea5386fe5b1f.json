{"ast":null,"code":"var _jsxFileName = \"/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { easyTexts } from '../data/easyTexts';\nimport { mediumTexts } from '../data/mediumTexts';\nimport { hardTexts } from '../data/hardTexts';\nimport TimeDisplay from './TimeDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 30px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  margin-bottom: 30px;\n`;\n_c = GameContainer;\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 25px;\n  padding: 20px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n  border: 2px solid #eee;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);\n  position: relative;\n  \n  &::before {\n    content: '📝';\n    position: absolute;\n    top: -10px;\n    left: 20px;\n    background-color: white;\n    padding: 0 10px;\n    font-size: 16px;\n  }\n`;\nconst HighlightedText = styled.span`\n  background-color: ${props => props.isCurrent ? 'rgba(255, 255, 153, 0.7)' : 'transparent'};\n  color: ${props => {\n  if (props.isCurrent) return '#333';\n  return props.isCorrect ? '#27ae60' : '#e74c3c';\n}};\n  text-decoration: ${props => !props.isCorrect && !props.isCurrent ? 'line-through' : 'none'};\n  transition: all 0.15s ease;\n  padding: 0 1px;\n  border-radius: 2px;\n  position: relative;\n  \n  ${props => props.isCurrent && `\n    box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n    animation: pulse 1.5s infinite;\n    \n    @keyframes pulse {\n      0%, 100% {\n        box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n      }\n      50% {\n        box-shadow: 0 0 0 4px rgba(255, 255, 153, 0.3);\n      }\n    }\n  `}\n`;\n_c2 = HighlightedText;\nconst UnusedText = styled.span`\n  color: #999;\n`;\n_c3 = UnusedText;\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 20px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  resize: none;\n  height: 120px;\n  margin-bottom: 25px;\n  transition: all 0.3s ease;\n  \n  &:focus {\n    outline: none;\n    border-color: #3498db;\n    box-shadow: 0 0 10px rgba(52, 152, 219, 0.3);\n  }\n`;\n_c4 = InputArea;\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  padding: 15px;\n  background: linear-gradient(to right, rgba(52, 152, 219, 0.05), rgba(52, 152, 219, 0.1));\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n_c5 = StatContainer;\nconst Stat = styled.div`\n  text-align: center;\n`;\n_c6 = Stat;\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n_c7 = StatLabel;\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n_c8 = StatValue;\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 15px;\n  font-size: 0.9rem;\n`;\n\n// Select all text in the current difficulty level\n_c9 = ErrorMessage;\nconst getAllTextsForDifficulty = difficulty => {\n  let allTexts = '';\n  switch (difficulty) {\n    case 'easy':\n      easyTexts.forEach(item => {\n        allTexts += item.text + ' ';\n      });\n      break;\n    case 'medium':\n      mediumTexts.forEach(item => {\n        allTexts += item.text + ' ';\n      });\n      break;\n    case 'hard':\n      hardTexts.forEach(item => {\n        allTexts += item.text + ' ';\n      });\n      break;\n    default:\n      easyTexts.forEach(item => {\n        allTexts += item.text + ' ';\n      });\n  }\n  return allTexts.trim();\n};\nconst TypingGame = ({\n  text,\n  timeSetting,\n  difficulty,\n  onEndGame\n}) => {\n  _s();\n  // Combine the provided text with more text from the same difficulty\n  const [fullText, setFullText] = useState(text);\n  const [inputText, setInputText] = useState('');\n  const [startTime, setStartTime] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(timeSetting);\n  const [typingStarted, setTypingStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [correctChars, setCorrectChars] = useState(0);\n  const [incorrectChars, setIncorrectChars] = useState(0);\n  const [wordsTyped, setWordsTyped] = useState(0);\n  const [charsTyped, setCharsTyped] = useState(0);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(100);\n  const [carPosition, setCarPosition] = useState(0);\n  const [error, setError] = useState(null);\n  const inputRef = useRef(null);\n  const textContainerRef = useRef(null);\n\n  // Initialize with more text if needed\n  useEffect(() => {\n    // Use the provided text as a starting point, but expand with more text from the same difficulty\n    const allTextsFromDifficulty = getAllTextsForDifficulty(difficulty);\n    setFullText(text + ' ' + allTextsFromDifficulty);\n  }, [text, difficulty]);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const wordsTyped = inputText.trim().split(/\\s+/).length;\n      return timeElapsed > 0 ? Math.round(wordsTyped / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText]);\n\n  // Calculate car position based on typing speed using non-linear formula\n  const calculateCarPosition = useCallback(currentWpm => {\n    try {\n      // Non-linear formula: position = (wpm^1.3) / 20\n      // This makes faster typing disproportionately increase car speed\n      // But less extreme than before (1.5 power)\n      const position = Math.pow(currentWpm, 1.3) / 20;\n\n      // Normalize to percentage (0-100)\n      // Assuming 150 WPM is the max reference point\n      const maxPosition = Math.pow(150, 1.3) / 20;\n      return Math.min(position / maxPosition * 100, 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, []);\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        for (let i = 0; i < inputText.length; i++) {\n          if (i < fullText.length) {\n            if (inputText[i] === fullText[i]) {\n              correct++;\n            } else {\n              incorrect++;\n            }\n          }\n        }\n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n\n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round(correct / totalChars * 100) : 100);\n\n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n\n        // Update car position\n        setCarPosition(calculateCarPosition(currentWpm));\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, fullText, typingStarted, gameOver, calculateSpeed, calculateCarPosition]);\n\n  // Timer countdown\n  useEffect(() => {\n    try {\n      if (typingStarted && timeLeft > 0 && !gameOver) {\n        const timer = setTimeout(() => {\n          setTimeLeft(prev => prev - 1);\n        }, 1000);\n        return () => clearTimeout(timer);\n      } else if (timeLeft === 0 && !gameOver) {\n        setGameOver(true);\n      }\n    } catch (error) {\n      console.error(\"Error in timer countdown:\", error);\n      setError(\"Error with the game timer. Please restart the game.\");\n    }\n  }, [typingStarted, timeLeft, gameOver]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // Score formula: (correctChars * wordsTyped * accuracy) / (divisor)\n      // This makes the score depend on correct characters, words typed, and accuracy\n      const rawScore = correctChars * wordsTyped * (accuracy / 100);\n\n      // Adjust the divisor based on difficulty and time\n      // These values are tuned to make 10000 require exceptional performance\n      const baseDivisors = {\n        easy: 25,\n        medium: 15,\n        hard: 10\n      };\n\n      // Adjust for time setting\n      const timeMultiplier = timeSetting / 60;\n      const divisor = baseDivisors[difficulty] * timeMultiplier;\n\n      // Normalize score to max 10000\n      return Math.min(Math.round(rawScore / divisor), 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = e => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n\n      // Show a window of 500 characters, centered on the current typing position\n      const windowSize = 500;\n      const currentPos = inputText.length;\n      const startPos = Math.max(0, currentPos - windowSize / 2);\n      const endPos = Math.min(fullText.length, startPos + windowSize);\n      for (let i = startPos; i < endPos; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && fullText[i] === inputText[i];\n        if (isTyped) {\n          elements.push(/*#__PURE__*/_jsxDEV(HighlightedText, {\n            isCorrect: isCorrect,\n            isCurrent: isCurrent,\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this));\n        } else if (isCurrent) {\n          elements.push(/*#__PURE__*/_jsxDEV(HighlightedText, {\n            isCorrect: true,\n            isCurrent: true,\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this));\n        } else {\n          elements.push(/*#__PURE__*/_jsxDEV(UnusedText, {\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this));\n        }\n      }\n      return elements;\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error rendering text. Please restart the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameOver ? /*#__PURE__*/_jsxDEV(Results, {\n      wpm: wpm,\n      accuracy: accuracy,\n      correctChars: correctChars,\n      incorrectChars: incorrectChars,\n      wordsTyped: wordsTyped,\n      score: calculateScore(),\n      difficulty: difficulty,\n      timeSetting: timeSetting,\n      onPlayAgain: onEndGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GameContainer, {\n      children: [error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TimeDisplay, {\n        timeLeft: timeLeft,\n        children: [timeLeft, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RaceTrack, {\n        position: carPosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }, this), renderText(), /*#__PURE__*/_jsxDEV(InputArea, {\n        ref: inputRef,\n        value: inputText,\n        onChange: handleInputChange,\n        placeholder: \"Start typing here...\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StatContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"WPM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: wpm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Accuracy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: [accuracy, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Words\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: wordsTyped\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: charsTyped\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingGame, \"ML1xM6ZjA7WFqH3uCbsgBFd5FkI=\");\n_c10 = TypingGame;\nexport default TypingGame;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"GameContainer\");\n$RefreshReg$(_c2, \"HighlightedText\");\n$RefreshReg$(_c3, \"UnusedText\");\n$RefreshReg$(_c4, \"InputArea\");\n$RefreshReg$(_c5, \"StatContainer\");\n$RefreshReg$(_c6, \"Stat\");\n$RefreshReg$(_c7, \"StatLabel\");\n$RefreshReg$(_c8, \"StatValue\");\n$RefreshReg$(_c9, \"ErrorMessage\");\n$RefreshReg$(_c10, \"TypingGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","styled","RaceTrack","Results","easyTexts","mediumTexts","hardTexts","TimeDisplay","jsxDEV","_jsxDEV","GameContainer","div","_c","TextContainer","HighlightedText","span","props","isCurrent","isCorrect","_c2","UnusedText","_c3","InputArea","textarea","_c4","StatContainer","_c5","Stat","_c6","StatLabel","_c7","StatValue","_c8","ErrorMessage","_c9","getAllTextsForDifficulty","difficulty","allTexts","forEach","item","text","trim","TypingGame","timeSetting","onEndGame","_s","fullText","setFullText","inputText","setInputText","startTime","setStartTime","timeLeft","setTimeLeft","typingStarted","setTypingStarted","gameOver","setGameOver","correctChars","setCorrectChars","incorrectChars","setIncorrectChars","wordsTyped","setWordsTyped","charsTyped","setCharsTyped","wpm","setWpm","accuracy","setAccuracy","carPosition","setCarPosition","error","setError","inputRef","textContainerRef","allTextsFromDifficulty","calculateSpeed","timeElapsed","Date","now","split","length","Math","round","console","calculateCarPosition","currentWpm","position","pow","maxPosition","min","correct","incorrect","i","totalChars","timer","setTimeout","prev","clearTimeout","current","focus","calculateScore","rawScore","baseDivisors","easy","medium","hard","timeMultiplier","divisor","handleInputChange","e","target","value","renderText","elements","windowSize","currentPos","startPos","max","endPos","isTyped","push","children","fileName","_jsxFileName","lineNumber","columnNumber","score","onPlayAgain","ref","onChange","placeholder","autoFocus","_c10","$RefreshReg$"],"sources":["/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { Difficulty, TimeSetting } from '../App';\nimport { easyTexts } from '../data/easyTexts';\nimport { mediumTexts } from '../data/mediumTexts';\nimport { hardTexts } from '../data/hardTexts';\nimport TimeDisplay from './TimeDisplay';\n\ninterface TypingGameProps {\n  text: string;\n  timeSetting: TimeSetting;\n  difficulty: Difficulty;\n  onEndGame: () => void;\n}\n\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 30px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  margin-bottom: 30px;\n`;\n\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 25px;\n  padding: 20px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n  border: 2px solid #eee;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);\n  position: relative;\n  \n  &::before {\n    content: '📝';\n    position: absolute;\n    top: -10px;\n    left: 20px;\n    background-color: white;\n    padding: 0 10px;\n    font-size: 16px;\n  }\n`;\n\nconst HighlightedText = styled.span<{ isCorrect: boolean; isCurrent: boolean }>`\n  background-color: ${props => props.isCurrent ? 'rgba(255, 255, 153, 0.7)' : 'transparent'};\n  color: ${props => {\n    if (props.isCurrent) return '#333';\n    return props.isCorrect ? '#27ae60' : '#e74c3c';\n  }};\n  text-decoration: ${props => (!props.isCorrect && !props.isCurrent) ? 'line-through' : 'none'};\n  transition: all 0.15s ease;\n  padding: 0 1px;\n  border-radius: 2px;\n  position: relative;\n  \n  ${props => props.isCurrent && `\n    box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n    animation: pulse 1.5s infinite;\n    \n    @keyframes pulse {\n      0%, 100% {\n        box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n      }\n      50% {\n        box-shadow: 0 0 0 4px rgba(255, 255, 153, 0.3);\n      }\n    }\n  `}\n`;\n\nconst UnusedText = styled.span`\n  color: #999;\n`;\n\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 20px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  resize: none;\n  height: 120px;\n  margin-bottom: 25px;\n  transition: all 0.3s ease;\n  \n  &:focus {\n    outline: none;\n    border-color: #3498db;\n    box-shadow: 0 0 10px rgba(52, 152, 219, 0.3);\n  }\n`;\n\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  padding: 15px;\n  background: linear-gradient(to right, rgba(52, 152, 219, 0.05), rgba(52, 152, 219, 0.1));\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n\nconst Stat = styled.div`\n  text-align: center;\n`;\n\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 15px;\n  font-size: 0.9rem;\n`;\n\n// Select all text in the current difficulty level\nconst getAllTextsForDifficulty = (difficulty: Difficulty): string => {\n  let allTexts = '';\n  switch (difficulty) {\n    case 'easy':\n      easyTexts.forEach(item => { allTexts += item.text + ' '; });\n      break;\n    case 'medium':\n      mediumTexts.forEach(item => { allTexts += item.text + ' '; });\n      break;\n    case 'hard':\n      hardTexts.forEach(item => { allTexts += item.text + ' '; });\n      break;\n    default:\n      easyTexts.forEach(item => { allTexts += item.text + ' '; });\n  }\n  return allTexts.trim();\n};\n\nconst TypingGame: React.FC<TypingGameProps> = ({\n  text,\n  timeSetting,\n  difficulty,\n  onEndGame\n}) => {\n  // Combine the provided text with more text from the same difficulty\n  const [fullText, setFullText] = useState<string>(text);\n  const [inputText, setInputText] = useState<string>('');\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [timeLeft, setTimeLeft] = useState<number>(timeSetting);\n  const [typingStarted, setTypingStarted] = useState<boolean>(false);\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [correctChars, setCorrectChars] = useState<number>(0);\n  const [incorrectChars, setIncorrectChars] = useState<number>(0);\n  const [wordsTyped, setWordsTyped] = useState<number>(0);\n  const [charsTyped, setCharsTyped] = useState<number>(0);\n  const [wpm, setWpm] = useState<number>(0);\n  const [accuracy, setAccuracy] = useState<number>(100);\n  const [carPosition, setCarPosition] = useState<number>(0);\n  const [error, setError] = useState<string | null>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const textContainerRef = useRef<HTMLDivElement>(null);\n\n  // Initialize with more text if needed\n  useEffect(() => {\n    // Use the provided text as a starting point, but expand with more text from the same difficulty\n    const allTextsFromDifficulty = getAllTextsForDifficulty(difficulty);\n    setFullText(text + ' ' + allTextsFromDifficulty);\n  }, [text, difficulty]);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      \n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const wordsTyped = inputText.trim().split(/\\s+/).length;\n      \n      return timeElapsed > 0 ? Math.round(wordsTyped / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText]);\n\n  // Calculate car position based on typing speed using non-linear formula\n  const calculateCarPosition = useCallback((currentWpm: number) => {\n    try {\n      // Non-linear formula: position = (wpm^1.3) / 20\n      // This makes faster typing disproportionately increase car speed\n      // But less extreme than before (1.5 power)\n      const position = Math.pow(currentWpm, 1.3) / 20;\n      \n      // Normalize to percentage (0-100)\n      // Assuming 150 WPM is the max reference point\n      const maxPosition = Math.pow(150, 1.3) / 20; \n      return Math.min((position / maxPosition) * 100, 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, []);\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        \n        for (let i = 0; i < inputText.length; i++) {\n          if (i < fullText.length) {\n            if (inputText[i] === fullText[i]) {\n              correct++;\n            } else {\n              incorrect++;\n            }\n          }\n        }\n        \n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n        \n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round((correct / totalChars) * 100) : 100);\n        \n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n        \n        // Update car position\n        setCarPosition(calculateCarPosition(currentWpm));\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, fullText, typingStarted, gameOver, calculateSpeed, calculateCarPosition]);\n\n  // Timer countdown\n  useEffect(() => {\n    try {\n      if (typingStarted && timeLeft > 0 && !gameOver) {\n        const timer = setTimeout(() => {\n          setTimeLeft(prev => prev - 1);\n        }, 1000);\n        \n        return () => clearTimeout(timer);\n      } else if (timeLeft === 0 && !gameOver) {\n        setGameOver(true);\n      }\n    } catch (error) {\n      console.error(\"Error in timer countdown:\", error);\n      setError(\"Error with the game timer. Please restart the game.\");\n    }\n  }, [typingStarted, timeLeft, gameOver]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // Score formula: (correctChars * wordsTyped * accuracy) / (divisor)\n      // This makes the score depend on correct characters, words typed, and accuracy\n      const rawScore = correctChars * wordsTyped * (accuracy / 100);\n      \n      // Adjust the divisor based on difficulty and time\n      // These values are tuned to make 10000 require exceptional performance\n      const baseDivisors = {\n        easy: 25,\n        medium: 15,\n        hard: 10\n      };\n      \n      // Adjust for time setting\n      const timeMultiplier = timeSetting / 60;\n      const divisor = baseDivisors[difficulty] * timeMultiplier;\n      \n      // Normalize score to max 10000\n      return Math.min(Math.round(rawScore / divisor), 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n      \n      // Show a window of 500 characters, centered on the current typing position\n      const windowSize = 500;\n      const currentPos = inputText.length;\n      const startPos = Math.max(0, currentPos - windowSize / 2);\n      const endPos = Math.min(fullText.length, startPos + windowSize);\n      \n      for (let i = startPos; i < endPos; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && fullText[i] === inputText[i];\n        \n        if (isTyped) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={isCorrect} isCurrent={isCurrent}>\n              {fullText[i]}\n            </HighlightedText>\n          );\n        } else if (isCurrent) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={true} isCurrent={true}>\n              {fullText[i]}\n            </HighlightedText>\n          );\n        } else {\n          elements.push(\n            <UnusedText key={i}>\n              {fullText[i]}\n            </UnusedText>\n          );\n        }\n      }\n      \n      return elements;\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return <div>Error rendering text. Please restart the game.</div>;\n    }\n  };\n\n  return (\n    <div>\n      {gameOver ? (\n        <Results\n          wpm={wpm}\n          accuracy={accuracy}\n          correctChars={correctChars}\n          incorrectChars={incorrectChars}\n          wordsTyped={wordsTyped}\n          score={calculateScore()}\n          difficulty={difficulty}\n          timeSetting={timeSetting}\n          onPlayAgain={onEndGame}\n        />\n      ) : (\n        <GameContainer>\n          {error && <ErrorMessage>{error}</ErrorMessage>}\n          \n          <TimeDisplay timeLeft={timeLeft}>\n            {timeLeft}s\n          </TimeDisplay>\n          \n          <RaceTrack position={carPosition} />\n          \n          {renderText()}\n          \n          <InputArea\n            ref={inputRef}\n            value={inputText}\n            onChange={handleInputChange}\n            placeholder=\"Start typing here...\"\n            autoFocus\n          />\n          \n          <StatContainer>\n            <Stat>\n              <StatLabel>WPM</StatLabel>\n              <StatValue>{wpm}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Accuracy</StatLabel>\n              <StatValue>{accuracy}%</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Words</StatLabel>\n              <StatValue>{wordsTyped}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Characters</StatLabel>\n              <StatValue>{charsTyped}</StatValue>\n            </Stat>\n          </StatContainer>\n        </GameContainer>\n      )}\n    </div>\n  );\n};\n\nexport default TypingGame; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,OAAO,MAAM,WAAW;AAE/B,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASxC,MAAMC,aAAa,GAAGT,MAAM,CAACU,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GANIF,aAAa;AAQnB,MAAMG,aAAa,GAAGZ,MAAM,CAACU,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMG,eAAe,GAAGb,MAAM,CAACc,IAAgD;AAC/E,sBAAsBC,KAAK,IAAIA,KAAK,CAACC,SAAS,GAAG,0BAA0B,GAAG,aAAa;AAC3F,WAAWD,KAAK,IAAI;EAChB,IAAIA,KAAK,CAACC,SAAS,EAAE,OAAO,MAAM;EAClC,OAAOD,KAAK,CAACE,SAAS,GAAG,SAAS,GAAG,SAAS;AAChD,CAAC;AACH,qBAAqBF,KAAK,IAAK,CAACA,KAAK,CAACE,SAAS,IAAI,CAACF,KAAK,CAACC,SAAS,GAAI,cAAc,GAAG,MAAM;AAC9F;AACA;AACA;AACA;AACA;AACA,IAAID,KAAK,IAAIA,KAAK,CAACC,SAAS,IAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AAACE,GAAA,GAzBIL,eAAe;AA2BrB,MAAMM,UAAU,GAAGnB,MAAM,CAACc,IAAI;AAC9B;AACA,CAAC;AAACM,GAAA,GAFID,UAAU;AAIhB,MAAME,SAAS,GAAGrB,MAAM,CAACsB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAjBIF,SAAS;AAmBf,MAAMG,aAAa,GAAGxB,MAAM,CAACU,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACe,GAAA,GAXID,aAAa;AAanB,MAAME,IAAI,GAAG1B,MAAM,CAACU,GAAG;AACvB;AACA,CAAC;AAACiB,GAAA,GAFID,IAAI;AAIV,MAAME,SAAS,GAAG5B,MAAM,CAACU,GAAG;AAC5B;AACA;AACA;AACA,CAAC;AAACmB,GAAA,GAJID,SAAS;AAMf,MAAME,SAAS,GAAG9B,MAAM,CAACU,GAAG;AAC5B;AACA;AACA;AACA,CAAC;AAACqB,GAAA,GAJID,SAAS;AAMf,MAAME,YAAY,GAAGhC,MAAM,CAACU,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAuB,GAAA,GAVMD,YAAY;AAWlB,MAAME,wBAAwB,GAAIC,UAAsB,IAAa;EACnE,IAAIC,QAAQ,GAAG,EAAE;EACjB,QAAQD,UAAU;IAChB,KAAK,MAAM;MACThC,SAAS,CAACkC,OAAO,CAACC,IAAI,IAAI;QAAEF,QAAQ,IAAIE,IAAI,CAACC,IAAI,GAAG,GAAG;MAAE,CAAC,CAAC;MAC3D;IACF,KAAK,QAAQ;MACXnC,WAAW,CAACiC,OAAO,CAACC,IAAI,IAAI;QAAEF,QAAQ,IAAIE,IAAI,CAACC,IAAI,GAAG,GAAG;MAAE,CAAC,CAAC;MAC7D;IACF,KAAK,MAAM;MACTlC,SAAS,CAACgC,OAAO,CAACC,IAAI,IAAI;QAAEF,QAAQ,IAAIE,IAAI,CAACC,IAAI,GAAG,GAAG;MAAE,CAAC,CAAC;MAC3D;IACF;MACEpC,SAAS,CAACkC,OAAO,CAACC,IAAI,IAAI;QAAEF,QAAQ,IAAIE,IAAI,CAACC,IAAI,GAAG,GAAG;MAAE,CAAC,CAAC;EAC/D;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,MAAMC,UAAqC,GAAGA,CAAC;EAC7CF,IAAI;EACJG,WAAW;EACXP,UAAU;EACVQ;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlD,QAAQ,CAAS2C,IAAI,CAAC;EACtD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGpD,QAAQ,CAAS,EAAE,CAAC;EACtD,MAAM,CAACqD,SAAS,EAAEC,YAAY,CAAC,GAAGtD,QAAQ,CAAgB,IAAI,CAAC;EAC/D,MAAM,CAACuD,QAAQ,EAAEC,WAAW,CAAC,GAAGxD,QAAQ,CAAS8C,WAAW,CAAC;EAC7D,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAG1D,QAAQ,CAAU,KAAK,CAAC;EAClE,MAAM,CAAC2D,QAAQ,EAAEC,WAAW,CAAC,GAAG5D,QAAQ,CAAU,KAAK,CAAC;EACxD,MAAM,CAAC6D,YAAY,EAAEC,eAAe,CAAC,GAAG9D,QAAQ,CAAS,CAAC,CAAC;EAC3D,MAAM,CAAC+D,cAAc,EAAEC,iBAAiB,CAAC,GAAGhE,QAAQ,CAAS,CAAC,CAAC;EAC/D,MAAM,CAACiE,UAAU,EAAEC,aAAa,CAAC,GAAGlE,QAAQ,CAAS,CAAC,CAAC;EACvD,MAAM,CAACmE,UAAU,EAAEC,aAAa,CAAC,GAAGpE,QAAQ,CAAS,CAAC,CAAC;EACvD,MAAM,CAACqE,GAAG,EAAEC,MAAM,CAAC,GAAGtE,QAAQ,CAAS,CAAC,CAAC;EACzC,MAAM,CAACuE,QAAQ,EAAEC,WAAW,CAAC,GAAGxE,QAAQ,CAAS,GAAG,CAAC;EACrD,MAAM,CAACyE,WAAW,EAAEC,cAAc,CAAC,GAAG1E,QAAQ,CAAS,CAAC,CAAC;EACzD,MAAM,CAAC2E,KAAK,EAAEC,QAAQ,CAAC,GAAG5E,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM6E,QAAQ,GAAG3E,MAAM,CAAsB,IAAI,CAAC;EAClD,MAAM4E,gBAAgB,GAAG5E,MAAM,CAAiB,IAAI,CAAC;;EAErD;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAM8E,sBAAsB,GAAGzC,wBAAwB,CAACC,UAAU,CAAC;IACnEW,WAAW,CAACP,IAAI,GAAG,GAAG,GAAGoC,sBAAsB,CAAC;EAClD,CAAC,EAAE,CAACpC,IAAI,EAAEJ,UAAU,CAAC,CAAC;;EAEtB;EACA,MAAMyC,cAAc,GAAG7E,WAAW,CAAC,MAAM;IACvC,IAAI;MACF,IAAI,CAACkD,SAAS,EAAE,OAAO,CAAC;MAExB,MAAM4B,WAAW,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG9B,SAAS,IAAI,IAAI,GAAG,EAAE,CAAC,CAAC;MAC1D,MAAMY,UAAU,GAAGd,SAAS,CAACP,IAAI,CAAC,CAAC,CAACwC,KAAK,CAAC,KAAK,CAAC,CAACC,MAAM;MAEvD,OAAOJ,WAAW,GAAG,CAAC,GAAGK,IAAI,CAACC,KAAK,CAACtB,UAAU,GAAGgB,WAAW,CAAC,GAAG,CAAC;IACnE,CAAC,CAAC,OAAON,KAAK,EAAE;MACda,OAAO,CAACb,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDC,QAAQ,CAAC,mDAAmD,CAAC;MAC7D,OAAO,CAAC;IACV;EACF,CAAC,EAAE,CAACvB,SAAS,EAAEF,SAAS,CAAC,CAAC;;EAE1B;EACA,MAAMsC,oBAAoB,GAAGtF,WAAW,CAAEuF,UAAkB,IAAK;IAC/D,IAAI;MACF;MACA;MACA;MACA,MAAMC,QAAQ,GAAGL,IAAI,CAACM,GAAG,CAACF,UAAU,EAAE,GAAG,CAAC,GAAG,EAAE;;MAE/C;MACA;MACA,MAAMG,WAAW,GAAGP,IAAI,CAACM,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE;MAC3C,OAAON,IAAI,CAACQ,GAAG,CAAEH,QAAQ,GAAGE,WAAW,GAAI,GAAG,EAAE,GAAG,CAAC;IACtD,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACda,OAAO,CAACb,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,CAAC,CAAC,CAAC;IACZ;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA1E,SAAS,CAAC,MAAM;IACd,IAAI;MACF,IAAI,CAACwD,aAAa,IAAIN,SAAS,CAACkC,MAAM,GAAG,CAAC,EAAE;QAC1C3B,gBAAgB,CAAC,IAAI,CAAC;QACtBJ,YAAY,CAAC4B,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MAC1B;MAEA,IAAI1B,aAAa,IAAI,CAACE,QAAQ,EAAE;QAC9B;QACA,IAAIoC,OAAO,GAAG,CAAC;QACf,IAAIC,SAAS,GAAG,CAAC;QAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9C,SAAS,CAACkC,MAAM,EAAEY,CAAC,EAAE,EAAE;UACzC,IAAIA,CAAC,GAAGhD,QAAQ,CAACoC,MAAM,EAAE;YACvB,IAAIlC,SAAS,CAAC8C,CAAC,CAAC,KAAKhD,QAAQ,CAACgD,CAAC,CAAC,EAAE;cAChCF,OAAO,EAAE;YACX,CAAC,MAAM;cACLC,SAAS,EAAE;YACb;UACF;QACF;QAEAlC,eAAe,CAACiC,OAAO,CAAC;QACxB/B,iBAAiB,CAACgC,SAAS,CAAC;QAC5B5B,aAAa,CAACjB,SAAS,CAACkC,MAAM,CAAC;QAC/BnB,aAAa,CAACf,SAAS,CAACP,IAAI,CAAC,CAAC,CAACwC,KAAK,CAAC,KAAK,CAAC,CAACC,MAAM,CAAC;;QAEnD;QACA,MAAMa,UAAU,GAAGH,OAAO,GAAGC,SAAS;QACtCxB,WAAW,CAAC0B,UAAU,GAAG,CAAC,GAAGZ,IAAI,CAACC,KAAK,CAAEQ,OAAO,GAAGG,UAAU,GAAI,GAAG,CAAC,GAAG,GAAG,CAAC;;QAE5E;QACA,MAAMR,UAAU,GAAGV,cAAc,CAAC,CAAC;QACnCV,MAAM,CAACoB,UAAU,CAAC;;QAElB;QACAhB,cAAc,CAACe,oBAAoB,CAACC,UAAU,CAAC,CAAC;MAClD;IACF,CAAC,CAAC,OAAOf,KAAK,EAAE;MACda,OAAO,CAACb,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDC,QAAQ,CAAC,+EAA+E,CAAC;IAC3F;EACF,CAAC,EAAE,CAACzB,SAAS,EAAEF,QAAQ,EAAEQ,aAAa,EAAEE,QAAQ,EAAEqB,cAAc,EAAES,oBAAoB,CAAC,CAAC;;EAExF;EACAxF,SAAS,CAAC,MAAM;IACd,IAAI;MACF,IAAIwD,aAAa,IAAIF,QAAQ,GAAG,CAAC,IAAI,CAACI,QAAQ,EAAE;QAC9C,MAAMwC,KAAK,GAAGC,UAAU,CAAC,MAAM;UAC7B5C,WAAW,CAAC6C,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;QAC/B,CAAC,EAAE,IAAI,CAAC;QAER,OAAO,MAAMC,YAAY,CAACH,KAAK,CAAC;MAClC,CAAC,MAAM,IAAI5C,QAAQ,KAAK,CAAC,IAAI,CAACI,QAAQ,EAAE;QACtCC,WAAW,CAAC,IAAI,CAAC;MACnB;IACF,CAAC,CAAC,OAAOe,KAAK,EAAE;MACda,OAAO,CAACb,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDC,QAAQ,CAAC,qDAAqD,CAAC;IACjE;EACF,CAAC,EAAE,CAACnB,aAAa,EAAEF,QAAQ,EAAEI,QAAQ,CAAC,CAAC;;EAEvC;EACA1D,SAAS,CAAC,MAAM;IACd,IAAI;MACF,IAAI4E,QAAQ,CAAC0B,OAAO,EAAE;QACpB1B,QAAQ,CAAC0B,OAAO,CAACC,KAAK,CAAC,CAAC;MAC1B;IACF,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACda,OAAO,CAACb,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM8B,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI;MACF;MACA;MACA,MAAMC,QAAQ,GAAG7C,YAAY,GAAGI,UAAU,IAAIM,QAAQ,GAAG,GAAG,CAAC;;MAE7D;MACA;MACA,MAAMoC,YAAY,GAAG;QACnBC,IAAI,EAAE,EAAE;QACRC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE;MACR,CAAC;;MAED;MACA,MAAMC,cAAc,GAAGjE,WAAW,GAAG,EAAE;MACvC,MAAMkE,OAAO,GAAGL,YAAY,CAACpE,UAAU,CAAC,GAAGwE,cAAc;;MAEzD;MACA,OAAOzB,IAAI,CAACQ,GAAG,CAACR,IAAI,CAACC,KAAK,CAACmB,QAAQ,GAAGM,OAAO,CAAC,EAAE,KAAK,CAAC;IACxD,CAAC,CAAC,OAAOrC,KAAK,EAAE;MACda,OAAO,CAACb,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,CAAC,CAAC,CAAC;IACZ;EACF,CAAC;;EAED;EACA,MAAMsC,iBAAiB,GAAIC,CAAyC,IAAK;IACvE,IAAI;MACF,IAAI,CAACvD,QAAQ,EAAE;QACbP,YAAY,CAAC8D,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOzC,KAAK,EAAE;MACda,OAAO,CAACb,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDC,QAAQ,CAAC,iDAAiD,CAAC;IAC7D;EACF,CAAC;;EAED;EACA,MAAMyC,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,EAAE;;MAEnB;MACA,MAAMC,UAAU,GAAG,GAAG;MACtB,MAAMC,UAAU,GAAGrE,SAAS,CAACkC,MAAM;MACnC,MAAMoC,QAAQ,GAAGnC,IAAI,CAACoC,GAAG,CAAC,CAAC,EAAEF,UAAU,GAAGD,UAAU,GAAG,CAAC,CAAC;MACzD,MAAMI,MAAM,GAAGrC,IAAI,CAACQ,GAAG,CAAC7C,QAAQ,CAACoC,MAAM,EAAEoC,QAAQ,GAAGF,UAAU,CAAC;MAE/D,KAAK,IAAItB,CAAC,GAAGwB,QAAQ,EAAExB,CAAC,GAAG0B,MAAM,EAAE1B,CAAC,EAAE,EAAE;QACtC,MAAM7E,SAAS,GAAG6E,CAAC,KAAK9C,SAAS,CAACkC,MAAM;QACxC,MAAMuC,OAAO,GAAG3B,CAAC,GAAG9C,SAAS,CAACkC,MAAM;QACpC,MAAMhE,SAAS,GAAGuG,OAAO,IAAI3E,QAAQ,CAACgD,CAAC,CAAC,KAAK9C,SAAS,CAAC8C,CAAC,CAAC;QAEzD,IAAI2B,OAAO,EAAE;UACXN,QAAQ,CAACO,IAAI,cACXjH,OAAA,CAACK,eAAe;YAASI,SAAS,EAAEA,SAAU;YAACD,SAAS,EAAEA,SAAU;YAAA0G,QAAA,EACjE7E,QAAQ,CAACgD,CAAC;UAAC,GADQA,CAAC;YAAA8B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEN,CACnB,CAAC;QACH,CAAC,MAAM,IAAI9G,SAAS,EAAE;UACpBkG,QAAQ,CAACO,IAAI,cACXjH,OAAA,CAACK,eAAe;YAASI,SAAS,EAAE,IAAK;YAACD,SAAS,EAAE,IAAK;YAAA0G,QAAA,EACvD7E,QAAQ,CAACgD,CAAC;UAAC,GADQA,CAAC;YAAA8B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEN,CACnB,CAAC;QACH,CAAC,MAAM;UACLZ,QAAQ,CAACO,IAAI,cACXjH,OAAA,CAACW,UAAU;YAAAuG,QAAA,EACR7E,QAAQ,CAACgD,CAAC;UAAC,GADGA,CAAC;YAAA8B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEN,CACd,CAAC;QACH;MACF;MAEA,OAAOZ,QAAQ;IACjB,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACda,OAAO,CAACb,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,oBAAO/D,OAAA;QAAAkH,QAAA,EAAK;MAA8C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAClE;EACF,CAAC;EAED,oBACEtH,OAAA;IAAAkH,QAAA,EACGnE,QAAQ,gBACP/C,OAAA,CAACN,OAAO;MACN+D,GAAG,EAAEA,GAAI;MACTE,QAAQ,EAAEA,QAAS;MACnBV,YAAY,EAAEA,YAAa;MAC3BE,cAAc,EAAEA,cAAe;MAC/BE,UAAU,EAAEA,UAAW;MACvBkE,KAAK,EAAE1B,cAAc,CAAC,CAAE;MACxBlE,UAAU,EAAEA,UAAW;MACvBO,WAAW,EAAEA,WAAY;MACzBsF,WAAW,EAAErF;IAAU;MAAAgF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,gBAEFtH,OAAA,CAACC,aAAa;MAAAiH,QAAA,GACXnD,KAAK,iBAAI/D,OAAA,CAACwB,YAAY;QAAA0F,QAAA,EAAEnD;MAAK;QAAAoD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CAAC,eAE9CtH,OAAA,CAACF,WAAW;QAAC6C,QAAQ,EAAEA,QAAS;QAAAuE,QAAA,GAC7BvE,QAAQ,EAAC,GACZ;MAAA;QAAAwE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eAEdtH,OAAA,CAACP,SAAS;QAACsF,QAAQ,EAAElB;MAAY;QAAAsD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAEnCb,UAAU,CAAC,CAAC,eAEbzG,OAAA,CAACa,SAAS;QACR4G,GAAG,EAAExD,QAAS;QACduC,KAAK,EAAEjE,SAAU;QACjBmF,QAAQ,EAAErB,iBAAkB;QAC5BsB,WAAW,EAAC,sBAAsB;QAClCC,SAAS;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eAEFtH,OAAA,CAACgB,aAAa;QAAAkG,QAAA,gBACZlH,OAAA,CAACkB,IAAI;UAAAgG,QAAA,gBACHlH,OAAA,CAACoB,SAAS;YAAA8F,QAAA,EAAC;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eAC1BtH,OAAA,CAACsB,SAAS;YAAA4F,QAAA,EAAEzD;UAAG;YAAA0D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC,eACPtH,OAAA,CAACkB,IAAI;UAAAgG,QAAA,gBACHlH,OAAA,CAACoB,SAAS;YAAA8F,QAAA,EAAC;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eAC/BtH,OAAA,CAACsB,SAAS;YAAA4F,QAAA,GAAEvD,QAAQ,EAAC,GAAC;UAAA;YAAAwD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC,eACPtH,OAAA,CAACkB,IAAI;UAAAgG,QAAA,gBACHlH,OAAA,CAACoB,SAAS;YAAA8F,QAAA,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eAC5BtH,OAAA,CAACsB,SAAS;YAAA4F,QAAA,EAAE7D;UAAU;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC,eACPtH,OAAA,CAACkB,IAAI;UAAAgG,QAAA,gBACHlH,OAAA,CAACoB,SAAS;YAAA8F,QAAA,EAAC;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eACjCtH,OAAA,CAACsB,SAAS;YAAA4F,QAAA,EAAE3D;UAAU;YAAA4D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAChB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClF,EAAA,CAtRIH,UAAqC;AAAA4F,IAAA,GAArC5F,UAAqC;AAwR3C,eAAeA,UAAU;AAAC,IAAA9B,EAAA,EAAAO,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAoG,IAAA;AAAAC,YAAA,CAAA3H,EAAA;AAAA2H,YAAA,CAAApH,GAAA;AAAAoH,YAAA,CAAAlH,GAAA;AAAAkH,YAAA,CAAA/G,GAAA;AAAA+G,YAAA,CAAA7G,GAAA;AAAA6G,YAAA,CAAA3G,GAAA;AAAA2G,YAAA,CAAAzG,GAAA;AAAAyG,YAAA,CAAAvG,GAAA;AAAAuG,YAAA,CAAArG,GAAA;AAAAqG,YAAA,CAAAD,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}