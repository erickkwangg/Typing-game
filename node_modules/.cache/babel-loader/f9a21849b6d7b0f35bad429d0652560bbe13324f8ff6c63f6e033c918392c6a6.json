{"ast":null,"code":"var _jsxFileName = \"/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { easyTexts } from '../data/easyTexts';\nimport { mediumTexts } from '../data/mediumTexts';\nimport { hardTexts } from '../data/hardTexts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 30px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  margin-bottom: 30px;\n`;\n_c = GameContainer;\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 25px;\n  padding: 20px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n  border: 2px solid #eee;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);\n  position: relative;\n  \n  &::before {\n    content: '📝';\n    position: absolute;\n    top: -10px;\n    left: 20px;\n    background-color: white;\n    padding: 0 10px;\n    font-size: 16px;\n  }\n`;\nconst HighlightedText = styled.span`\n  background-color: ${props => props.isCurrent ? 'rgba(255, 255, 153, 0.7)' : 'transparent'};\n  color: ${props => {\n  if (props.isCurrent) return '#333';\n  return props.isCorrect ? '#27ae60' : '#e74c3c';\n}};\n  text-decoration: ${props => !props.isCorrect && !props.isCurrent ? 'line-through' : 'none'};\n  transition: all 0.15s ease;\n  padding: 0 1px;\n  border-radius: 2px;\n  position: relative;\n  \n  ${props => props.isCurrent && `\n    box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n    animation: pulse 1.5s infinite;\n    \n    @keyframes pulse {\n      0%, 100% {\n        box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n      }\n      50% {\n        box-shadow: 0 0 0 4px rgba(255, 255, 153, 0.3);\n      }\n    }\n  `}\n`;\n_c2 = HighlightedText;\nconst UnusedText = styled.span`\n  color: #999;\n`;\n_c3 = UnusedText;\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 20px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  resize: none;\n  height: 120px;\n  margin-bottom: 25px;\n  transition: all 0.3s ease;\n  \n  &:focus {\n    outline: none;\n    border-color: #3498db;\n    box-shadow: 0 0 10px rgba(52, 152, 219, 0.3);\n  }\n`;\n_c4 = InputArea;\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  padding: 15px;\n  background: linear-gradient(to right, rgba(52, 152, 219, 0.05), rgba(52, 152, 219, 0.1));\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n_c5 = StatContainer;\nconst Stat = styled.div`\n  text-align: center;\n`;\n_c6 = Stat;\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n_c7 = StatLabel;\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n_c8 = StatValue;\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 1rem;\n  box-shadow: 0 2px 8px rgba(244, 67, 54, 0.2);\n  display: flex;\n  align-items: center;\n  \n  &::before {\n    content: '⚠️';\n    margin-right: 10px;\n    font-size: 1.3rem;\n  }\n`;\n\n// Select all text in the current difficulty level\n_c9 = ErrorMessage;\nconst getAllTextsForDifficulty = difficulty => {\n  let allTexts = '';\n  switch (difficulty) {\n    case 'easy':\n      easyTexts.forEach(item => {\n        allTexts += item.text + ' ';\n      });\n      break;\n    case 'medium':\n      mediumTexts.forEach(item => {\n        allTexts += item.text + ' ';\n      });\n      break;\n    case 'hard':\n      hardTexts.forEach(item => {\n        allTexts += item.text + ' ';\n      });\n      break;\n    default:\n      easyTexts.forEach(item => {\n        allTexts += item.text + ' ';\n      });\n  }\n  return allTexts.trim();\n};\nconst TypingGame = ({\n  text,\n  difficulty,\n  onEndGame\n}) => {\n  _s();\n  // Combine the provided text with more text from the same difficulty\n  const [fullText, setFullText] = useState(text);\n  const [inputText, setInputText] = useState('');\n  const [startTime, setStartTime] = useState(null);\n  const [typingStarted, setTypingStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [correctChars, setCorrectChars] = useState(0);\n  const [incorrectChars, setIncorrectChars] = useState(0);\n  const [wordsTyped, setWordsTyped] = useState(0);\n  const [charsTyped, setCharsTyped] = useState(0);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(100);\n  const [carPosition, setCarPosition] = useState(0);\n  const [previousBestWpm, setPreviousBestWpm] = useState(0);\n  const [previousBestPosition, setPreviousBestPosition] = useState(0);\n  const [error, setError] = useState(null);\n  const inputRef = useRef(null);\n  const textContainerRef = useRef(null);\n\n  // This useEffect ensures car position is reset when component is mounted\n  useEffect(() => {\n    // Reset car position and previous best position on component mount\n    setCarPosition(0);\n    setPreviousBestPosition(0);\n\n    // Clean up any existing game state\n    setInputText('');\n    setTypingStarted(false);\n    setStartTime(null);\n    setWpm(0);\n    setGameOver(false);\n    setCorrectChars(0);\n    setIncorrectChars(0);\n    setWordsTyped(0);\n    setCharsTyped(0);\n    setAccuracy(100);\n  }, []);\n\n  // Initialize with a single text snippet based on difficulty\n  useEffect(() => {\n    try {\n      // Instead of combining texts, we'll use just one text of appropriate length\n      setFullText(text);\n    } catch (error) {\n      console.error(\"Error initializing text:\", error);\n      setError(\"Error loading text content. Please try again.\");\n    }\n  }, [text]);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const wordsTyped = inputText.trim().split(/\\s+/).length;\n      return timeElapsed > 0 ? Math.round(wordsTyped / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText]);\n\n  // Calculate car position based on progress through the text\n  const calculateCarPosition = useCallback((currentInput, fullTextToType) => {\n    try {\n      // If no input yet, ensure car is at start position\n      if (!currentInput || currentInput.length === 0) {\n        return 0;\n      }\n\n      // Calculate progress percentage through the text\n      const progressPercentage = currentInput.length / fullTextToType.length * 100;\n\n      // Ensure the position is between 0 and 100\n      return Math.min(Math.max(0, progressPercentage), 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, []);\n\n  // Load previous best scores from localStorage based on difficulty\n  useEffect(() => {\n    try {\n      const storageKey = `typingRacer_bestWpm_${difficulty}`;\n      const savedBestWpm = localStorage.getItem(storageKey);\n      if (savedBestWpm) {\n        const bestWpm = parseInt(savedBestWpm, 10);\n        setPreviousBestWpm(bestWpm);\n      }\n    } catch (error) {\n      console.error(\"Error loading previous best score:\", error);\n      // Continue without previous best data\n    }\n  }, [difficulty]);\n\n  // Save best score to localStorage when game ends\n  useEffect(() => {\n    if (gameOver && wpm > 0) {\n      try {\n        const storageKey = `typingRacer_bestWpm_${difficulty}`;\n        const savedBestWpm = localStorage.getItem(storageKey);\n        if (!savedBestWpm || wpm > parseInt(savedBestWpm, 10)) {\n          localStorage.setItem(storageKey, wpm.toString());\n        }\n      } catch (error) {\n        console.error(\"Error saving best score:\", error);\n      }\n    }\n  }, [gameOver, wpm, difficulty]);\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        for (let i = 0; i < inputText.length; i++) {\n          if (i < fullText.length) {\n            if (inputText[i] === fullText[i]) {\n              correct++;\n            } else {\n              incorrect++;\n            }\n          }\n        }\n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n\n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round(correct / totalChars * 100) : 100);\n\n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n\n        // Update car position based on progress through text\n        setCarPosition(calculateCarPosition(inputText, fullText));\n\n        // Check if user has completed the text\n        if (inputText.length >= fullText.length) {\n          setGameOver(true);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, fullText, typingStarted, gameOver, calculateSpeed, calculateCarPosition]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // New scoring formula with more weight on WPM\n      // Target: ~5000 for decent typing (60 WPM, 95% accuracy)\n      // Target: ~8000 for excellent typing (100 WPM, 100% accuracy)\n\n      // Base score heavily influenced by WPM\n      const wpmFactor = wpm * 60;\n\n      // Accuracy modifier: scales from 0.5 at 80% to 1.2 at 100%\n      // Heavily penalizes low accuracy, rewards perfect accuracy\n      const accuracyModifier = Math.max(0.5, accuracy / 100 * 1.5 - 0.3);\n\n      // Words typed provides a small bonus\n      const wordsBonus = Math.sqrt(wordsTyped) * 20;\n\n      // Combine factors\n      const rawScore = (wpmFactor + wordsBonus) * accuracyModifier;\n\n      // Difficulty modifier\n      const difficultyMultiplier = {\n        easy: 0.85,\n        medium: 1.0,\n        hard: 1.25\n      }[difficulty];\n\n      // Time setting modifier - longer settings require more endurance\n      const timeModifier = {\n        30: 1.2,\n        // Short sprint gets a bonus\n        60: 1.0,\n        // Standard benchmark\n        120: 0.85 // Longer duration gets a penalty for endurance\n      }[timeSetting];\n\n      // Calculate final score\n      const finalScore = Math.round(rawScore * difficultyMultiplier * timeModifier);\n\n      // Cap at 10,000\n      return Math.min(finalScore, 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = e => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n\n      // Show a window of 500 characters, centered on the current typing position\n      const windowSize = 500;\n      const currentPos = inputText.length;\n      const startPos = Math.max(0, currentPos - windowSize / 2);\n      const endPos = Math.min(fullText.length, startPos + windowSize);\n      for (let i = startPos; i < endPos; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && fullText[i] === inputText[i];\n        if (isTyped) {\n          elements.push(/*#__PURE__*/_jsxDEV(HighlightedText, {\n            isCorrect: isCorrect,\n            isCurrent: isCurrent,\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this));\n        } else if (isCurrent) {\n          elements.push(/*#__PURE__*/_jsxDEV(HighlightedText, {\n            isCorrect: true,\n            isCurrent: true,\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 13\n          }, this));\n        } else {\n          elements.push(/*#__PURE__*/_jsxDEV(UnusedText, {\n            children: fullText[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 13\n          }, this));\n        }\n      }\n      return elements;\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error rendering text. Please restart the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameOver ? /*#__PURE__*/_jsxDEV(Results, {\n      wpm: wpm,\n      accuracy: accuracy,\n      correctChars: correctChars,\n      incorrectChars: incorrectChars,\n      wordsTyped: wordsTyped,\n      score: calculateScore(),\n      difficulty: difficulty,\n      timeSetting: timeSetting,\n      onPlayAgain: onEndGame,\n      previousBestWpm: previousBestWpm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GameContainer, {\n      children: [error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(RaceTrack, {\n        position: carPosition,\n        previousBestPosition: previousBestPosition,\n        progress: carPosition,\n        targetLength: fullText.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 11\n      }, this), renderText(), /*#__PURE__*/_jsxDEV(InputArea, {\n        ref: inputRef,\n        value: inputText,\n        onChange: handleInputChange,\n        placeholder: \"Start typing here...\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StatContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"WPM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: wpm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Accuracy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: [accuracy, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: [Math.round(carPosition), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Best WPM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: previousBestWpm > 0 ? previousBestWpm : '-'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 453,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingGame, \"vNbLDuLjr2SaePB08bsNxINEM/E=\");\n_c10 = TypingGame;\nexport default TypingGame;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"GameContainer\");\n$RefreshReg$(_c2, \"HighlightedText\");\n$RefreshReg$(_c3, \"UnusedText\");\n$RefreshReg$(_c4, \"InputArea\");\n$RefreshReg$(_c5, \"StatContainer\");\n$RefreshReg$(_c6, \"Stat\");\n$RefreshReg$(_c7, \"StatLabel\");\n$RefreshReg$(_c8, \"StatValue\");\n$RefreshReg$(_c9, \"ErrorMessage\");\n$RefreshReg$(_c10, \"TypingGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","styled","RaceTrack","Results","easyTexts","mediumTexts","hardTexts","jsxDEV","_jsxDEV","GameContainer","div","_c","TextContainer","HighlightedText","span","props","isCurrent","isCorrect","_c2","UnusedText","_c3","InputArea","textarea","_c4","StatContainer","_c5","Stat","_c6","StatLabel","_c7","StatValue","_c8","ErrorMessage","_c9","getAllTextsForDifficulty","difficulty","allTexts","forEach","item","text","trim","TypingGame","onEndGame","_s","fullText","setFullText","inputText","setInputText","startTime","setStartTime","typingStarted","setTypingStarted","gameOver","setGameOver","correctChars","setCorrectChars","incorrectChars","setIncorrectChars","wordsTyped","setWordsTyped","charsTyped","setCharsTyped","wpm","setWpm","accuracy","setAccuracy","carPosition","setCarPosition","previousBestWpm","setPreviousBestWpm","previousBestPosition","setPreviousBestPosition","error","setError","inputRef","textContainerRef","console","calculateSpeed","timeElapsed","Date","now","split","length","Math","round","calculateCarPosition","currentInput","fullTextToType","progressPercentage","min","max","storageKey","savedBestWpm","localStorage","getItem","bestWpm","parseInt","setItem","toString","correct","incorrect","i","totalChars","currentWpm","current","focus","calculateScore","wpmFactor","accuracyModifier","wordsBonus","sqrt","rawScore","difficultyMultiplier","easy","medium","hard","timeModifier","timeSetting","finalScore","handleInputChange","e","target","value","renderText","elements","windowSize","currentPos","startPos","endPos","isTyped","push","children","fileName","_jsxFileName","lineNumber","columnNumber","score","onPlayAgain","position","progress","targetLength","ref","onChange","placeholder","autoFocus","_c10","$RefreshReg$"],"sources":["/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { Difficulty } from '../App';\nimport { easyTexts } from '../data/easyTexts';\nimport { mediumTexts } from '../data/mediumTexts';\nimport { hardTexts } from '../data/hardTexts';\nimport TimeDisplay from './TimeDisplay';\n\ninterface TypingGameProps {\n  text: string;\n  difficulty: Difficulty;\n  onEndGame: () => void;\n}\n\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 30px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  margin-bottom: 30px;\n`;\n\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 25px;\n  padding: 20px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n  border: 2px solid #eee;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);\n  position: relative;\n  \n  &::before {\n    content: '📝';\n    position: absolute;\n    top: -10px;\n    left: 20px;\n    background-color: white;\n    padding: 0 10px;\n    font-size: 16px;\n  }\n`;\n\nconst HighlightedText = styled.span<{ isCorrect: boolean; isCurrent: boolean }>`\n  background-color: ${props => props.isCurrent ? 'rgba(255, 255, 153, 0.7)' : 'transparent'};\n  color: ${props => {\n    if (props.isCurrent) return '#333';\n    return props.isCorrect ? '#27ae60' : '#e74c3c';\n  }};\n  text-decoration: ${props => (!props.isCorrect && !props.isCurrent) ? 'line-through' : 'none'};\n  transition: all 0.15s ease;\n  padding: 0 1px;\n  border-radius: 2px;\n  position: relative;\n  \n  ${props => props.isCurrent && `\n    box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n    animation: pulse 1.5s infinite;\n    \n    @keyframes pulse {\n      0%, 100% {\n        box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n      }\n      50% {\n        box-shadow: 0 0 0 4px rgba(255, 255, 153, 0.3);\n      }\n    }\n  `}\n`;\n\nconst UnusedText = styled.span`\n  color: #999;\n`;\n\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 20px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  resize: none;\n  height: 120px;\n  margin-bottom: 25px;\n  transition: all 0.3s ease;\n  \n  &:focus {\n    outline: none;\n    border-color: #3498db;\n    box-shadow: 0 0 10px rgba(52, 152, 219, 0.3);\n  }\n`;\n\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  padding: 15px;\n  background: linear-gradient(to right, rgba(52, 152, 219, 0.05), rgba(52, 152, 219, 0.1));\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n\nconst Stat = styled.div`\n  text-align: center;\n`;\n\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 1rem;\n  box-shadow: 0 2px 8px rgba(244, 67, 54, 0.2);\n  display: flex;\n  align-items: center;\n  \n  &::before {\n    content: '⚠️';\n    margin-right: 10px;\n    font-size: 1.3rem;\n  }\n`;\n\n// Select all text in the current difficulty level\nconst getAllTextsForDifficulty = (difficulty: Difficulty): string => {\n  let allTexts = '';\n  switch (difficulty) {\n    case 'easy':\n      easyTexts.forEach(item => { allTexts += item.text + ' '; });\n      break;\n    case 'medium':\n      mediumTexts.forEach(item => { allTexts += item.text + ' '; });\n      break;\n    case 'hard':\n      hardTexts.forEach(item => { allTexts += item.text + ' '; });\n      break;\n    default:\n      easyTexts.forEach(item => { allTexts += item.text + ' '; });\n  }\n  return allTexts.trim();\n};\n\nconst TypingGame: React.FC<TypingGameProps> = ({\n  text,\n  difficulty,\n  onEndGame\n}) => {\n  // Combine the provided text with more text from the same difficulty\n  const [fullText, setFullText] = useState<string>(text);\n  const [inputText, setInputText] = useState<string>('');\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [typingStarted, setTypingStarted] = useState<boolean>(false);\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [correctChars, setCorrectChars] = useState<number>(0);\n  const [incorrectChars, setIncorrectChars] = useState<number>(0);\n  const [wordsTyped, setWordsTyped] = useState<number>(0);\n  const [charsTyped, setCharsTyped] = useState<number>(0);\n  const [wpm, setWpm] = useState<number>(0);\n  const [accuracy, setAccuracy] = useState<number>(100);\n  const [carPosition, setCarPosition] = useState<number>(0);\n  const [previousBestWpm, setPreviousBestWpm] = useState<number>(0);\n  const [previousBestPosition, setPreviousBestPosition] = useState<number>(0);\n  const [error, setError] = useState<string | null>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const textContainerRef = useRef<HTMLDivElement>(null);\n  \n  // This useEffect ensures car position is reset when component is mounted\n  useEffect(() => {\n    // Reset car position and previous best position on component mount\n    setCarPosition(0);\n    setPreviousBestPosition(0);\n    \n    // Clean up any existing game state\n    setInputText('');\n    setTypingStarted(false);\n    setStartTime(null);\n    setWpm(0);\n    setGameOver(false);\n    setCorrectChars(0);\n    setIncorrectChars(0);\n    setWordsTyped(0);\n    setCharsTyped(0);\n    setAccuracy(100);\n  }, []);\n    \n  // Initialize with a single text snippet based on difficulty\n  useEffect(() => {\n    try {\n      // Instead of combining texts, we'll use just one text of appropriate length\n      setFullText(text);\n    } catch (error) {\n      console.error(\"Error initializing text:\", error);\n      setError(\"Error loading text content. Please try again.\");\n    }\n  }, [text]);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      \n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const wordsTyped = inputText.trim().split(/\\s+/).length;\n      \n      return timeElapsed > 0 ? Math.round(wordsTyped / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText]);\n\n  // Calculate car position based on progress through the text\n  const calculateCarPosition = useCallback((currentInput: string, fullTextToType: string) => {\n    try {\n      // If no input yet, ensure car is at start position\n      if (!currentInput || currentInput.length === 0) {\n        return 0;\n      }\n      \n      // Calculate progress percentage through the text\n      const progressPercentage = (currentInput.length / fullTextToType.length) * 100;\n      \n      // Ensure the position is between 0 and 100\n      return Math.min(Math.max(0, progressPercentage), 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, []);\n\n  // Load previous best scores from localStorage based on difficulty\n  useEffect(() => {\n    try {\n      const storageKey = `typingRacer_bestWpm_${difficulty}`;\n      const savedBestWpm = localStorage.getItem(storageKey);\n      \n      if (savedBestWpm) {\n        const bestWpm = parseInt(savedBestWpm, 10);\n        setPreviousBestWpm(bestWpm);\n      }\n    } catch (error) {\n      console.error(\"Error loading previous best score:\", error);\n      // Continue without previous best data\n    }\n  }, [difficulty]);\n\n  // Save best score to localStorage when game ends\n  useEffect(() => {\n    if (gameOver && wpm > 0) {\n      try {\n        const storageKey = `typingRacer_bestWpm_${difficulty}`;\n        const savedBestWpm = localStorage.getItem(storageKey);\n        \n        if (!savedBestWpm || wpm > parseInt(savedBestWpm, 10)) {\n          localStorage.setItem(storageKey, wpm.toString());\n        }\n      } catch (error) {\n        console.error(\"Error saving best score:\", error);\n      }\n    }\n  }, [gameOver, wpm, difficulty]);\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        \n        for (let i = 0; i < inputText.length; i++) {\n          if (i < fullText.length) {\n            if (inputText[i] === fullText[i]) {\n              correct++;\n            } else {\n              incorrect++;\n            }\n          }\n        }\n        \n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n        \n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round((correct / totalChars) * 100) : 100);\n        \n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n        \n        // Update car position based on progress through text\n        setCarPosition(calculateCarPosition(inputText, fullText));\n        \n        // Check if user has completed the text\n        if (inputText.length >= fullText.length) {\n          setGameOver(true);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, fullText, typingStarted, gameOver, calculateSpeed, calculateCarPosition]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // New scoring formula with more weight on WPM\n      // Target: ~5000 for decent typing (60 WPM, 95% accuracy)\n      // Target: ~8000 for excellent typing (100 WPM, 100% accuracy)\n      \n      // Base score heavily influenced by WPM\n      const wpmFactor = wpm * 60;\n      \n      // Accuracy modifier: scales from 0.5 at 80% to 1.2 at 100%\n      // Heavily penalizes low accuracy, rewards perfect accuracy\n      const accuracyModifier = Math.max(0.5, (accuracy / 100) * 1.5 - 0.3);\n      \n      // Words typed provides a small bonus\n      const wordsBonus = Math.sqrt(wordsTyped) * 20;\n      \n      // Combine factors\n      const rawScore = (wpmFactor + wordsBonus) * accuracyModifier;\n      \n      // Difficulty modifier\n      const difficultyMultiplier = {\n        easy: 0.85,\n        medium: 1.0,\n        hard: 1.25\n      }[difficulty];\n      \n      // Time setting modifier - longer settings require more endurance\n      const timeModifier = {\n        30: 1.2,  // Short sprint gets a bonus\n        60: 1.0,  // Standard benchmark\n        120: 0.85 // Longer duration gets a penalty for endurance\n      }[timeSetting];\n      \n      // Calculate final score\n      const finalScore = Math.round(rawScore * difficultyMultiplier * timeModifier);\n      \n      // Cap at 10,000\n      return Math.min(finalScore, 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n      \n      // Show a window of 500 characters, centered on the current typing position\n      const windowSize = 500;\n      const currentPos = inputText.length;\n      const startPos = Math.max(0, currentPos - windowSize / 2);\n      const endPos = Math.min(fullText.length, startPos + windowSize);\n      \n      for (let i = startPos; i < endPos; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && fullText[i] === inputText[i];\n        \n        if (isTyped) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={isCorrect} isCurrent={isCurrent}>\n              {fullText[i]}\n            </HighlightedText>\n          );\n        } else if (isCurrent) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={true} isCurrent={true}>\n              {fullText[i]}\n            </HighlightedText>\n          );\n        } else {\n          elements.push(\n            <UnusedText key={i}>\n              {fullText[i]}\n            </UnusedText>\n          );\n        }\n      }\n      \n      return elements;\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return <div>Error rendering text. Please restart the game.</div>;\n    }\n  };\n\n  return (\n    <div>\n      {gameOver ? (\n        <Results\n          wpm={wpm}\n          accuracy={accuracy}\n          correctChars={correctChars}\n          incorrectChars={incorrectChars}\n          wordsTyped={wordsTyped}\n          score={calculateScore()}\n          difficulty={difficulty}\n          timeSetting={timeSetting}\n          onPlayAgain={onEndGame}\n          previousBestWpm={previousBestWpm}\n        />\n      ) : (\n        <GameContainer>\n          {error && <ErrorMessage>{error}</ErrorMessage>}\n          \n          <RaceTrack \n            position={carPosition} \n            previousBestPosition={previousBestPosition}\n            progress={carPosition}\n            targetLength={fullText.length}\n          />\n          \n          {renderText()}\n          \n          <InputArea\n            ref={inputRef}\n            value={inputText}\n            onChange={handleInputChange}\n            placeholder=\"Start typing here...\"\n            autoFocus\n          />\n          \n          <StatContainer>\n            <Stat>\n              <StatLabel>WPM</StatLabel>\n              <StatValue>{wpm}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Accuracy</StatLabel>\n              <StatValue>{accuracy}%</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Progress</StatLabel>\n              <StatValue>{Math.round(carPosition)}%</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Best WPM</StatLabel>\n              <StatValue>{previousBestWpm > 0 ? previousBestWpm : '-'}</StatValue>\n            </Stat>\n          </StatContainer>\n        </GameContainer>\n      )}\n    </div>\n  );\n};\n\nexport default TypingGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}