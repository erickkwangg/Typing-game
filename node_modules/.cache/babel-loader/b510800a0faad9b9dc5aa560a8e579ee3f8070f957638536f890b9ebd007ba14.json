{"ast":null,"code":"var _jsxFileName = \"/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './TypingGame.css';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { easyTexts } from '../data/easyTexts';\nimport { mediumTexts } from '../data/mediumTexts';\nimport { hardTexts } from '../data/hardTexts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingGame = ({\n  difficulty,\n  targetWordCount,\n  onGameComplete\n}) => {\n  _s();\n  // State for game setup and tracking\n  const [inputText, setInputText] = useState('');\n  const [currentText, setCurrentText] = useState('');\n  const [fullText, setFullText] = useState('');\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [correctChars, setCorrectChars] = useState(0);\n  const [incorrectChars, setIncorrectChars] = useState(0);\n  const [currentChar, setCurrentChar] = useState('');\n  const [currentPosition, setCurrentPosition] = useState(0);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(100);\n  const [carPosition, setCarPosition] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameComplete, setGameComplete] = useState(false);\n  const [totalWordsTyped, setTotalWordsTyped] = useState(0);\n  const [usedTexts, setUsedTexts] = useState(new Set());\n  const inputRef = useRef(null);\n\n  // Function to get all texts for current difficulty\n  const getAllTextsForDifficulty = useCallback(() => {\n    switch (difficulty) {\n      case 'easy':\n        return easyTexts;\n      case 'medium':\n        return mediumTexts;\n      case 'hard':\n        return hardTexts;\n      default:\n        return easyTexts;\n    }\n  }, [difficulty]);\n\n  // Initialize the game with a random text\n  useEffect(() => {\n    // Reset game state\n    setInputText('');\n    setCorrectChars(0);\n    setIncorrectChars(0);\n    setWpm(0);\n    setAccuracy(100);\n    setCarPosition(0);\n    setGameStarted(false);\n    setGameComplete(false);\n    setTotalWordsTyped(0);\n    setUsedTexts(new Set());\n    setStartTime(null);\n    setEndTime(null);\n\n    // Get a random text based on difficulty\n    const texts = getAllTextsForDifficulty();\n    const randomIndex = Math.floor(Math.random() * texts.length);\n    const initialText = texts[randomIndex].text;\n    setFullText(initialText);\n    setCurrentText(initialText);\n    setUsedTexts(new Set([initialText]));\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [difficulty, getAllTextsForDifficulty]);\n\n  // Calculate typing speed (WPM)\n  const calculateWPM = useCallback(() => {\n    if (!startTime) return 0;\n\n    // Calculate elapsed time in minutes\n    const elapsedTimeMs = Date.now() - startTime;\n    const elapsedTimeMinutes = elapsedTimeMs / (1000 * 60);\n\n    // Count words (estimated by dividing character count by 5)\n    const wordCount = correctChars / 5;\n\n    // Calculate WPM\n    return Math.round(wordCount / (elapsedTimeMinutes || 1));\n  }, [correctChars, startTime]);\n\n  // Calculate car position based on WPM\n  const calculateCarPosition = useCallback(() => {\n    // If game hasn't started or WPM is 0, return 0\n    if (!gameStarted || wpm <= 0) {\n      return 0;\n    }\n\n    // Calculate percentage of typing progress\n    const percentComplete = totalWordsTyped / targetWordCount * 100;\n\n    // Clamp between 0 and 100\n    return Math.min(Math.max(percentComplete, 0), 100);\n  }, [gameStarted, wpm, totalWordsTyped, targetWordCount]);\n\n  // Add more text when necessary\n  const addMoreText = useCallback(() => {\n    try {\n      // Check if we've reached the target word count\n      if (totalWordsTyped >= targetWordCount) {\n        return false;\n      }\n\n      // Get all texts for the current difficulty\n      const allTexts = getAllTextsForDifficulty();\n\n      // Filter out texts we've already used\n      const availableTexts = allTexts.filter(text => !Array.from(usedTexts).includes(text.text));\n\n      // If we have available texts, choose one randomly\n      let nextText;\n      if (availableTexts.length > 0) {\n        const randomIndex = Math.floor(Math.random() * availableTexts.length);\n        nextText = availableTexts[randomIndex].text;\n      } else {\n        // If we've used all texts, reset and pick any text that's least similar to the current\n        const textsSortedBySimilarity = allTexts.slice().sort((a, b) => {\n          const similarityA = calculateTextSimilarity(a.text, currentText);\n          const similarityB = calculateTextSimilarity(b.text, currentText);\n          return similarityA - similarityB;\n        });\n        nextText = textsSortedBySimilarity[0].text;\n      }\n\n      // Update the used texts set\n      setUsedTexts(prevUsedTexts => new Set([...Array.from(prevUsedTexts), nextText]));\n\n      // Add text with a separator\n      setFullText(prev => prev + \" ■ \" + nextText);\n\n      // Update current text to include only what's left to type\n      setCurrentText(prevText => prevText.substring(inputText.length) + \" ■ \" + nextText);\n      return true;\n    } catch (error) {\n      console.error(\"Error adding more text:\", error);\n      return false;\n    }\n  }, [currentText, getAllTextsForDifficulty, inputText, totalWordsTyped, targetWordCount, usedTexts]);\n\n  // Calculate text similarity (simple implementation)\n  const calculateTextSimilarity = useCallback((text1, text2) => {\n    // Convert to lowercase and split into words\n    const words1 = text1.toLowerCase().split(/\\s+/);\n    const words2 = text2.toLowerCase().split(/\\s+/);\n\n    // Count matching words\n    const set1 = new Set(words1);\n    const set2 = new Set(words2);\n\n    // Calculate common words\n    const commonWords = Array.from(set1).filter(word => set2.has(word)).length;\n\n    // Calculate Jaccard similarity\n    const totalUniqueWords = new Set([...words1, ...words2]).size;\n    return totalUniqueWords === 0 ? 0 : commonWords / totalUniqueWords;\n  }, []);\n\n  // Update stats on text input\n  const handleInputChange = useCallback(e => {\n    const inputValue = e.target.value;\n\n    // Start the timer if it's the first input\n    if (!startTime && inputValue.length === 1) {\n      setStartTime(Date.now());\n      setGameStarted(true);\n    }\n\n    // Only process if we have text to compare\n    if (currentText.length === 0) return;\n    let correctCount = 0;\n    let incorrectCount = 0;\n\n    // Count correct and incorrect characters\n    for (let i = 0; i < inputValue.length; i++) {\n      if (i < currentText.length) {\n        if (inputValue[i] === currentText[i]) {\n          correctCount++;\n        } else {\n          incorrectCount++;\n        }\n      } else {\n        // Extra characters typed beyond the current text\n        incorrectCount++;\n      }\n    }\n\n    // Update stats\n    setInputText(inputValue);\n    setCorrectChars(prevCorrect => prevCorrect + (correctCount - (correctChars > 0 ? correctChars : 0)));\n    setIncorrectChars(prevIncorrect => prevIncorrect + incorrectCount - (incorrectChars > 0 ? incorrectChars : 0));\n\n    // Calculate current position in the text\n    setCurrentPosition(inputValue.length);\n\n    // Calculate words typed\n    const wordsTyped = Math.floor(inputValue.length / 5);\n    setTotalWordsTyped(prevWords => Math.max(prevWords, wordsTyped));\n\n    // Update accuracy\n    const totalChars = correctChars + incorrectChars;\n    if (totalChars > 0) {\n      setAccuracy(Math.round(correctChars / totalChars * 100));\n    }\n\n    // Calculate and update WPM\n    const currentWpm = calculateWPM();\n    setWpm(currentWpm);\n\n    // Update car position\n    const newCarPosition = calculateCarPosition();\n    setCarPosition(newCarPosition);\n\n    // Check if the user has completed the current text segment\n    if (inputValue.length >= currentText.length) {\n      // Add more text if we haven't reached the target\n      if (totalWordsTyped < targetWordCount) {\n        addMoreText();\n        setInputText('');\n      } else {\n        // Game complete\n        setEndTime(Date.now());\n        setGameComplete(true);\n        onGameComplete({\n          wpm,\n          accuracy\n        });\n      }\n    } else {\n      // Update the current character the user needs to type\n      setCurrentChar(currentText[inputValue.length] || '');\n    }\n  }, [startTime, currentText, correctChars, incorrectChars, calculateWPM, calculateCarPosition, totalWordsTyped, targetWordCount, addMoreText, wpm, accuracy, onGameComplete]);\n\n  // Focus input field when component mounts\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  // Render the text with proper highlighting\n  const renderText = () => {\n    let renderedText = [];\n    for (let i = 0; i < currentText.length; i++) {\n      // Determine the class for each character\n      let className = \"future-char\";\n      if (i < inputText.length) {\n        className = inputText[i] === currentText[i] ? \"correct-char\" : \"incorrect-char\";\n      } else if (i === inputText.length) {\n        className = \"current-char\";\n      }\n\n      // Add the character to the rendered text\n      renderedText.push(/*#__PURE__*/_jsxDEV(\"span\", {\n        className: className,\n        children: currentText[i]\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this));\n    }\n    return renderedText;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"typing-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: \"WPM:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-value\",\n          children: wpm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: \"Accuracy:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-value\",\n          children: [accuracy, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: \"Progress:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-value\",\n          children: [Math.min(Math.round(totalWordsTyped / targetWordCount * 100), 100), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-display\",\n      children: renderText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      className: \"typing-input\",\n      value: inputText,\n      onChange: handleInputChange,\n      disabled: gameComplete,\n      placeholder: \"Start typing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RaceTrack, {\n      carPosition: carPosition,\n      gameComplete: gameComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), gameComplete && /*#__PURE__*/_jsxDEV(Results, {\n      wpm: wpm,\n      accuracy: accuracy,\n      timeElapsed: startTime && endTime ? (endTime - startTime) / 1000 : 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingGame, \"g4l9oWLqY6IuGBYwC92ZNZVrBHw=\");\n_c = TypingGame;\nexport default TypingGame;\nvar _c;\n$RefreshReg$(_c, \"TypingGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","RaceTrack","Results","easyTexts","mediumTexts","hardTexts","jsxDEV","_jsxDEV","TypingGame","difficulty","targetWordCount","onGameComplete","_s","inputText","setInputText","currentText","setCurrentText","fullText","setFullText","startTime","setStartTime","endTime","setEndTime","correctChars","setCorrectChars","incorrectChars","setIncorrectChars","currentChar","setCurrentChar","currentPosition","setCurrentPosition","wpm","setWpm","accuracy","setAccuracy","carPosition","setCarPosition","gameStarted","setGameStarted","gameComplete","setGameComplete","totalWordsTyped","setTotalWordsTyped","usedTexts","setUsedTexts","Set","inputRef","getAllTextsForDifficulty","texts","randomIndex","Math","floor","random","length","initialText","text","current","focus","calculateWPM","elapsedTimeMs","Date","now","elapsedTimeMinutes","wordCount","round","calculateCarPosition","percentComplete","min","max","addMoreText","allTexts","availableTexts","filter","Array","from","includes","nextText","textsSortedBySimilarity","slice","sort","a","b","similarityA","calculateTextSimilarity","similarityB","prevUsedTexts","prev","prevText","substring","error","console","text1","text2","words1","toLowerCase","split","words2","set1","set2","commonWords","word","has","totalUniqueWords","size","handleInputChange","e","inputValue","target","value","correctCount","incorrectCount","i","prevCorrect","prevIncorrect","wordsTyped","prevWords","totalChars","currentWpm","newCarPosition","renderText","renderedText","className","push","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","onChange","disabled","placeholder","timeElapsed","_c","$RefreshReg$"],"sources":["/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './TypingGame.css';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { easyTexts } from '../data/easyTexts';\nimport { mediumTexts } from '../data/mediumTexts';\nimport { hardTexts } from '../data/hardTexts';\n\ninterface TypingGameProps {\n  difficulty: string;\n  targetWordCount: number;\n  onGameComplete: (stats: { wpm: number; accuracy: number }) => void;\n}\n\nconst TypingGame: React.FC<TypingGameProps> = ({ \n  difficulty, \n  targetWordCount,\n  onGameComplete\n}) => {\n  // State for game setup and tracking\n  const [inputText, setInputText] = useState('');\n  const [currentText, setCurrentText] = useState('');\n  const [fullText, setFullText] = useState('');\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [endTime, setEndTime] = useState<number | null>(null);\n  const [correctChars, setCorrectChars] = useState(0);\n  const [incorrectChars, setIncorrectChars] = useState(0);\n  const [currentChar, setCurrentChar] = useState<string>('');\n  const [currentPosition, setCurrentPosition] = useState(0);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(100);\n  const [carPosition, setCarPosition] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameComplete, setGameComplete] = useState(false);\n  const [totalWordsTyped, setTotalWordsTyped] = useState(0);\n  const [usedTexts, setUsedTexts] = useState<Set<string>>(new Set());\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Function to get all texts for current difficulty\n  const getAllTextsForDifficulty = useCallback(() => {\n    switch (difficulty) {\n      case 'easy':\n        return easyTexts;\n      case 'medium':\n        return mediumTexts;\n      case 'hard':\n        return hardTexts;\n      default:\n        return easyTexts;\n    }\n  }, [difficulty]);\n\n  // Initialize the game with a random text\n  useEffect(() => {\n    // Reset game state\n    setInputText('');\n    setCorrectChars(0);\n    setIncorrectChars(0);\n    setWpm(0);\n    setAccuracy(100);\n    setCarPosition(0);\n    setGameStarted(false);\n    setGameComplete(false);\n    setTotalWordsTyped(0);\n    setUsedTexts(new Set());\n    setStartTime(null);\n    setEndTime(null);\n\n    // Get a random text based on difficulty\n    const texts = getAllTextsForDifficulty();\n    const randomIndex = Math.floor(Math.random() * texts.length);\n    const initialText = texts[randomIndex].text;\n    \n    setFullText(initialText);\n    setCurrentText(initialText);\n    setUsedTexts(new Set([initialText]));\n\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [difficulty, getAllTextsForDifficulty]);\n\n  // Calculate typing speed (WPM)\n  const calculateWPM = useCallback(() => {\n    if (!startTime) return 0;\n    \n    // Calculate elapsed time in minutes\n    const elapsedTimeMs = Date.now() - startTime;\n    const elapsedTimeMinutes = elapsedTimeMs / (1000 * 60);\n    \n    // Count words (estimated by dividing character count by 5)\n    const wordCount = correctChars / 5;\n    \n    // Calculate WPM\n    return Math.round(wordCount / (elapsedTimeMinutes || 1));\n  }, [correctChars, startTime]);\n\n  // Calculate car position based on WPM\n  const calculateCarPosition = useCallback(() => {\n    // If game hasn't started or WPM is 0, return 0\n    if (!gameStarted || wpm <= 0) {\n      return 0;\n    }\n    \n    // Calculate percentage of typing progress\n    const percentComplete = (totalWordsTyped / targetWordCount) * 100;\n    \n    // Clamp between 0 and 100\n    return Math.min(Math.max(percentComplete, 0), 100);\n  }, [gameStarted, wpm, totalWordsTyped, targetWordCount]);\n\n  // Add more text when necessary\n  const addMoreText = useCallback(() => {\n    try {\n      // Check if we've reached the target word count\n      if (totalWordsTyped >= targetWordCount) {\n        return false;\n      }\n\n      // Get all texts for the current difficulty\n      const allTexts = getAllTextsForDifficulty();\n      \n      // Filter out texts we've already used\n      const availableTexts = allTexts.filter(\n        text => !Array.from(usedTexts).includes(text.text)\n      );\n      \n      // If we have available texts, choose one randomly\n      let nextText: string;\n      if (availableTexts.length > 0) {\n        const randomIndex = Math.floor(Math.random() * availableTexts.length);\n        nextText = availableTexts[randomIndex].text;\n      } else {\n        // If we've used all texts, reset and pick any text that's least similar to the current\n        const textsSortedBySimilarity = allTexts.slice().sort((a, b) => {\n          const similarityA = calculateTextSimilarity(a.text, currentText);\n          const similarityB = calculateTextSimilarity(b.text, currentText);\n          return similarityA - similarityB;\n        });\n        nextText = textsSortedBySimilarity[0].text;\n      }\n      \n      // Update the used texts set\n      setUsedTexts(prevUsedTexts => new Set([...Array.from(prevUsedTexts), nextText]));\n      \n      // Add text with a separator\n      setFullText(prev => prev + \" ■ \" + nextText);\n      \n      // Update current text to include only what's left to type\n      setCurrentText(prevText => prevText.substring(inputText.length) + \" ■ \" + nextText);\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error adding more text:\", error);\n      return false;\n    }\n  }, [currentText, getAllTextsForDifficulty, inputText, totalWordsTyped, targetWordCount, usedTexts]);\n\n  // Calculate text similarity (simple implementation)\n  const calculateTextSimilarity = useCallback((text1: string, text2: string) => {\n    // Convert to lowercase and split into words\n    const words1 = text1.toLowerCase().split(/\\s+/);\n    const words2 = text2.toLowerCase().split(/\\s+/);\n    \n    // Count matching words\n    const set1 = new Set(words1);\n    const set2 = new Set(words2);\n    \n    // Calculate common words\n    const commonWords = Array.from(set1).filter(word => set2.has(word)).length;\n    \n    // Calculate Jaccard similarity\n    const totalUniqueWords = new Set([...words1, ...words2]).size;\n    return totalUniqueWords === 0 ? 0 : commonWords / totalUniqueWords;\n  }, []);\n\n  // Update stats on text input\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    \n    // Start the timer if it's the first input\n    if (!startTime && inputValue.length === 1) {\n      setStartTime(Date.now());\n      setGameStarted(true);\n    }\n    \n    // Only process if we have text to compare\n    if (currentText.length === 0) return;\n    \n    let correctCount = 0;\n    let incorrectCount = 0;\n    \n    // Count correct and incorrect characters\n    for (let i = 0; i < inputValue.length; i++) {\n      if (i < currentText.length) {\n        if (inputValue[i] === currentText[i]) {\n          correctCount++;\n        } else {\n          incorrectCount++;\n        }\n      } else {\n        // Extra characters typed beyond the current text\n        incorrectCount++;\n      }\n    }\n    \n    // Update stats\n    setInputText(inputValue);\n    setCorrectChars(prevCorrect => prevCorrect + (correctCount - (correctChars > 0 ? correctChars : 0)));\n    setIncorrectChars(prevIncorrect => prevIncorrect + incorrectCount - (incorrectChars > 0 ? incorrectChars : 0));\n    \n    // Calculate current position in the text\n    setCurrentPosition(inputValue.length);\n    \n    // Calculate words typed\n    const wordsTyped = Math.floor(inputValue.length / 5);\n    setTotalWordsTyped(prevWords => Math.max(prevWords, wordsTyped));\n    \n    // Update accuracy\n    const totalChars = correctChars + incorrectChars;\n    if (totalChars > 0) {\n      setAccuracy(Math.round((correctChars / totalChars) * 100));\n    }\n    \n    // Calculate and update WPM\n    const currentWpm = calculateWPM();\n    setWpm(currentWpm);\n    \n    // Update car position\n    const newCarPosition = calculateCarPosition();\n    setCarPosition(newCarPosition);\n    \n    // Check if the user has completed the current text segment\n    if (inputValue.length >= currentText.length) {\n      // Add more text if we haven't reached the target\n      if (totalWordsTyped < targetWordCount) {\n        addMoreText();\n        setInputText('');\n      } else {\n        // Game complete\n        setEndTime(Date.now());\n        setGameComplete(true);\n        onGameComplete({ wpm, accuracy });\n      }\n    } else {\n      // Update the current character the user needs to type\n      setCurrentChar(currentText[inputValue.length] || '');\n    }\n  }, [\n    startTime, currentText, correctChars, incorrectChars, \n    calculateWPM, calculateCarPosition, totalWordsTyped, \n    targetWordCount, addMoreText, wpm, accuracy, onGameComplete\n  ]);\n\n  // Focus input field when component mounts\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  // Render the text with proper highlighting\n  const renderText = () => {\n    let renderedText = [];\n    \n    for (let i = 0; i < currentText.length; i++) {\n      // Determine the class for each character\n      let className = \"future-char\";\n      \n      if (i < inputText.length) {\n        className = inputText[i] === currentText[i] ? \"correct-char\" : \"incorrect-char\";\n      } else if (i === inputText.length) {\n        className = \"current-char\";\n      }\n      \n      // Add the character to the rendered text\n      renderedText.push(\n        <span key={i} className={className}>\n          {currentText[i]}\n        </span>\n      );\n    }\n    \n    return renderedText;\n  };\n\n  return (\n    <div className=\"typing-game\">\n      <div className=\"stats\">\n        <div className=\"stat\">\n          <span className=\"stat-label\">WPM:</span>\n          <span className=\"stat-value\">{wpm}</span>\n        </div>\n        <div className=\"stat\">\n          <span className=\"stat-label\">Accuracy:</span>\n          <span className=\"stat-value\">{accuracy}%</span>\n        </div>\n        <div className=\"stat\">\n          <span className=\"stat-label\">Progress:</span>\n          <span className=\"stat-value\">{Math.min(Math.round((totalWordsTyped / targetWordCount) * 100), 100)}%</span>\n        </div>\n      </div>\n      \n      <div className=\"text-display\">\n        {renderText()}\n      </div>\n      \n      <input\n        ref={inputRef}\n        type=\"text\"\n        className=\"typing-input\"\n        value={inputText}\n        onChange={handleInputChange}\n        disabled={gameComplete}\n        placeholder=\"Start typing...\"\n      />\n      \n      <RaceTrack \n        carPosition={carPosition} \n        gameComplete={gameComplete}\n      />\n      \n      {gameComplete && (\n        <Results \n          wpm={wpm} \n          accuracy={accuracy} \n          timeElapsed={startTime && endTime ? (endTime - startTime) / 1000 : 0}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default TypingGame; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAO,kBAAkB;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,SAAS,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ9C,MAAMC,UAAqC,GAAGA,CAAC;EAC7CC,UAAU;EACVC,eAAe;EACfC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAgB,IAAI,CAAC;EAC/D,MAAM,CAACwB,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAgB,IAAI,CAAC;EAC3D,MAAM,CAAC0B,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAAC4B,cAAc,EAAEC,iBAAiB,CAAC,GAAG7B,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAAC8B,WAAW,EAAEC,cAAc,CAAC,GAAG/B,QAAQ,CAAS,EAAE,CAAC;EAC1D,MAAM,CAACgC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjC,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACkC,GAAG,EAAEC,MAAM,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACoC,QAAQ,EAAEC,WAAW,CAAC,GAAGrC,QAAQ,CAAC,GAAG,CAAC;EAC7C,MAAM,CAACsC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACwC,WAAW,EAAEC,cAAc,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC0C,YAAY,EAAEC,eAAe,CAAC,GAAG3C,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC4C,eAAe,EAAEC,kBAAkB,CAAC,GAAG7C,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAAC8C,SAAS,EAAEC,YAAY,CAAC,GAAG/C,QAAQ,CAAc,IAAIgD,GAAG,CAAC,CAAC,CAAC;EAClE,MAAMC,QAAQ,GAAG/C,MAAM,CAAmB,IAAI,CAAC;;EAE/C;EACA,MAAMgD,wBAAwB,GAAG/C,WAAW,CAAC,MAAM;IACjD,QAAQS,UAAU;MAChB,KAAK,MAAM;QACT,OAAON,SAAS;MAClB,KAAK,QAAQ;QACX,OAAOC,WAAW;MACpB,KAAK,MAAM;QACT,OAAOC,SAAS;MAClB;QACE,OAAOF,SAAS;IACpB;EACF,CAAC,EAAE,CAACM,UAAU,CAAC,CAAC;;EAEhB;EACAX,SAAS,CAAC,MAAM;IACd;IACAgB,YAAY,CAAC,EAAE,CAAC;IAChBU,eAAe,CAAC,CAAC,CAAC;IAClBE,iBAAiB,CAAC,CAAC,CAAC;IACpBM,MAAM,CAAC,CAAC,CAAC;IACTE,WAAW,CAAC,GAAG,CAAC;IAChBE,cAAc,CAAC,CAAC,CAAC;IACjBE,cAAc,CAAC,KAAK,CAAC;IACrBE,eAAe,CAAC,KAAK,CAAC;IACtBE,kBAAkB,CAAC,CAAC,CAAC;IACrBE,YAAY,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;IACvBzB,YAAY,CAAC,IAAI,CAAC;IAClBE,UAAU,CAAC,IAAI,CAAC;;IAEhB;IACA,MAAM0B,KAAK,GAAGD,wBAAwB,CAAC,CAAC;IACxC,MAAME,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,KAAK,CAACK,MAAM,CAAC;IAC5D,MAAMC,WAAW,GAAGN,KAAK,CAACC,WAAW,CAAC,CAACM,IAAI;IAE3CrC,WAAW,CAACoC,WAAW,CAAC;IACxBtC,cAAc,CAACsC,WAAW,CAAC;IAC3BV,YAAY,CAAC,IAAIC,GAAG,CAAC,CAACS,WAAW,CAAC,CAAC,CAAC;IAEpC,IAAIR,QAAQ,CAACU,OAAO,EAAE;MACpBV,QAAQ,CAACU,OAAO,CAACC,KAAK,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAAChD,UAAU,EAAEsC,wBAAwB,CAAC,CAAC;;EAE1C;EACA,MAAMW,YAAY,GAAG1D,WAAW,CAAC,MAAM;IACrC,IAAI,CAACmB,SAAS,EAAE,OAAO,CAAC;;IAExB;IACA,MAAMwC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG1C,SAAS;IAC5C,MAAM2C,kBAAkB,GAAGH,aAAa,IAAI,IAAI,GAAG,EAAE,CAAC;;IAEtD;IACA,MAAMI,SAAS,GAAGxC,YAAY,GAAG,CAAC;;IAElC;IACA,OAAO2B,IAAI,CAACc,KAAK,CAACD,SAAS,IAAID,kBAAkB,IAAI,CAAC,CAAC,CAAC;EAC1D,CAAC,EAAE,CAACvC,YAAY,EAAEJ,SAAS,CAAC,CAAC;;EAE7B;EACA,MAAM8C,oBAAoB,GAAGjE,WAAW,CAAC,MAAM;IAC7C;IACA,IAAI,CAACqC,WAAW,IAAIN,GAAG,IAAI,CAAC,EAAE;MAC5B,OAAO,CAAC;IACV;;IAEA;IACA,MAAMmC,eAAe,GAAIzB,eAAe,GAAG/B,eAAe,GAAI,GAAG;;IAEjE;IACA,OAAOwC,IAAI,CAACiB,GAAG,CAACjB,IAAI,CAACkB,GAAG,CAACF,eAAe,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;EACpD,CAAC,EAAE,CAAC7B,WAAW,EAAEN,GAAG,EAAEU,eAAe,EAAE/B,eAAe,CAAC,CAAC;;EAExD;EACA,MAAM2D,WAAW,GAAGrE,WAAW,CAAC,MAAM;IACpC,IAAI;MACF;MACA,IAAIyC,eAAe,IAAI/B,eAAe,EAAE;QACtC,OAAO,KAAK;MACd;;MAEA;MACA,MAAM4D,QAAQ,GAAGvB,wBAAwB,CAAC,CAAC;;MAE3C;MACA,MAAMwB,cAAc,GAAGD,QAAQ,CAACE,MAAM,CACpCjB,IAAI,IAAI,CAACkB,KAAK,CAACC,IAAI,CAAC/B,SAAS,CAAC,CAACgC,QAAQ,CAACpB,IAAI,CAACA,IAAI,CACnD,CAAC;;MAED;MACA,IAAIqB,QAAgB;MACpB,IAAIL,cAAc,CAAClB,MAAM,GAAG,CAAC,EAAE;QAC7B,MAAMJ,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGmB,cAAc,CAAClB,MAAM,CAAC;QACrEuB,QAAQ,GAAGL,cAAc,CAACtB,WAAW,CAAC,CAACM,IAAI;MAC7C,CAAC,MAAM;QACL;QACA,MAAMsB,uBAAuB,GAAGP,QAAQ,CAACQ,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAC9D,MAAMC,WAAW,GAAGC,uBAAuB,CAACH,CAAC,CAACzB,IAAI,EAAExC,WAAW,CAAC;UAChE,MAAMqE,WAAW,GAAGD,uBAAuB,CAACF,CAAC,CAAC1B,IAAI,EAAExC,WAAW,CAAC;UAChE,OAAOmE,WAAW,GAAGE,WAAW;QAClC,CAAC,CAAC;QACFR,QAAQ,GAAGC,uBAAuB,CAAC,CAAC,CAAC,CAACtB,IAAI;MAC5C;;MAEA;MACAX,YAAY,CAACyC,aAAa,IAAI,IAAIxC,GAAG,CAAC,CAAC,GAAG4B,KAAK,CAACC,IAAI,CAACW,aAAa,CAAC,EAAET,QAAQ,CAAC,CAAC,CAAC;;MAEhF;MACA1D,WAAW,CAACoE,IAAI,IAAIA,IAAI,GAAG,KAAK,GAAGV,QAAQ,CAAC;;MAE5C;MACA5D,cAAc,CAACuE,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAAC3E,SAAS,CAACwC,MAAM,CAAC,GAAG,KAAK,GAAGuB,QAAQ,CAAC;MAEnF,OAAO,IAAI;IACb,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,KAAK;IACd;EACF,CAAC,EAAE,CAAC1E,WAAW,EAAEgC,wBAAwB,EAAElC,SAAS,EAAE4B,eAAe,EAAE/B,eAAe,EAAEiC,SAAS,CAAC,CAAC;;EAEnG;EACA,MAAMwC,uBAAuB,GAAGnF,WAAW,CAAC,CAAC2F,KAAa,EAAEC,KAAa,KAAK;IAC5E;IACA,MAAMC,MAAM,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC;IAC/C,MAAMC,MAAM,GAAGJ,KAAK,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC;;IAE/C;IACA,MAAME,IAAI,GAAG,IAAIpD,GAAG,CAACgD,MAAM,CAAC;IAC5B,MAAMK,IAAI,GAAG,IAAIrD,GAAG,CAACmD,MAAM,CAAC;;IAE5B;IACA,MAAMG,WAAW,GAAG1B,KAAK,CAACC,IAAI,CAACuB,IAAI,CAAC,CAACzB,MAAM,CAAC4B,IAAI,IAAIF,IAAI,CAACG,GAAG,CAACD,IAAI,CAAC,CAAC,CAAC/C,MAAM;;IAE1E;IACA,MAAMiD,gBAAgB,GAAG,IAAIzD,GAAG,CAAC,CAAC,GAAGgD,MAAM,EAAE,GAAGG,MAAM,CAAC,CAAC,CAACO,IAAI;IAC7D,OAAOD,gBAAgB,KAAK,CAAC,GAAG,CAAC,GAAGH,WAAW,GAAGG,gBAAgB;EACpE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,iBAAiB,GAAGxG,WAAW,CAAEyG,CAAsC,IAAK;IAChF,MAAMC,UAAU,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;;IAEjC;IACA,IAAI,CAACzF,SAAS,IAAIuF,UAAU,CAACrD,MAAM,KAAK,CAAC,EAAE;MACzCjC,YAAY,CAACwC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MACxBvB,cAAc,CAAC,IAAI,CAAC;IACtB;;IAEA;IACA,IAAIvB,WAAW,CAACsC,MAAM,KAAK,CAAC,EAAE;IAE9B,IAAIwD,YAAY,GAAG,CAAC;IACpB,IAAIC,cAAc,GAAG,CAAC;;IAEtB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,UAAU,CAACrD,MAAM,EAAE0D,CAAC,EAAE,EAAE;MAC1C,IAAIA,CAAC,GAAGhG,WAAW,CAACsC,MAAM,EAAE;QAC1B,IAAIqD,UAAU,CAACK,CAAC,CAAC,KAAKhG,WAAW,CAACgG,CAAC,CAAC,EAAE;UACpCF,YAAY,EAAE;QAChB,CAAC,MAAM;UACLC,cAAc,EAAE;QAClB;MACF,CAAC,MAAM;QACL;QACAA,cAAc,EAAE;MAClB;IACF;;IAEA;IACAhG,YAAY,CAAC4F,UAAU,CAAC;IACxBlF,eAAe,CAACwF,WAAW,IAAIA,WAAW,IAAIH,YAAY,IAAItF,YAAY,GAAG,CAAC,GAAGA,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;IACpGG,iBAAiB,CAACuF,aAAa,IAAIA,aAAa,GAAGH,cAAc,IAAIrF,cAAc,GAAG,CAAC,GAAGA,cAAc,GAAG,CAAC,CAAC,CAAC;;IAE9G;IACAK,kBAAkB,CAAC4E,UAAU,CAACrD,MAAM,CAAC;;IAErC;IACA,MAAM6D,UAAU,GAAGhE,IAAI,CAACC,KAAK,CAACuD,UAAU,CAACrD,MAAM,GAAG,CAAC,CAAC;IACpDX,kBAAkB,CAACyE,SAAS,IAAIjE,IAAI,CAACkB,GAAG,CAAC+C,SAAS,EAAED,UAAU,CAAC,CAAC;;IAEhE;IACA,MAAME,UAAU,GAAG7F,YAAY,GAAGE,cAAc;IAChD,IAAI2F,UAAU,GAAG,CAAC,EAAE;MAClBlF,WAAW,CAACgB,IAAI,CAACc,KAAK,CAAEzC,YAAY,GAAG6F,UAAU,GAAI,GAAG,CAAC,CAAC;IAC5D;;IAEA;IACA,MAAMC,UAAU,GAAG3D,YAAY,CAAC,CAAC;IACjC1B,MAAM,CAACqF,UAAU,CAAC;;IAElB;IACA,MAAMC,cAAc,GAAGrD,oBAAoB,CAAC,CAAC;IAC7C7B,cAAc,CAACkF,cAAc,CAAC;;IAE9B;IACA,IAAIZ,UAAU,CAACrD,MAAM,IAAItC,WAAW,CAACsC,MAAM,EAAE;MAC3C;MACA,IAAIZ,eAAe,GAAG/B,eAAe,EAAE;QACrC2D,WAAW,CAAC,CAAC;QACbvD,YAAY,CAAC,EAAE,CAAC;MAClB,CAAC,MAAM;QACL;QACAQ,UAAU,CAACsC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;QACtBrB,eAAe,CAAC,IAAI,CAAC;QACrB7B,cAAc,CAAC;UAAEoB,GAAG;UAAEE;QAAS,CAAC,CAAC;MACnC;IACF,CAAC,MAAM;MACL;MACAL,cAAc,CAACb,WAAW,CAAC2F,UAAU,CAACrD,MAAM,CAAC,IAAI,EAAE,CAAC;IACtD;EACF,CAAC,EAAE,CACDlC,SAAS,EAAEJ,WAAW,EAAEQ,YAAY,EAAEE,cAAc,EACpDiC,YAAY,EAAEO,oBAAoB,EAAExB,eAAe,EACnD/B,eAAe,EAAE2D,WAAW,EAAEtC,GAAG,EAAEE,QAAQ,EAAEtB,cAAc,CAC5D,CAAC;;EAEF;EACAb,SAAS,CAAC,MAAM;IACd,IAAIgD,QAAQ,CAACU,OAAO,EAAE;MACpBV,QAAQ,CAACU,OAAO,CAACC,KAAK,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM8D,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIC,YAAY,GAAG,EAAE;IAErB,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhG,WAAW,CAACsC,MAAM,EAAE0D,CAAC,EAAE,EAAE;MAC3C;MACA,IAAIU,SAAS,GAAG,aAAa;MAE7B,IAAIV,CAAC,GAAGlG,SAAS,CAACwC,MAAM,EAAE;QACxBoE,SAAS,GAAG5G,SAAS,CAACkG,CAAC,CAAC,KAAKhG,WAAW,CAACgG,CAAC,CAAC,GAAG,cAAc,GAAG,gBAAgB;MACjF,CAAC,MAAM,IAAIA,CAAC,KAAKlG,SAAS,CAACwC,MAAM,EAAE;QACjCoE,SAAS,GAAG,cAAc;MAC5B;;MAEA;MACAD,YAAY,CAACE,IAAI,cACfnH,OAAA;QAAckH,SAAS,EAAEA,SAAU;QAAAE,QAAA,EAChC5G,WAAW,CAACgG,CAAC;MAAC,GADNA,CAAC;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEN,CACR,CAAC;IACH;IAEA,OAAOP,YAAY;EACrB,CAAC;EAED,oBACEjH,OAAA;IAAKkH,SAAS,EAAC,aAAa;IAAAE,QAAA,gBAC1BpH,OAAA;MAAKkH,SAAS,EAAC,OAAO;MAAAE,QAAA,gBACpBpH,OAAA;QAAKkH,SAAS,EAAC,MAAM;QAAAE,QAAA,gBACnBpH,OAAA;UAAMkH,SAAS,EAAC,YAAY;UAAAE,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACxCxH,OAAA;UAAMkH,SAAS,EAAC,YAAY;UAAAE,QAAA,EAAE5F;QAAG;UAAA6F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,eACNxH,OAAA;QAAKkH,SAAS,EAAC,MAAM;QAAAE,QAAA,gBACnBpH,OAAA;UAAMkH,SAAS,EAAC,YAAY;UAAAE,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC7CxH,OAAA;UAAMkH,SAAS,EAAC,YAAY;UAAAE,QAAA,GAAE1F,QAAQ,EAAC,GAAC;QAAA;UAAA2F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,eACNxH,OAAA;QAAKkH,SAAS,EAAC,MAAM;QAAAE,QAAA,gBACnBpH,OAAA;UAAMkH,SAAS,EAAC,YAAY;UAAAE,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC7CxH,OAAA;UAAMkH,SAAS,EAAC,YAAY;UAAAE,QAAA,GAAEzE,IAAI,CAACiB,GAAG,CAACjB,IAAI,CAACc,KAAK,CAAEvB,eAAe,GAAG/B,eAAe,GAAI,GAAG,CAAC,EAAE,GAAG,CAAC,EAAC,GAAC;QAAA;UAAAkH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENxH,OAAA;MAAKkH,SAAS,EAAC,cAAc;MAAAE,QAAA,EAC1BJ,UAAU,CAAC;IAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eAENxH,OAAA;MACEyH,GAAG,EAAElF,QAAS;MACdmF,IAAI,EAAC,MAAM;MACXR,SAAS,EAAC,cAAc;MACxBb,KAAK,EAAE/F,SAAU;MACjBqH,QAAQ,EAAE1B,iBAAkB;MAC5B2B,QAAQ,EAAE5F,YAAa;MACvB6F,WAAW,EAAC;IAAiB;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eAEFxH,OAAA,CAACN,SAAS;MACRkC,WAAW,EAAEA,WAAY;MACzBI,YAAY,EAAEA;IAAa;MAAAqF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,EAEDxF,YAAY,iBACXhC,OAAA,CAACL,OAAO;MACN6B,GAAG,EAAEA,GAAI;MACTE,QAAQ,EAAEA,QAAS;MACnBoG,WAAW,EAAElH,SAAS,IAAIE,OAAO,GAAG,CAACA,OAAO,GAAGF,SAAS,IAAI,IAAI,GAAG;IAAE;MAAAyG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnH,EAAA,CA7TIJ,UAAqC;AAAA8H,EAAA,GAArC9H,UAAqC;AA+T3C,eAAeA,UAAU;AAAC,IAAA8H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}