{"ast":null,"code":"var _jsxFileName = \"/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n`;\n_c = GameContainer;\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 20px;\n  padding: 15px;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n`;\n_c2 = TextContainer;\nconst HighlightedText = styled.span`\n  background-color: ${props => props.isCurrent ? '#ffff99' : 'transparent'};\n  color: ${props => {\n  if (props.isCurrent) return 'black';\n  return props.isCorrect ? '#2ecc71' : '#e74c3c';\n}};\n  text-decoration: ${props => !props.isCorrect && !props.isCurrent ? 'line-through' : 'none'};\n`;\n_c3 = HighlightedText;\nconst UnusedText = styled.span`\n  color: #777;\n`;\n_c4 = UnusedText;\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 15px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 5px;\n  resize: none;\n  height: 100px;\n  margin-bottom: 20px;\n  &:focus {\n    outline: none;\n    border-color: #3498db;\n  }\n`;\n_c5 = InputArea;\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n_c6 = StatContainer;\nconst Stat = styled.div`\n  text-align: center;\n`;\n_c7 = Stat;\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n_c8 = StatLabel;\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n_c9 = StatValue;\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 15px;\n  font-size: 0.9rem;\n`;\n_c10 = ErrorMessage;\nconst TypingGame = ({\n  text,\n  timeSetting,\n  difficulty,\n  onEndGame\n}) => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [startTime, setStartTime] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(timeSetting);\n  const [typingStarted, setTypingStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [correctChars, setCorrectChars] = useState(0);\n  const [incorrectChars, setIncorrectChars] = useState(0);\n  const [wordsTyped, setWordsTyped] = useState(0);\n  const [charsTyped, setCharsTyped] = useState(0);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(100);\n  const [carPosition, setCarPosition] = useState(0);\n  const [error, setError] = useState(null);\n  const inputRef = useRef(null);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const wordsTyped = inputText.trim().split(/\\s+/).length;\n      return timeElapsed > 0 ? Math.round(wordsTyped / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText]);\n\n  // Calculate car position based on typing speed using non-linear formula\n  const calculateCarPosition = useCallback(currentWpm => {\n    try {\n      // Non-linear formula: position = (wpm^1.5) / 10\n      // This makes faster typing disproportionately increase car speed\n      const position = Math.pow(currentWpm, 1.5) / 10;\n\n      // Normalize to percentage (0-100)\n      const maxPosition = Math.pow(150, 1.5) / 10; // Max WPM reference point\n      return Math.min(position / maxPosition * 100, 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, []);\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        for (let i = 0; i < inputText.length; i++) {\n          if (i < text.length) {\n            if (inputText[i] === text[i]) {\n              correct++;\n            } else {\n              incorrect++;\n            }\n          }\n        }\n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n\n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round(correct / totalChars * 100) : 100);\n\n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n\n        // Update car position\n        setCarPosition(calculateCarPosition(currentWpm));\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, text, typingStarted, gameOver, calculateSpeed, calculateCarPosition]);\n\n  // Timer countdown\n  useEffect(() => {\n    try {\n      if (typingStarted && timeLeft > 0 && !gameOver) {\n        const timer = setTimeout(() => {\n          setTimeLeft(prev => prev - 1);\n        }, 1000);\n        return () => clearTimeout(timer);\n      } else if (timeLeft === 0 && !gameOver) {\n        setGameOver(true);\n      }\n    } catch (error) {\n      console.error(\"Error in timer countdown:\", error);\n      setError(\"Error with the game timer. Please restart the game.\");\n    }\n  }, [typingStarted, timeLeft, gameOver]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // Score formula: (correctChars * wordsTyped) / (maxScore / 10000)\n      // This ensures the max score is 10000\n      const rawScore = correctChars * wordsTyped;\n\n      // Adjust the divisor based on difficulty and time\n      let divisor;\n\n      // Base divisor values for each difficulty\n      const baseDivisors = {\n        easy: 0.5,\n        medium: 1,\n        hard: 2\n      };\n\n      // Adjust for time setting\n      const timeMultiplier = timeSetting / 60;\n      divisor = baseDivisors[difficulty] * timeMultiplier;\n\n      // Normalize score to max 10000\n      return Math.min(Math.round(rawScore / divisor), 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = e => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n      for (let i = 0; i < text.length; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && text[i] === inputText[i];\n        if (isTyped) {\n          elements.push(/*#__PURE__*/_jsxDEV(HighlightedText, {\n            isCorrect: isCorrect,\n            isCurrent: isCurrent,\n            children: text[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this));\n        } else if (isCurrent) {\n          elements.push(/*#__PURE__*/_jsxDEV(HighlightedText, {\n            isCorrect: true,\n            isCurrent: true,\n            children: text[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this));\n        } else {\n          elements.push(/*#__PURE__*/_jsxDEV(UnusedText, {\n            children: text[i]\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this));\n        }\n      }\n      return elements;\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error rendering text. Please restart the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !gameOver ? /*#__PURE__*/_jsxDEV(GameContainer, {\n      children: [error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(StatContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Time Left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: [timeLeft, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"WPM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: wpm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Accuracy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: [accuracy, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Words\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: wordsTyped\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stat, {\n          children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n            children: \"Characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n            children: charsTyped\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: renderText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InputArea, {\n        ref: inputRef,\n        value: inputText,\n        onChange: handleInputChange,\n        placeholder: \"Start typing here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RaceTrack, {\n        position: carPosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Results, {\n      wpm: wpm,\n      accuracy: accuracy,\n      correctChars: correctChars,\n      incorrectChars: incorrectChars,\n      wordsTyped: wordsTyped,\n      score: calculateScore(),\n      difficulty: difficulty,\n      timeSetting: timeSetting,\n      onPlayAgain: onEndGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingGame, \"jYMcF13Rn/E1sC19dNpPNzhT1/k=\");\n_c11 = TypingGame;\nexport default TypingGame;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"GameContainer\");\n$RefreshReg$(_c2, \"TextContainer\");\n$RefreshReg$(_c3, \"HighlightedText\");\n$RefreshReg$(_c4, \"UnusedText\");\n$RefreshReg$(_c5, \"InputArea\");\n$RefreshReg$(_c6, \"StatContainer\");\n$RefreshReg$(_c7, \"Stat\");\n$RefreshReg$(_c8, \"StatLabel\");\n$RefreshReg$(_c9, \"StatValue\");\n$RefreshReg$(_c10, \"ErrorMessage\");\n$RefreshReg$(_c11, \"TypingGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","styled","RaceTrack","Results","jsxDEV","_jsxDEV","GameContainer","div","_c","TextContainer","_c2","HighlightedText","span","props","isCurrent","isCorrect","_c3","UnusedText","_c4","InputArea","textarea","_c5","StatContainer","_c6","Stat","_c7","StatLabel","_c8","StatValue","_c9","ErrorMessage","_c10","TypingGame","text","timeSetting","difficulty","onEndGame","_s","inputText","setInputText","startTime","setStartTime","timeLeft","setTimeLeft","typingStarted","setTypingStarted","gameOver","setGameOver","correctChars","setCorrectChars","incorrectChars","setIncorrectChars","wordsTyped","setWordsTyped","charsTyped","setCharsTyped","wpm","setWpm","accuracy","setAccuracy","carPosition","setCarPosition","error","setError","inputRef","calculateSpeed","timeElapsed","Date","now","trim","split","length","Math","round","console","calculateCarPosition","currentWpm","position","pow","maxPosition","min","correct","incorrect","i","totalChars","timer","setTimeout","prev","clearTimeout","current","focus","calculateScore","rawScore","divisor","baseDivisors","easy","medium","hard","timeMultiplier","handleInputChange","e","target","value","renderText","elements","isTyped","push","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onChange","placeholder","score","onPlayAgain","_c11","$RefreshReg$"],"sources":["/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { Difficulty, TimeSetting } from '../App';\n\ninterface TypingGameProps {\n  text: string;\n  timeSetting: TimeSetting;\n  difficulty: Difficulty;\n  onEndGame: () => void;\n}\n\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n`;\n\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 20px;\n  padding: 15px;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n`;\n\nconst HighlightedText = styled.span<{ isCorrect: boolean; isCurrent: boolean }>`\n  background-color: ${props => props.isCurrent ? '#ffff99' : 'transparent'};\n  color: ${props => {\n    if (props.isCurrent) return 'black';\n    return props.isCorrect ? '#2ecc71' : '#e74c3c';\n  }};\n  text-decoration: ${props => (!props.isCorrect && !props.isCurrent) ? 'line-through' : 'none'};\n`;\n\nconst UnusedText = styled.span`\n  color: #777;\n`;\n\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 15px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 5px;\n  resize: none;\n  height: 100px;\n  margin-bottom: 20px;\n  &:focus {\n    outline: none;\n    border-color: #3498db;\n  }\n`;\n\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n\nconst Stat = styled.div`\n  text-align: center;\n`;\n\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 15px;\n  font-size: 0.9rem;\n`;\n\nconst TypingGame: React.FC<TypingGameProps> = ({\n  text,\n  timeSetting,\n  difficulty,\n  onEndGame\n}) => {\n  const [inputText, setInputText] = useState<string>('');\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [timeLeft, setTimeLeft] = useState<number>(timeSetting);\n  const [typingStarted, setTypingStarted] = useState<boolean>(false);\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [correctChars, setCorrectChars] = useState<number>(0);\n  const [incorrectChars, setIncorrectChars] = useState<number>(0);\n  const [wordsTyped, setWordsTyped] = useState<number>(0);\n  const [charsTyped, setCharsTyped] = useState<number>(0);\n  const [wpm, setWpm] = useState<number>(0);\n  const [accuracy, setAccuracy] = useState<number>(100);\n  const [carPosition, setCarPosition] = useState<number>(0);\n  const [error, setError] = useState<string | null>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      \n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const wordsTyped = inputText.trim().split(/\\s+/).length;\n      \n      return timeElapsed > 0 ? Math.round(wordsTyped / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText]);\n\n  // Calculate car position based on typing speed using non-linear formula\n  const calculateCarPosition = useCallback((currentWpm: number) => {\n    try {\n      // Non-linear formula: position = (wpm^1.5) / 10\n      // This makes faster typing disproportionately increase car speed\n      const position = Math.pow(currentWpm, 1.5) / 10;\n      \n      // Normalize to percentage (0-100)\n      const maxPosition = Math.pow(150, 1.5) / 10; // Max WPM reference point\n      return Math.min((position / maxPosition) * 100, 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, []);\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        \n        for (let i = 0; i < inputText.length; i++) {\n          if (i < text.length) {\n            if (inputText[i] === text[i]) {\n              correct++;\n            } else {\n              incorrect++;\n            }\n          }\n        }\n        \n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n        \n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round((correct / totalChars) * 100) : 100);\n        \n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n        \n        // Update car position\n        setCarPosition(calculateCarPosition(currentWpm));\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, text, typingStarted, gameOver, calculateSpeed, calculateCarPosition]);\n\n  // Timer countdown\n  useEffect(() => {\n    try {\n      if (typingStarted && timeLeft > 0 && !gameOver) {\n        const timer = setTimeout(() => {\n          setTimeLeft(prev => prev - 1);\n        }, 1000);\n        \n        return () => clearTimeout(timer);\n      } else if (timeLeft === 0 && !gameOver) {\n        setGameOver(true);\n      }\n    } catch (error) {\n      console.error(\"Error in timer countdown:\", error);\n      setError(\"Error with the game timer. Please restart the game.\");\n    }\n  }, [typingStarted, timeLeft, gameOver]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // Score formula: (correctChars * wordsTyped) / (maxScore / 10000)\n      // This ensures the max score is 10000\n      const rawScore = correctChars * wordsTyped;\n      \n      // Adjust the divisor based on difficulty and time\n      let divisor;\n      \n      // Base divisor values for each difficulty\n      const baseDivisors = {\n        easy: 0.5,\n        medium: 1,\n        hard: 2\n      };\n      \n      // Adjust for time setting\n      const timeMultiplier = timeSetting / 60;\n      \n      divisor = baseDivisors[difficulty] * timeMultiplier;\n      \n      // Normalize score to max 10000\n      return Math.min(Math.round(rawScore / divisor), 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n      \n      for (let i = 0; i < text.length; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && text[i] === inputText[i];\n        \n        if (isTyped) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={isCorrect} isCurrent={isCurrent}>\n              {text[i]}\n            </HighlightedText>\n          );\n        } else if (isCurrent) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={true} isCurrent={true}>\n              {text[i]}\n            </HighlightedText>\n          );\n        } else {\n          elements.push(\n            <UnusedText key={i}>\n              {text[i]}\n            </UnusedText>\n          );\n        }\n      }\n      \n      return elements;\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return <div>Error rendering text. Please restart the game.</div>;\n    }\n  };\n\n  return (\n    <div>\n      {!gameOver ? (\n        <GameContainer>\n          {error && <ErrorMessage>{error}</ErrorMessage>}\n          \n          <StatContainer>\n            <Stat>\n              <StatLabel>Time Left</StatLabel>\n              <StatValue>{timeLeft}s</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>WPM</StatLabel>\n              <StatValue>{wpm}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Accuracy</StatLabel>\n              <StatValue>{accuracy}%</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Words</StatLabel>\n              <StatValue>{wordsTyped}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Characters</StatLabel>\n              <StatValue>{charsTyped}</StatValue>\n            </Stat>\n          </StatContainer>\n          \n          <TextContainer>\n            {renderText()}\n          </TextContainer>\n          \n          <InputArea\n            ref={inputRef}\n            value={inputText}\n            onChange={handleInputChange}\n            placeholder=\"Start typing here...\"\n          />\n          \n          <RaceTrack position={carPosition} />\n        </GameContainer>\n      ) : (\n        <Results\n          wpm={wpm}\n          accuracy={accuracy}\n          correctChars={correctChars}\n          incorrectChars={incorrectChars}\n          wordsTyped={wordsTyped}\n          score={calculateScore()}\n          difficulty={difficulty}\n          timeSetting={timeSetting}\n          onPlayAgain={onEndGame}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default TypingGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}