{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback}from'react';import styled from'styled-components';import RaceTrack from'./RaceTrack';import Results from'./Results';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GameContainer=styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n`;const TextContainer=styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 20px;\n  padding: 15px;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n`;const HighlightedText=styled.span`\n  background-color: ${props=>props.isCurrent?'#ffff99':'transparent'};\n  color: ${props=>{if(props.isCurrent)return'black';return props.isCorrect?'#2ecc71':'#e74c3c';}};\n  text-decoration: ${props=>!props.isCorrect&&!props.isCurrent?'line-through':'none'};\n`;const UnusedText=styled.span`\n  color: #777;\n`;const InputArea=styled.textarea`\n  width: 100%;\n  padding: 15px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 5px;\n  resize: none;\n  height: 100px;\n  margin-bottom: 20px;\n  &:focus {\n    outline: none;\n    border-color: #3498db;\n  }\n`;const StatContainer=styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;const Stat=styled.div`\n  text-align: center;\n`;const StatLabel=styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;const StatValue=styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;const ErrorMessage=styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 15px;\n  font-size: 0.9rem;\n`;const TypingGame=_ref=>{let{text,timeSetting,difficulty,onEndGame}=_ref;const[inputText,setInputText]=useState('');const[startTime,setStartTime]=useState(null);const[timeLeft,setTimeLeft]=useState(timeSetting);const[typingStarted,setTypingStarted]=useState(false);const[gameOver,setGameOver]=useState(false);const[correctChars,setCorrectChars]=useState(0);const[incorrectChars,setIncorrectChars]=useState(0);const[wordsTyped,setWordsTyped]=useState(0);const[charsTyped,setCharsTyped]=useState(0);const[wpm,setWpm]=useState(0);const[accuracy,setAccuracy]=useState(100);const[carPosition,setCarPosition]=useState(0);const[error,setError]=useState(null);const inputRef=useRef(null);// Calculate typing speed\nconst calculateSpeed=useCallback(()=>{try{if(!startTime)return 0;const timeElapsed=(Date.now()-startTime)/1000/60;// in minutes\nconst wordsTyped=inputText.trim().split(/\\s+/).length;return timeElapsed>0?Math.round(wordsTyped/timeElapsed):0;}catch(error){console.error(\"Error calculating typing speed:\",error);setError(\"Error calculating typing speed. Please try again.\");return 0;}},[startTime,inputText]);// Calculate car position based on typing speed using non-linear formula\nconst calculateCarPosition=useCallback(currentWpm=>{try{// Non-linear formula: position = (wpm^1.5) / 10\n// This makes faster typing disproportionately increase car speed\nconst position=Math.pow(currentWpm,1.5)/10;// Normalize to percentage (0-100)\nconst maxPosition=Math.pow(150,1.5)/10;// Max WPM reference point\nreturn Math.min(position/maxPosition*100,100);}catch(error){console.error(\"Error calculating car position:\",error);return 0;// Default position\n}},[]);// Update stats on text input\nuseEffect(()=>{try{if(!typingStarted&&inputText.length>0){setTypingStarted(true);setStartTime(Date.now());}if(typingStarted&&!gameOver){// Calculate correct and incorrect characters\nlet correct=0;let incorrect=0;for(let i=0;i<inputText.length;i++){if(i<text.length){if(inputText[i]===text[i]){correct++;}else{incorrect++;}}}setCorrectChars(correct);setIncorrectChars(incorrect);setCharsTyped(inputText.length);setWordsTyped(inputText.trim().split(/\\s+/).length);// Calculate accuracy\nconst totalChars=correct+incorrect;setAccuracy(totalChars>0?Math.round(correct/totalChars*100):100);// Calculate WPM\nconst currentWpm=calculateSpeed();setWpm(currentWpm);// Update car position\nsetCarPosition(calculateCarPosition(currentWpm));}}catch(error){console.error(\"Error updating typing statistics:\",error);setError(\"Error updating statistics. Game will continue, but results might be affected.\");}},[inputText,text,typingStarted,gameOver,calculateSpeed,calculateCarPosition]);// Timer countdown\nuseEffect(()=>{try{if(typingStarted&&timeLeft>0&&!gameOver){const timer=setTimeout(()=>{setTimeLeft(prev=>prev-1);},1000);return()=>clearTimeout(timer);}else if(timeLeft===0&&!gameOver){setGameOver(true);}}catch(error){console.error(\"Error in timer countdown:\",error);setError(\"Error with the game timer. Please restart the game.\");}},[typingStarted,timeLeft,gameOver]);// Auto-focus input field\nuseEffect(()=>{try{if(inputRef.current){inputRef.current.focus();}}catch(error){console.error(\"Error focusing input field:\",error);}},[]);// Calculate final score\nconst calculateScore=()=>{try{// Score formula: (correctChars * wordsTyped) / (maxScore / 10000)\n// This ensures the max score is 10000\nconst rawScore=correctChars*wordsTyped;// Adjust the divisor based on difficulty and time\nlet divisor;// Base divisor values for each difficulty\nconst baseDivisors={easy:0.5,medium:1,hard:2};// Adjust for time setting\nconst timeMultiplier=timeSetting/60;divisor=baseDivisors[difficulty]*timeMultiplier;// Normalize score to max 10000\nreturn Math.min(Math.round(rawScore/divisor),10000);}catch(error){console.error(\"Error calculating score:\",error);return 0;// Default score\n}};// Handle input change\nconst handleInputChange=e=>{try{if(!gameOver){setInputText(e.target.value);}}catch(error){console.error(\"Error handling input change:\",error);setError(\"Error processing your typing. Please try again.\");}};// Render text with highlighting\nconst renderText=()=>{try{const elements=[];for(let i=0;i<text.length;i++){const isCurrent=i===inputText.length;const isTyped=i<inputText.length;const isCorrect=isTyped&&text[i]===inputText[i];if(isTyped){elements.push(/*#__PURE__*/_jsx(HighlightedText,{isCorrect:isCorrect,isCurrent:isCurrent,children:text[i]},i));}else if(isCurrent){elements.push(/*#__PURE__*/_jsx(HighlightedText,{isCorrect:true,isCurrent:true,children:text[i]},i));}else{elements.push(/*#__PURE__*/_jsx(UnusedText,{children:text[i]},i));}}return elements;}catch(error){console.error(\"Error rendering text:\",error);return/*#__PURE__*/_jsx(\"div\",{children:\"Error rendering text. Please restart the game.\"});}};return/*#__PURE__*/_jsx(\"div\",{children:!gameOver?/*#__PURE__*/_jsxs(GameContainer,{children:[error&&/*#__PURE__*/_jsx(ErrorMessage,{children:error}),/*#__PURE__*/_jsxs(StatContainer,{children:[/*#__PURE__*/_jsxs(Stat,{children:[/*#__PURE__*/_jsx(StatLabel,{children:\"Time Left\"}),/*#__PURE__*/_jsxs(StatValue,{children:[timeLeft,\"s\"]})]}),/*#__PURE__*/_jsxs(Stat,{children:[/*#__PURE__*/_jsx(StatLabel,{children:\"WPM\"}),/*#__PURE__*/_jsx(StatValue,{children:wpm})]}),/*#__PURE__*/_jsxs(Stat,{children:[/*#__PURE__*/_jsx(StatLabel,{children:\"Accuracy\"}),/*#__PURE__*/_jsxs(StatValue,{children:[accuracy,\"%\"]})]}),/*#__PURE__*/_jsxs(Stat,{children:[/*#__PURE__*/_jsx(StatLabel,{children:\"Words\"}),/*#__PURE__*/_jsx(StatValue,{children:wordsTyped})]}),/*#__PURE__*/_jsxs(Stat,{children:[/*#__PURE__*/_jsx(StatLabel,{children:\"Characters\"}),/*#__PURE__*/_jsx(StatValue,{children:charsTyped})]})]}),/*#__PURE__*/_jsx(TextContainer,{children:renderText()}),/*#__PURE__*/_jsx(InputArea,{ref:inputRef,value:inputText,onChange:handleInputChange,placeholder:\"Start typing here...\"}),/*#__PURE__*/_jsx(RaceTrack,{position:carPosition})]}):/*#__PURE__*/_jsx(Results,{wpm:wpm,accuracy:accuracy,correctChars:correctChars,incorrectChars:incorrectChars,wordsTyped:wordsTyped,score:calculateScore(),difficulty:difficulty,timeSetting:timeSetting,onPlayAgain:onEndGame})});};export default TypingGame;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","styled","RaceTrack","Results","jsx","_jsx","jsxs","_jsxs","GameContainer","div","TextContainer","HighlightedText","span","props","isCurrent","isCorrect","UnusedText","InputArea","textarea","StatContainer","Stat","StatLabel","StatValue","ErrorMessage","TypingGame","_ref","text","timeSetting","difficulty","onEndGame","inputText","setInputText","startTime","setStartTime","timeLeft","setTimeLeft","typingStarted","setTypingStarted","gameOver","setGameOver","correctChars","setCorrectChars","incorrectChars","setIncorrectChars","wordsTyped","setWordsTyped","charsTyped","setCharsTyped","wpm","setWpm","accuracy","setAccuracy","carPosition","setCarPosition","error","setError","inputRef","calculateSpeed","timeElapsed","Date","now","trim","split","length","Math","round","console","calculateCarPosition","currentWpm","position","pow","maxPosition","min","correct","incorrect","i","totalChars","timer","setTimeout","prev","clearTimeout","current","focus","calculateScore","rawScore","divisor","baseDivisors","easy","medium","hard","timeMultiplier","handleInputChange","e","target","value","renderText","elements","isTyped","push","children","ref","onChange","placeholder","score","onPlayAgain"],"sources":["/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { Difficulty, TimeSetting } from '../App';\n\ninterface TypingGameProps {\n  text: string;\n  timeSetting: TimeSetting;\n  difficulty: Difficulty;\n  onEndGame: () => void;\n}\n\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  margin-bottom: 20px;\n`;\n\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 20px;\n  padding: 15px;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n`;\n\nconst HighlightedText = styled.span<{ isCorrect: boolean; isCurrent: boolean }>`\n  background-color: ${props => props.isCurrent ? '#ffff99' : 'transparent'};\n  color: ${props => {\n    if (props.isCurrent) return 'black';\n    return props.isCorrect ? '#2ecc71' : '#e74c3c';\n  }};\n  text-decoration: ${props => (!props.isCorrect && !props.isCurrent) ? 'line-through' : 'none'};\n`;\n\nconst UnusedText = styled.span`\n  color: #777;\n`;\n\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 15px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 5px;\n  resize: none;\n  height: 100px;\n  margin-bottom: 20px;\n  &:focus {\n    outline: none;\n    border-color: #3498db;\n  }\n`;\n\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n\nconst Stat = styled.div`\n  text-align: center;\n`;\n\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 15px;\n  font-size: 0.9rem;\n`;\n\nconst TypingGame: React.FC<TypingGameProps> = ({\n  text,\n  timeSetting,\n  difficulty,\n  onEndGame\n}) => {\n  const [inputText, setInputText] = useState<string>('');\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [timeLeft, setTimeLeft] = useState<number>(timeSetting);\n  const [typingStarted, setTypingStarted] = useState<boolean>(false);\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [correctChars, setCorrectChars] = useState<number>(0);\n  const [incorrectChars, setIncorrectChars] = useState<number>(0);\n  const [wordsTyped, setWordsTyped] = useState<number>(0);\n  const [charsTyped, setCharsTyped] = useState<number>(0);\n  const [wpm, setWpm] = useState<number>(0);\n  const [accuracy, setAccuracy] = useState<number>(100);\n  const [carPosition, setCarPosition] = useState<number>(0);\n  const [error, setError] = useState<string | null>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      \n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const wordsTyped = inputText.trim().split(/\\s+/).length;\n      \n      return timeElapsed > 0 ? Math.round(wordsTyped / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText]);\n\n  // Calculate car position based on typing speed using non-linear formula\n  const calculateCarPosition = useCallback((currentWpm: number) => {\n    try {\n      // Non-linear formula: position = (wpm^1.5) / 10\n      // This makes faster typing disproportionately increase car speed\n      const position = Math.pow(currentWpm, 1.5) / 10;\n      \n      // Normalize to percentage (0-100)\n      const maxPosition = Math.pow(150, 1.5) / 10; // Max WPM reference point\n      return Math.min((position / maxPosition) * 100, 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, []);\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        \n        for (let i = 0; i < inputText.length; i++) {\n          if (i < text.length) {\n            if (inputText[i] === text[i]) {\n              correct++;\n            } else {\n              incorrect++;\n            }\n          }\n        }\n        \n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n        \n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round((correct / totalChars) * 100) : 100);\n        \n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n        \n        // Update car position\n        setCarPosition(calculateCarPosition(currentWpm));\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, text, typingStarted, gameOver, calculateSpeed, calculateCarPosition]);\n\n  // Timer countdown\n  useEffect(() => {\n    try {\n      if (typingStarted && timeLeft > 0 && !gameOver) {\n        const timer = setTimeout(() => {\n          setTimeLeft(prev => prev - 1);\n        }, 1000);\n        \n        return () => clearTimeout(timer);\n      } else if (timeLeft === 0 && !gameOver) {\n        setGameOver(true);\n      }\n    } catch (error) {\n      console.error(\"Error in timer countdown:\", error);\n      setError(\"Error with the game timer. Please restart the game.\");\n    }\n  }, [typingStarted, timeLeft, gameOver]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // Score formula: (correctChars * wordsTyped) / (maxScore / 10000)\n      // This ensures the max score is 10000\n      const rawScore = correctChars * wordsTyped;\n      \n      // Adjust the divisor based on difficulty and time\n      let divisor;\n      \n      // Base divisor values for each difficulty\n      const baseDivisors = {\n        easy: 0.5,\n        medium: 1,\n        hard: 2\n      };\n      \n      // Adjust for time setting\n      const timeMultiplier = timeSetting / 60;\n      \n      divisor = baseDivisors[difficulty] * timeMultiplier;\n      \n      // Normalize score to max 10000\n      return Math.min(Math.round(rawScore / divisor), 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n      \n      for (let i = 0; i < text.length; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && text[i] === inputText[i];\n        \n        if (isTyped) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={isCorrect} isCurrent={isCurrent}>\n              {text[i]}\n            </HighlightedText>\n          );\n        } else if (isCurrent) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={true} isCurrent={true}>\n              {text[i]}\n            </HighlightedText>\n          );\n        } else {\n          elements.push(\n            <UnusedText key={i}>\n              {text[i]}\n            </UnusedText>\n          );\n        }\n      }\n      \n      return elements;\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return <div>Error rendering text. Please restart the game.</div>;\n    }\n  };\n\n  return (\n    <div>\n      {!gameOver ? (\n        <GameContainer>\n          {error && <ErrorMessage>{error}</ErrorMessage>}\n          \n          <StatContainer>\n            <Stat>\n              <StatLabel>Time Left</StatLabel>\n              <StatValue>{timeLeft}s</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>WPM</StatLabel>\n              <StatValue>{wpm}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Accuracy</StatLabel>\n              <StatValue>{accuracy}%</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Words</StatLabel>\n              <StatValue>{wordsTyped}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Characters</StatLabel>\n              <StatValue>{charsTyped}</StatValue>\n            </Stat>\n          </StatContainer>\n          \n          <TextContainer>\n            {renderText()}\n          </TextContainer>\n          \n          <InputArea\n            ref={inputRef}\n            value={inputText}\n            onChange={handleInputChange}\n            placeholder=\"Start typing here...\"\n          />\n          \n          <RaceTrack position={carPosition} />\n        </GameContainer>\n      ) : (\n        <Results\n          wpm={wpm}\n          accuracy={accuracy}\n          correctChars={correctChars}\n          incorrectChars={incorrectChars}\n          wordsTyped={wordsTyped}\n          score={calculateScore()}\n          difficulty={difficulty}\n          timeSetting={timeSetting}\n          onPlayAgain={onEndGame}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default TypingGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}