{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback}from'react';import styled from'styled-components';import RaceTrack from'./RaceTrack';import Results from'./Results';import{easyTexts}from'../data/easyTexts';import{mediumTexts}from'../data/mediumTexts';import{hardTexts}from'../data/hardTexts';import TimeDisplay from'./TimeDisplay';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GameContainer=styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 30px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  margin-bottom: 30px;\n`;const TextContainer=styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 25px;\n  padding: 20px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n  border: 2px solid #eee;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);\n  position: relative;\n  \n  &::before {\n    content: '📝';\n    position: absolute;\n    top: -10px;\n    left: 20px;\n    background-color: white;\n    padding: 0 10px;\n    font-size: 16px;\n  }\n`;const HighlightedText=styled.span`\n  background-color: ${props=>props.isCurrent?'rgba(255, 255, 153, 0.7)':'transparent'};\n  color: ${props=>{if(props.isCurrent)return'#333';return props.isCorrect?'#27ae60':'#e74c3c';}};\n  text-decoration: ${props=>!props.isCorrect&&!props.isCurrent?'line-through':'none'};\n  transition: all 0.15s ease;\n  padding: 0 1px;\n  border-radius: 2px;\n  position: relative;\n  \n  ${props=>props.isCurrent&&`\n    box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n    animation: pulse 1.5s infinite;\n    \n    @keyframes pulse {\n      0%, 100% {\n        box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n      }\n      50% {\n        box-shadow: 0 0 0 4px rgba(255, 255, 153, 0.3);\n      }\n    }\n  `}\n`;const UnusedText=styled.span`\n  color: #999;\n`;const InputArea=styled.textarea`\n  width: 100%;\n  padding: 20px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  resize: none;\n  height: 120px;\n  margin-bottom: 25px;\n  transition: all 0.3s ease;\n  \n  &:focus {\n    outline: none;\n    border-color: #3498db;\n    box-shadow: 0 0 10px rgba(52, 152, 219, 0.3);\n  }\n`;const StatContainer=styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  padding: 15px;\n  background: linear-gradient(to right, rgba(52, 152, 219, 0.05), rgba(52, 152, 219, 0.1));\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;const Stat=styled.div`\n  text-align: center;\n`;const StatLabel=styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;const StatValue=styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;const ErrorMessage=styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 1rem;\n  box-shadow: 0 2px 8px rgba(244, 67, 54, 0.2);\n  display: flex;\n  align-items: center;\n  \n  &::before {\n    content: '⚠️';\n    margin-right: 10px;\n    font-size: 1.3rem;\n  }\n`;// Select all text in the current difficulty level\nconst getAllTextsForDifficulty=difficulty=>{let allTexts='';switch(difficulty){case'easy':easyTexts.forEach(item=>{allTexts+=item.text+' ';});break;case'medium':mediumTexts.forEach(item=>{allTexts+=item.text+' ';});break;case'hard':hardTexts.forEach(item=>{allTexts+=item.text+' ';});break;default:easyTexts.forEach(item=>{allTexts+=item.text+' ';});}return allTexts.trim();};const TypingGame=_ref=>{let{text,timeSetting,difficulty,onEndGame}=_ref;// Combine the provided text with more text from the same difficulty\nconst[fullText,setFullText]=useState(text);const[inputText,setInputText]=useState('');const[startTime,setStartTime]=useState(null);const[timeLeft,setTimeLeft]=useState(timeSetting);const[typingStarted,setTypingStarted]=useState(false);const[gameOver,setGameOver]=useState(false);const[correctChars,setCorrectChars]=useState(0);const[incorrectChars,setIncorrectChars]=useState(0);const[wordsTyped,setWordsTyped]=useState(0);const[charsTyped,setCharsTyped]=useState(0);const[wpm,setWpm]=useState(0);const[accuracy,setAccuracy]=useState(100);const[carPosition,setCarPosition]=useState(0);const[previousBestWpm,setPreviousBestWpm]=useState(0);const[previousBestPosition,setPreviousBestPosition]=useState(0);const[error,setError]=useState(null);const inputRef=useRef(null);const textContainerRef=useRef(null);// Initialize with more text if needed\nuseEffect(()=>{// Use the provided text as a starting point, but expand with more text from the same difficulty\nconst allTextsFromDifficulty=getAllTextsForDifficulty(difficulty);setFullText(text+' '+allTextsFromDifficulty);},[text,difficulty]);// Calculate typing speed\nconst calculateSpeed=useCallback(()=>{try{if(!startTime)return 0;const timeElapsed=(Date.now()-startTime)/1000/60;// in minutes\nconst wordsTyped=inputText.trim().split(/\\s+/).length;return timeElapsed>0?Math.round(wordsTyped/timeElapsed):0;}catch(error){console.error(\"Error calculating typing speed:\",error);setError(\"Error calculating typing speed. Please try again.\");return 0;}},[startTime,inputText]);// Calculate car position based on typing speed using non-linear formula\nconst calculateCarPosition=useCallback(currentWpm=>{try{// Non-linear formula: position = (wpm^1.3) / 20\n// This makes faster typing disproportionately increase car speed\n// But less extreme than before (1.5 power)\nconst position=Math.pow(currentWpm,1.3)/20;// Normalize to percentage (0-100)\n// Assuming 150 WPM is the max reference point\nconst maxPosition=Math.pow(150,1.3)/20;return Math.min(position/maxPosition*100,100);}catch(error){console.error(\"Error calculating car position:\",error);return 0;// Default position\n}},[]);// Load previous best scores from localStorage based on difficulty and time setting\nuseEffect(()=>{try{const storageKey=`typingRacer_bestWpm_${difficulty}_${timeSetting}`;const savedBestWpm=localStorage.getItem(storageKey);if(savedBestWpm){const bestWpm=parseInt(savedBestWpm,10);setPreviousBestWpm(bestWpm);// Calculate car position for the previous best WPM\nconst bestPosition=calculateCarPosition(bestWpm);setPreviousBestPosition(bestPosition);}}catch(error){console.error(\"Error loading previous best score:\",error);// Continue without previous best data\n}},[difficulty,timeSetting,calculateCarPosition]);// Save best score to localStorage when game ends\nuseEffect(()=>{if(gameOver&&wpm>0){try{const storageKey=`typingRacer_bestWpm_${difficulty}_${timeSetting}`;const savedBestWpm=localStorage.getItem(storageKey);if(!savedBestWpm||wpm>parseInt(savedBestWpm,10)){localStorage.setItem(storageKey,wpm.toString());}}catch(error){console.error(\"Error saving best score:\",error);}}},[gameOver,wpm,difficulty,timeSetting]);// Update stats on text input\nuseEffect(()=>{try{if(!typingStarted&&inputText.length>0){setTypingStarted(true);setStartTime(Date.now());}if(typingStarted&&!gameOver){// Calculate correct and incorrect characters\nlet correct=0;let incorrect=0;for(let i=0;i<inputText.length;i++){if(i<fullText.length){if(inputText[i]===fullText[i]){correct++;}else{incorrect++;}}}setCorrectChars(correct);setIncorrectChars(incorrect);setCharsTyped(inputText.length);setWordsTyped(inputText.trim().split(/\\s+/).length);// Calculate accuracy\nconst totalChars=correct+incorrect;setAccuracy(totalChars>0?Math.round(correct/totalChars*100):100);// Calculate WPM\nconst currentWpm=calculateSpeed();setWpm(currentWpm);// Update car position\nsetCarPosition(calculateCarPosition(currentWpm));}}catch(error){console.error(\"Error updating typing statistics:\",error);setError(\"Error updating statistics. Game will continue, but results might be affected.\");}},[inputText,fullText,typingStarted,gameOver,calculateSpeed,calculateCarPosition]);// Timer countdown\nuseEffect(()=>{try{if(typingStarted&&timeLeft>0&&!gameOver){const timer=setTimeout(()=>{setTimeLeft(prev=>prev-1);},1000);return()=>clearTimeout(timer);}else if(timeLeft===0&&!gameOver){setGameOver(true);}}catch(error){console.error(\"Error in timer countdown:\",error);setError(\"Error with the game timer. Please restart the game.\");}},[typingStarted,timeLeft,gameOver]);// Auto-focus input field\nuseEffect(()=>{try{if(inputRef.current){inputRef.current.focus();}}catch(error){console.error(\"Error focusing input field:\",error);}},[]);// Calculate final score\nconst calculateScore=()=>{try{// Score formula: (correctChars * wordsTyped * accuracy) / (divisor)\n// This makes the score depend on correct characters, words typed, and accuracy\nconst rawScore=correctChars*wordsTyped*(accuracy/100);// Adjust the divisor based on difficulty and time\n// These values are tuned to make 10000 require exceptional performance\nconst baseDivisors={easy:25,medium:15,hard:10};// Adjust for time setting\nconst timeMultiplier=timeSetting/60;const divisor=baseDivisors[difficulty]*timeMultiplier;// Normalize score to max 10000\nreturn Math.min(Math.round(rawScore/divisor),10000);}catch(error){console.error(\"Error calculating score:\",error);return 0;// Default score\n}};// Handle input change\nconst handleInputChange=e=>{try{if(!gameOver){setInputText(e.target.value);}}catch(error){console.error(\"Error handling input change:\",error);setError(\"Error processing your typing. Please try again.\");}};// Render text with highlighting\nconst renderText=()=>{try{const elements=[];// Show a window of 500 characters, centered on the current typing position\nconst windowSize=500;const currentPos=inputText.length;const startPos=Math.max(0,currentPos-windowSize/2);const endPos=Math.min(fullText.length,startPos+windowSize);for(let i=startPos;i<endPos;i++){const isCurrent=i===inputText.length;const isTyped=i<inputText.length;const isCorrect=isTyped&&fullText[i]===inputText[i];if(isTyped){elements.push(/*#__PURE__*/_jsx(HighlightedText,{isCorrect:isCorrect,isCurrent:isCurrent,children:fullText[i]},i));}else if(isCurrent){elements.push(/*#__PURE__*/_jsx(HighlightedText,{isCorrect:true,isCurrent:true,children:fullText[i]},i));}else{elements.push(/*#__PURE__*/_jsx(UnusedText,{children:fullText[i]},i));}}return elements;}catch(error){console.error(\"Error rendering text:\",error);return/*#__PURE__*/_jsx(\"div\",{children:\"Error rendering text. Please restart the game.\"});}};return/*#__PURE__*/_jsx(\"div\",{children:gameOver?/*#__PURE__*/_jsx(Results,{wpm:wpm,accuracy:accuracy,correctChars:correctChars,incorrectChars:incorrectChars,wordsTyped:wordsTyped,score:calculateScore(),difficulty:difficulty,timeSetting:timeSetting,onPlayAgain:onEndGame,previousBestWpm:previousBestWpm}):/*#__PURE__*/_jsxs(GameContainer,{children:[error&&/*#__PURE__*/_jsx(ErrorMessage,{children:error}),/*#__PURE__*/_jsxs(TimeDisplay,{timeLeft:timeLeft,children:[timeLeft,\"s\"]}),/*#__PURE__*/_jsx(RaceTrack,{position:carPosition,previousBestPosition:previousBestPosition}),renderText(),/*#__PURE__*/_jsx(InputArea,{ref:inputRef,value:inputText,onChange:handleInputChange,placeholder:\"Start typing here...\",autoFocus:true}),/*#__PURE__*/_jsxs(StatContainer,{children:[/*#__PURE__*/_jsxs(Stat,{children:[/*#__PURE__*/_jsx(StatLabel,{children:\"WPM\"}),/*#__PURE__*/_jsx(StatValue,{children:wpm})]}),/*#__PURE__*/_jsxs(Stat,{children:[/*#__PURE__*/_jsx(StatLabel,{children:\"Accuracy\"}),/*#__PURE__*/_jsxs(StatValue,{children:[accuracy,\"%\"]})]}),/*#__PURE__*/_jsxs(Stat,{children:[/*#__PURE__*/_jsx(StatLabel,{children:\"Words\"}),/*#__PURE__*/_jsx(StatValue,{children:wordsTyped})]}),/*#__PURE__*/_jsxs(Stat,{children:[/*#__PURE__*/_jsx(StatLabel,{children:\"Best WPM\"}),/*#__PURE__*/_jsx(StatValue,{children:previousBestWpm>0?previousBestWpm:'-'})]})]})]})});};export default TypingGame;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","styled","RaceTrack","Results","easyTexts","mediumTexts","hardTexts","TimeDisplay","jsx","_jsx","jsxs","_jsxs","GameContainer","div","TextContainer","HighlightedText","span","props","isCurrent","isCorrect","UnusedText","InputArea","textarea","StatContainer","Stat","StatLabel","StatValue","ErrorMessage","getAllTextsForDifficulty","difficulty","allTexts","forEach","item","text","trim","TypingGame","_ref","timeSetting","onEndGame","fullText","setFullText","inputText","setInputText","startTime","setStartTime","timeLeft","setTimeLeft","typingStarted","setTypingStarted","gameOver","setGameOver","correctChars","setCorrectChars","incorrectChars","setIncorrectChars","wordsTyped","setWordsTyped","charsTyped","setCharsTyped","wpm","setWpm","accuracy","setAccuracy","carPosition","setCarPosition","previousBestWpm","setPreviousBestWpm","previousBestPosition","setPreviousBestPosition","error","setError","inputRef","textContainerRef","allTextsFromDifficulty","calculateSpeed","timeElapsed","Date","now","split","length","Math","round","console","calculateCarPosition","currentWpm","position","pow","maxPosition","min","storageKey","savedBestWpm","localStorage","getItem","bestWpm","parseInt","bestPosition","setItem","toString","correct","incorrect","i","totalChars","timer","setTimeout","prev","clearTimeout","current","focus","calculateScore","rawScore","baseDivisors","easy","medium","hard","timeMultiplier","divisor","handleInputChange","e","target","value","renderText","elements","windowSize","currentPos","startPos","max","endPos","isTyped","push","children","score","onPlayAgain","ref","onChange","placeholder","autoFocus"],"sources":["/Users/ericwang/Theseus/typing-racer/src/components/TypingGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport RaceTrack from './RaceTrack';\nimport Results from './Results';\nimport { Difficulty, TimeSetting } from '../App';\nimport { easyTexts } from '../data/easyTexts';\nimport { mediumTexts } from '../data/mediumTexts';\nimport { hardTexts } from '../data/hardTexts';\nimport TimeDisplay from './TimeDisplay';\n\ninterface TypingGameProps {\n  text: string;\n  timeSetting: TimeSetting;\n  difficulty: Difficulty;\n  onEndGame: () => void;\n}\n\nconst GameContainer = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 30px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  margin-bottom: 30px;\n`;\n\nconst TextContainer = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  line-height: 1.6;\n  margin-bottom: 25px;\n  padding: 20px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  height: 150px;\n  overflow-y: auto;\n  border: 2px solid #eee;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);\n  position: relative;\n  \n  &::before {\n    content: '📝';\n    position: absolute;\n    top: -10px;\n    left: 20px;\n    background-color: white;\n    padding: 0 10px;\n    font-size: 16px;\n  }\n`;\n\nconst HighlightedText = styled.span<{ isCorrect: boolean; isCurrent: boolean }>`\n  background-color: ${props => props.isCurrent ? 'rgba(255, 255, 153, 0.7)' : 'transparent'};\n  color: ${props => {\n    if (props.isCurrent) return '#333';\n    return props.isCorrect ? '#27ae60' : '#e74c3c';\n  }};\n  text-decoration: ${props => (!props.isCorrect && !props.isCurrent) ? 'line-through' : 'none'};\n  transition: all 0.15s ease;\n  padding: 0 1px;\n  border-radius: 2px;\n  position: relative;\n  \n  ${props => props.isCurrent && `\n    box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n    animation: pulse 1.5s infinite;\n    \n    @keyframes pulse {\n      0%, 100% {\n        box-shadow: 0 0 0 2px rgba(255, 255, 153, 0.5);\n      }\n      50% {\n        box-shadow: 0 0 0 4px rgba(255, 255, 153, 0.3);\n      }\n    }\n  `}\n`;\n\nconst UnusedText = styled.span`\n  color: #999;\n`;\n\nconst InputArea = styled.textarea`\n  width: 100%;\n  padding: 20px;\n  font-family: 'Courier New', monospace;\n  font-size: 1.2rem;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  resize: none;\n  height: 120px;\n  margin-bottom: 25px;\n  transition: all 0.3s ease;\n  \n  &:focus {\n    outline: none;\n    border-color: #3498db;\n    box-shadow: 0 0 10px rgba(52, 152, 219, 0.3);\n  }\n`;\n\nconst StatContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 25px;\n  padding: 15px;\n  background: linear-gradient(to right, rgba(52, 152, 219, 0.05), rgba(52, 152, 219, 0.1));\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n`;\n\nconst Stat = styled.div`\n  text-align: center;\n`;\n\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: #555;\n  margin-bottom: 5px;\n`;\n\nconst StatValue = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  color: #333;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: #ffebee;\n  border: 1px solid #f44336;\n  color: #d32f2f;\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 1rem;\n  box-shadow: 0 2px 8px rgba(244, 67, 54, 0.2);\n  display: flex;\n  align-items: center;\n  \n  &::before {\n    content: '⚠️';\n    margin-right: 10px;\n    font-size: 1.3rem;\n  }\n`;\n\n// Select all text in the current difficulty level\nconst getAllTextsForDifficulty = (difficulty: Difficulty): string => {\n  let allTexts = '';\n  switch (difficulty) {\n    case 'easy':\n      easyTexts.forEach(item => { allTexts += item.text + ' '; });\n      break;\n    case 'medium':\n      mediumTexts.forEach(item => { allTexts += item.text + ' '; });\n      break;\n    case 'hard':\n      hardTexts.forEach(item => { allTexts += item.text + ' '; });\n      break;\n    default:\n      easyTexts.forEach(item => { allTexts += item.text + ' '; });\n  }\n  return allTexts.trim();\n};\n\nconst TypingGame: React.FC<TypingGameProps> = ({\n  text,\n  timeSetting,\n  difficulty,\n  onEndGame\n}) => {\n  // Combine the provided text with more text from the same difficulty\n  const [fullText, setFullText] = useState<string>(text);\n  const [inputText, setInputText] = useState<string>('');\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [timeLeft, setTimeLeft] = useState<number>(timeSetting);\n  const [typingStarted, setTypingStarted] = useState<boolean>(false);\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [correctChars, setCorrectChars] = useState<number>(0);\n  const [incorrectChars, setIncorrectChars] = useState<number>(0);\n  const [wordsTyped, setWordsTyped] = useState<number>(0);\n  const [charsTyped, setCharsTyped] = useState<number>(0);\n  const [wpm, setWpm] = useState<number>(0);\n  const [accuracy, setAccuracy] = useState<number>(100);\n  const [carPosition, setCarPosition] = useState<number>(0);\n  const [previousBestWpm, setPreviousBestWpm] = useState<number>(0);\n  const [previousBestPosition, setPreviousBestPosition] = useState<number>(0);\n  const [error, setError] = useState<string | null>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const textContainerRef = useRef<HTMLDivElement>(null);\n\n  // Initialize with more text if needed\n  useEffect(() => {\n    // Use the provided text as a starting point, but expand with more text from the same difficulty\n    const allTextsFromDifficulty = getAllTextsForDifficulty(difficulty);\n    setFullText(text + ' ' + allTextsFromDifficulty);\n  }, [text, difficulty]);\n\n  // Calculate typing speed\n  const calculateSpeed = useCallback(() => {\n    try {\n      if (!startTime) return 0;\n      \n      const timeElapsed = (Date.now() - startTime) / 1000 / 60; // in minutes\n      const wordsTyped = inputText.trim().split(/\\s+/).length;\n      \n      return timeElapsed > 0 ? Math.round(wordsTyped / timeElapsed) : 0;\n    } catch (error) {\n      console.error(\"Error calculating typing speed:\", error);\n      setError(\"Error calculating typing speed. Please try again.\");\n      return 0;\n    }\n  }, [startTime, inputText]);\n\n  // Calculate car position based on typing speed using non-linear formula\n  const calculateCarPosition = useCallback((currentWpm: number) => {\n    try {\n      // Non-linear formula: position = (wpm^1.3) / 20\n      // This makes faster typing disproportionately increase car speed\n      // But less extreme than before (1.5 power)\n      const position = Math.pow(currentWpm, 1.3) / 20;\n      \n      // Normalize to percentage (0-100)\n      // Assuming 150 WPM is the max reference point\n      const maxPosition = Math.pow(150, 1.3) / 20; \n      return Math.min((position / maxPosition) * 100, 100);\n    } catch (error) {\n      console.error(\"Error calculating car position:\", error);\n      return 0; // Default position\n    }\n  }, []);\n\n  // Load previous best scores from localStorage based on difficulty and time setting\n  useEffect(() => {\n    try {\n      const storageKey = `typingRacer_bestWpm_${difficulty}_${timeSetting}`;\n      const savedBestWpm = localStorage.getItem(storageKey);\n      \n      if (savedBestWpm) {\n        const bestWpm = parseInt(savedBestWpm, 10);\n        setPreviousBestWpm(bestWpm);\n        \n        // Calculate car position for the previous best WPM\n        const bestPosition = calculateCarPosition(bestWpm);\n        setPreviousBestPosition(bestPosition);\n      }\n    } catch (error) {\n      console.error(\"Error loading previous best score:\", error);\n      // Continue without previous best data\n    }\n  }, [difficulty, timeSetting, calculateCarPosition]);\n\n  // Save best score to localStorage when game ends\n  useEffect(() => {\n    if (gameOver && wpm > 0) {\n      try {\n        const storageKey = `typingRacer_bestWpm_${difficulty}_${timeSetting}`;\n        const savedBestWpm = localStorage.getItem(storageKey);\n        \n        if (!savedBestWpm || wpm > parseInt(savedBestWpm, 10)) {\n          localStorage.setItem(storageKey, wpm.toString());\n        }\n      } catch (error) {\n        console.error(\"Error saving best score:\", error);\n      }\n    }\n  }, [gameOver, wpm, difficulty, timeSetting]);\n\n  // Update stats on text input\n  useEffect(() => {\n    try {\n      if (!typingStarted && inputText.length > 0) {\n        setTypingStarted(true);\n        setStartTime(Date.now());\n      }\n\n      if (typingStarted && !gameOver) {\n        // Calculate correct and incorrect characters\n        let correct = 0;\n        let incorrect = 0;\n        \n        for (let i = 0; i < inputText.length; i++) {\n          if (i < fullText.length) {\n            if (inputText[i] === fullText[i]) {\n              correct++;\n            } else {\n              incorrect++;\n            }\n          }\n        }\n        \n        setCorrectChars(correct);\n        setIncorrectChars(incorrect);\n        setCharsTyped(inputText.length);\n        setWordsTyped(inputText.trim().split(/\\s+/).length);\n        \n        // Calculate accuracy\n        const totalChars = correct + incorrect;\n        setAccuracy(totalChars > 0 ? Math.round((correct / totalChars) * 100) : 100);\n        \n        // Calculate WPM\n        const currentWpm = calculateSpeed();\n        setWpm(currentWpm);\n        \n        // Update car position\n        setCarPosition(calculateCarPosition(currentWpm));\n      }\n    } catch (error) {\n      console.error(\"Error updating typing statistics:\", error);\n      setError(\"Error updating statistics. Game will continue, but results might be affected.\");\n    }\n  }, [inputText, fullText, typingStarted, gameOver, calculateSpeed, calculateCarPosition]);\n\n  // Timer countdown\n  useEffect(() => {\n    try {\n      if (typingStarted && timeLeft > 0 && !gameOver) {\n        const timer = setTimeout(() => {\n          setTimeLeft(prev => prev - 1);\n        }, 1000);\n        \n        return () => clearTimeout(timer);\n      } else if (timeLeft === 0 && !gameOver) {\n        setGameOver(true);\n      }\n    } catch (error) {\n      console.error(\"Error in timer countdown:\", error);\n      setError(\"Error with the game timer. Please restart the game.\");\n    }\n  }, [typingStarted, timeLeft, gameOver]);\n\n  // Auto-focus input field\n  useEffect(() => {\n    try {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    } catch (error) {\n      console.error(\"Error focusing input field:\", error);\n    }\n  }, []);\n\n  // Calculate final score\n  const calculateScore = () => {\n    try {\n      // Score formula: (correctChars * wordsTyped * accuracy) / (divisor)\n      // This makes the score depend on correct characters, words typed, and accuracy\n      const rawScore = correctChars * wordsTyped * (accuracy / 100);\n      \n      // Adjust the divisor based on difficulty and time\n      // These values are tuned to make 10000 require exceptional performance\n      const baseDivisors = {\n        easy: 25,\n        medium: 15,\n        hard: 10\n      };\n      \n      // Adjust for time setting\n      const timeMultiplier = timeSetting / 60;\n      const divisor = baseDivisors[difficulty] * timeMultiplier;\n      \n      // Normalize score to max 10000\n      return Math.min(Math.round(rawScore / divisor), 10000);\n    } catch (error) {\n      console.error(\"Error calculating score:\", error);\n      return 0; // Default score\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    try {\n      if (!gameOver) {\n        setInputText(e.target.value);\n      }\n    } catch (error) {\n      console.error(\"Error handling input change:\", error);\n      setError(\"Error processing your typing. Please try again.\");\n    }\n  };\n\n  // Render text with highlighting\n  const renderText = () => {\n    try {\n      const elements = [];\n      \n      // Show a window of 500 characters, centered on the current typing position\n      const windowSize = 500;\n      const currentPos = inputText.length;\n      const startPos = Math.max(0, currentPos - windowSize / 2);\n      const endPos = Math.min(fullText.length, startPos + windowSize);\n      \n      for (let i = startPos; i < endPos; i++) {\n        const isCurrent = i === inputText.length;\n        const isTyped = i < inputText.length;\n        const isCorrect = isTyped && fullText[i] === inputText[i];\n        \n        if (isTyped) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={isCorrect} isCurrent={isCurrent}>\n              {fullText[i]}\n            </HighlightedText>\n          );\n        } else if (isCurrent) {\n          elements.push(\n            <HighlightedText key={i} isCorrect={true} isCurrent={true}>\n              {fullText[i]}\n            </HighlightedText>\n          );\n        } else {\n          elements.push(\n            <UnusedText key={i}>\n              {fullText[i]}\n            </UnusedText>\n          );\n        }\n      }\n      \n      return elements;\n    } catch (error) {\n      console.error(\"Error rendering text:\", error);\n      return <div>Error rendering text. Please restart the game.</div>;\n    }\n  };\n\n  return (\n    <div>\n      {gameOver ? (\n        <Results\n          wpm={wpm}\n          accuracy={accuracy}\n          correctChars={correctChars}\n          incorrectChars={incorrectChars}\n          wordsTyped={wordsTyped}\n          score={calculateScore()}\n          difficulty={difficulty}\n          timeSetting={timeSetting}\n          onPlayAgain={onEndGame}\n          previousBestWpm={previousBestWpm}\n        />\n      ) : (\n        <GameContainer>\n          {error && <ErrorMessage>{error}</ErrorMessage>}\n          \n          <TimeDisplay timeLeft={timeLeft}>\n            {timeLeft}s\n          </TimeDisplay>\n          \n          <RaceTrack \n            position={carPosition} \n            previousBestPosition={previousBestPosition} \n          />\n          \n          {renderText()}\n          \n          <InputArea\n            ref={inputRef}\n            value={inputText}\n            onChange={handleInputChange}\n            placeholder=\"Start typing here...\"\n            autoFocus\n          />\n          \n          <StatContainer>\n            <Stat>\n              <StatLabel>WPM</StatLabel>\n              <StatValue>{wpm}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Accuracy</StatLabel>\n              <StatValue>{accuracy}%</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Words</StatLabel>\n              <StatValue>{wordsTyped}</StatValue>\n            </Stat>\n            <Stat>\n              <StatLabel>Best WPM</StatLabel>\n              <StatValue>{previousBestWpm > 0 ? previousBestWpm : '-'}</StatValue>\n            </Stat>\n          </StatContainer>\n        </GameContainer>\n      )}\n    </div>\n  );\n};\n\nexport default TypingGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}